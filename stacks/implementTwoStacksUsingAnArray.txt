Your task is to implement  2 stacks in one array efficiently.

 

Example 1:

Input:
push1(2)
push1(3)
push2(4)
pop1()
pop2()
pop2()

Output:
3 4 -1

Explanation:
push1(2) the stack1 will be {2}
push1(3) the stack1 will be {2,3}
push2(4) the stack2 will be {4}
pop1()   the poped element will be 3 
from stack1 and stack1 will be {2}
pop2()   the poped element will be 4 
from stack2 and now stack2 is empty
pop2()   the stack2 is now empty hence -1 .




the idea is to begin the two stacks from the extreme ends of the array 

top1[|||||||]top2
top1=-1;top2=size;

/*The structure of the class is
class twoStacks
{
    int *arr;
    int size;
    int top1, top2;
public:
   twoStacks(int n=100){size = n; arr = new int[n]; top1 = -1; top2 = size;}
 
   void push1(int x);
   void push2(int x);
   int pop1();
   int pop2();
};
*/


/* The method push to push element into the stack 2 */
void twoStacks :: push1(int x)
{
    if(top1==top2-1)
    cout<<"stack1 overflow";
    else
    {
        top1++;
        arr[top1]=x;
    }

}
   
/* The method push to push element into the stack 2*/
void twoStacks ::push2(int x)
{
if(top2==top1+1)
    cout<<"stack2 overflow";
    else
    {
        top2--;
        arr[top2]=x;
    }
}
   
/* The method pop to pop element from the stack 1 */
//Return the popped element
int twoStacks ::pop1()
{
    if(top1<0)
   return -1;
    else
    {
        int x=arr[top1];
        top1--;
        return x;
    }

}

/* The method pop to pop element from the stack 2 */
//Return the popped element
int twoStacks :: pop2()
{
     if(top2>=size)
     return -1;
        int x=arr[top2];
        top2++;
        return x;
    

}



