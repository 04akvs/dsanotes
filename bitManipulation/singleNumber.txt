Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

Follow up: Could you implement a solution with a linear runtime complexity and without using extra memory?

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

brute force:
using map for storing each elements frequency 

class Solution {
public:
    int singleNumber(vector<int>& nums) {
      unordered_map<int,int>m;int num=0;
        for(int i=0;i<nums.size();i++)
        {   
        m[nums[i]]++;
        }
        for(auto i:m)
        {
            if(i.second==1)
            {
                num=i.first;
                break;
            }
        }
        return num;
    }
        
};


tc:O(n)
sC:O(n)



efficient method using bit manipulation:
   //xor of two same numbers is zero 
   thus they'll cancel out giving us the only single number

class Solution {
public:
    int singleNumber(vector<int>& nums) {
     int num=0;
        //xor of two same numbers is zero thus they'll cancel out givibg us the only single number
        for(int i=0;i<nums.size();i++)
        {   
        num=num^nums[i];
        }
        return num;
    }
        
};


tC:O(n)
SC:O(1)

