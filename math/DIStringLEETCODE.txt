Given a string S that only contains "I" (increase) or "D" (decrease), let N = S.length.

Return any permutation A of [0, 1, ..., N] such that for all i = 0, ..., N-1:

If S[i] == "I", then A[i] < A[i+1]
If S[i] == "D", then A[i] > A[i+1]
 

Example 1:

Input: "IDID"
Output: [0,4,1,3,2]
Example 2:

Input: "III"
Output: [0,1,2,3]
//////////////////////////////////////------------------------------////////////////////////////////////
class Solution {
public:
    vector<int> diStringMatch(string s) {
        int i=0;int d=s.size();
        vector<int>v;
        for(int j=0;j<s.size();j++)
        {
            if(s[j]=='I')
                v.push_back(i++);
            else
                v.push_back(d--);
        }
        if(s[s.size()-1]=='I')
            v.push_back(i++);
        else
            v.push_back(d--);
        return v;
    }
};