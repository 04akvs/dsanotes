asked in amazon.


Problem Description

Given a string A consisting only of lowercase characters, we need to check whether it is possible to make this string a palindrome after removing exactly one character from this.

If it is possible then return 1 else return 0.



Problem Constraints
3 <= |A| <= 105

A[i] is always a lowercase character.



Input Format
First and only argument is an string A.



Output Format
Return 1 if it is possible to convert A to palindrome by removing exactly one character else return 0.



Example Input
Input 1:

 A = "abcba"
Input 2:

 A = "abecbea"


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 We can remove character ‘c’ to make string palindrome
Explanation 2:

 It is not possible to make this string palindrome just by removing one 



 int Solution::solve(string str) {
    //find LPS
    int n=str.size();
    vector<vector<int>>dp(n+1,vector<int>(n+1,0));
    string rev="";
        for(int i=0;i<n;i++)
            rev=str[i]+rev;
    int k=0;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(str[i-1]==34 || rev[j-1]==34)
            k++;
            else if(str[i-1]==rev[j-1]){
                dp[i][j]=1+dp[i-1][j-1];
            }
            else{
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    int len=dp[n][n];
    if(n-len<=1)
    return true;
    return false;
    
}


Optimised two pointer approach :

int Solution::solve(string A) {
    //find LPS
    int n=A.length()-1;
int i=0;int j=n;
int count=0;
while(i<j)
{
if(A[i]!=A[j])
{
if(A[i+1]==A[j])
count++,i++;
else if(A[i]==A[j-1])
count++,j--;
else
return 0;
}
else
i++,j--;
}
if(count>1) return 0;
    return 1;
}

TC:O(n)
sC:O(1)

