Problem Description

Given a string A consisting of lowercase characters.

You have to find the number of substrings in A which starts with vowel and end with consonants or vice-versa.

Return the count of substring modulo 109 + 7.



Problem Constraints
1 <= |A| <= 105

A consists only of lower-case characters.



Input Format
First argument is an string A.



Output Format
Return a integer denoting the the number of substrings in A which starts with vowel and end with consonants or vice-versa with modulo 109 + 7.



Example Input
Input 1:

 A = "aba"
Input 2:

 A = "a"


Example Output
Output 1:

 2
Output 2:

 0


Example Explanation
Explanation 1:

 Substrings of S are : [a, ab, aba, b, ba, a]Out of these only 'ab' and 'ba' satisfy the condition for special Substring. So the answer is 2.
Explanation 2:

 No possible substring that start with vowel and end with consonant or vice-versa.



we can store the number of vowels & consonants after every index :



 int mod=1e9+7;
bool isVowel(char s){
    if(s=='a' || s=='e' || s=='i' || s=='o' || s=='u')
    return true;
    return false;
}
int Solution::solve(string str) {
    int num=0;int n=str.size();
    vector<int>v(n,0);vector<int>c(n,0);
     int vowel=0;int conso=0;
    if(isVowel(str[n-1]))
    {
        v[n-1]=1;vowel++;
    }
    else
    {
        c[n-1]=1;
        conso++;
    }
   
    for(int i=n-2;i>=0;i--){
        if(isVowel(str[i]))
            vowel++;
        else
            conso++;
        v[i]=vowel;
        c[i]=conso;
        
    }
    for(int i=0;i<n;i++){
        if(isVowel(str[i]))
            num+=c[i];
        else
            num+=v[i];
    }
    return (num%mod);
}

TC:O(n)
sc:O(n)




Optimised approach :


bool isVowel(char ch){
    return ch=='a' || ch=='e'||ch=='i'|| ch=='o' ||ch=='u';
}
int Solution::solve(string str) {
    int mod=pow(10,9)+7;
    int n=str.size();
    int vowel=0;int consonant=0;int ans=0;
    for(int i=0;i<str.size();i++){
        if(isVowel(str[i])){
            ans=(ans+consonant)%mod;
            vowel++;
        }else{
            ans=(ans+vowel)%mod;
            consonant++;
        }
    }
    return ans%mod;

}



TC:O(n)
sC:O(1)
