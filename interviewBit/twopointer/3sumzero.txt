
asked in facebook,google 

Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 

Find all unique triplets in the array which gives the sum of zero.

Note:

Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)

The solution set must not contain duplicate triplets.

For example, given array S = {-1 0 1 2 -1 -4},

A solution set is:

  (-1, 0, 1)

  (-1, -1, 2)




brute force:
O(n*n*n)

better :
using hashset to avoid duplicates :

vector<vector<int> > Solution::threeSum(vector<int> &arr) {
    int n=arr.size();
    int target=0;
    vector<vector<int>>ans;
    sort(arr.begin(),arr.end());
    unordered_set<vector<long long int>>s;
    for(int i=0;i<n-2;i++){
        int j=i+1;int k=n-1;
        while(k>j){
            long long int sum=(long long int)arr[i]+(long long int)arr[j]+(long long int)arr[k];
            if(sum==target){
                if(s.find({arr[i],arr[j],arr[k]})==s.end()){
                    s.insert({arr[i],arr[j],arr[k]});
                    ans.push_back({arr[i],arr[j],arr[k]});
                }
                j++;k--;
            }
            else if(sum>target)
            k--;
            else
            j++;
        }
    }
    return ans;
}

TC:O(n*n)
SC:O(n)



without using any extra space to avoid duplicates:


vector<vector<int> > Solution::threeSum(vector<int> &arr) {
    int n=arr.size();
    int target=0;
    vector<vector<int>>ans;
    sort(arr.begin(),arr.end());
    set<vector<long long int>>s;
    for(int i=0;i<n-2;i++){
        if(i>0 && arr[i]==arr[i-1])//we've already dealt with it 
        continue;
        int j=i+1;int k=n-1;
        while(j<n && k>j){
            long long int sum=(long long int)arr[i]+(long long int)arr[j]+(long long int)arr[k];
            if(sum==target){
                 ans.push_back({arr[i],arr[j],arr[k]});
               while(j<n-1 && arr[j]==arr[j+1])
               j++;
               while(k>0 && arr[k]==arr[k-1])
               k--;
               j++;
               k--;
                   
                }
            else if(sum>target)
            k--;
            else
            j++;
        }
    }
    return ans;
}

TC:O(n*n)
SC:O(1)

