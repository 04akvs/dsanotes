Find the intersection of two sorted arrays.

OR in other words,

Given 2 sorted arrays, find all the elements which occur in both the arrays.

Example :

Input : 
    A : [1 2 3 3 4 5 6]
    B : [3 3 5]

Output : [3 3 5]

Input : 
    A : [1 2 3 3 4 5 6]
    B : [3 5]

Output : [3 5]



brute force approach will not work as the count is also  important 



to maintain the count of elements . i will take a hashmap 

vector<int> Solution::intersect(const vector<int> &arr, const vector<int> &brr) {
    unordered_map<int,int>mp;int n=arr.size();int m=brr.size();
    for(int i=0;i<n;i++){
        mp[arr[i]]++;
    }
    vector<int>ans;
    for(int i=0;i<m;i++){
      if(mp.find(brr[i])!=mp.end() && mp[brr[i]]>0)
        {
            ans.push_back(brr[i]);
            mp[brr[i]]--;//it has matched with one element so decrease its count 
        }
    }
    return ans;
}


TC:O(n)
SC:O(n)




without using any extra space:

using two pointer approach-

vector<int> Solution::intersect(const vector<int> &arr, const vector<int> &brr) {
    int n=arr.size();
    int m=brr.size();
    vector<int>ans;
    int i=0;int j=0;
    while(i<n && j<m){
        if(arr[i]==brr[j]){
            ans.push_back(arr[i]);
            i++;
            j++;
        }
        else if(arr[i]<brr[j]){ if first is smaller move it forward 
            i++;
        }
        else
        j++;
    }
    return ans;
}
