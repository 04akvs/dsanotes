asked in FACEBOOK MICROSOFT



Given an array with n objects colored red, white or blue, 

sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: Using library sort function is not allowed.

Example :

Input : [0 1 2 0 1 2]
Modify array so that it becomes : [0 0 1 1 2 2]



what I can do is maintain a freq of each color using hashmap 
then i can fill in same colors consecutively until its freq becomes zero ,then switch to next color

void Solution::sortColors(vector<int> &arr) {
    
    int n=arr.size();
    if(n==0)
    return ;
    vector<int>colors(3,0);
    for(int i=0;i<n;i++){
    colors[arr[i]]++;
    }int start=0;
    for(int i=0;i<3;i++){
        while(colors[i]>0){
            arr[start++]=i;
            colors[i]--;
        }
    }
}


TC:O(n)
SC:O(1)as 3 colors only 



without using any extra space :


using two pointer 


void Solution::sortColors(vector<int> &arr) {
    int n=arr.size();
    if(n==0)
    return ;
    int low=0;int high=n-1;
    int mid=0;
    while(mid<=high){
            if(arr[mid]==0){//we want 0 to be at starting thus swap it with low 
            swap(arr[low],arr[mid]);
            low++;mid++;
            }
            else if(arr[mid]==2){//we want 2 to be at end thus swap it with mid 
                 swap(arr[mid],arr[high]);
                high--;//but don't move mid because  0 or 2 comes at its place then again you need to swap 
            }
            else
                mid++;
    }
}

TC:O(n)
SC:O(1)


