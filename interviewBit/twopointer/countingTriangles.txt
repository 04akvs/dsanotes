
You are given an array of N non-negative integers, A0, A1 ,…, AN-1.

Considering each array element Ai as the edge length of some line segment, count the number of triangles which you can form using these array values.

Notes:

You can use any value only once while forming each triangle. Order of choosing the edge lengths doesn’t matter. Any triangle formed should have a positive area.

Return answer modulo 109 + 7.

For example,

A = [1, 1, 1, 2, 2]

Return: 4


brute force :

#define mod 10e9+7;
int Solution::nTriang(vector<int> &arr) {
    //sum of any two sides is greater than third side 
    //a>b+c//b>a+c//c>a+b
    //brute force
    int n=arr.size();int count=0;
    for(int i=0;i<n-2;i++){
        for(int j=i+1;j<n-1;j++){
            for(int k=j+1;k<n;k++){
                if(arr[i]<arr[j]+arr[k] && arr[j]<arr[i]+arr[k] && arr[k]<arr[i]+arr[j])
                count++;
            }
        }
    }
    return count;
}


TC:O(n*n*n)
sc:O(1)


int Solution::nTriang(vector<int> &A) {
    //sum of two sides is greater than third side 
    //a>b+c && b>a+c && c>a+b
    int n=A.size();
    int num=pow(10,9)+7;
    sort(A.begin(),A.end());
    int ans=0;
    for(int k = n - 1; k >= 0; k--){
        int i = 0, j = k-1;
        while(i < j){
            if((A[i]+A[j])>A[k]){
                ans = (ans+(j-i)%num)%num;
                j--;
            }   
            else{
                i++;    
            }
        }
    }
    return ans;
}

TC:O(n*n)
SC:O(1)
