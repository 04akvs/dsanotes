
asked in Adobe, Google,Amazon 

The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.

N Queens: Example 1

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens’ placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,

There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]


bool isvalid(vector<string> &board, int row, int col){
        // check col
        for(int i=row;i>=0;--i)
            if(board[i][col] == 'Q') return false;
        // check left diagonal
        for(int i=row,j=col;i>=0&&j>=0;--i,--j)
            if(board[i][j] == 'Q') return false;
        //check right diagonal
        for(int i=row,j=col;i>=0&&j<board.size();--i,++j)
            if(board[i][j] == 'Q') return false;
        return true;
 }
    void dfs(vector<string> &board, int row,vector<vector<string>>&ret){
        // exit condition
        if(row == board.size()){
            ret.push_back(board);
            return;
        }
        // iterate every possible position
        for(int col=0;col<board.size();++col){
            if(isvalid(board,row,col)){
                // make decision
                board[row][col] = 'Q';
                // next iteration
                dfs(board,row+1,ret);
                // back-tracking
                board[row][col] = '.';
            }
        }
}
vector<vector<string> > Solution::solveNQueens(int n) { 
        if(n <= 0) return {{}};
        vector<vector<string>>ret;
        vector<string> board(n,string(n,'.'));
        dfs(board,0,ret);
        return ret;
    }

TC:O()