asked in ADOBE:

Given a collection of numbers, return all possible permutations.

Example:

[1,2,3] will have the following permutations:

[1,2,3]
[1,3,2]
[2,1,3] 
[2,3,1] 
[3,1,2] 
[3,2,1]
NOTE

No two entries in the permutation sequence should be the same.
For the purpose of this problem, assume that all the numbers in the collection are unique.
Warning : DO NOT USE LIBRARY FUNCTION FOR GENERATING PERMUTATIONS.

Example : next_permutations in C++ / itertools.permutations in python.

If you do, we will disqualify your submission retroactively and give you penalty points.



void bktrack(vector<int>&nums,vector<vector<int>>&ans,int start){
    if(start==nums.size()){
        ans.push_back(nums);
        return ;
    }
    for(int i=start;i<nums.size();i++){
        swap(nums[i],nums[start]);
        bktrack(nums,ans,start+1);
        swap(nums[i],nums[start]);
    }
}
vector<vector<int> > Solution::permute(vector<int> &nums) {
    vector<vector<int>>ans;
    vector<int>perm;
    bktrack(nums,ans,0);
    return ans ;
}

TC:O(n*n!) as there are total n! permutations and to get each takes us n steps 

SC:O(n)

