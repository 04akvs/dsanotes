Given two strings s and t , write a function to determine if t is an anagram of s.

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
Method 1:we can sort the strings in alphabetical order and compare character by character
TC:O(nlog(n))
Aux SC:O(1)
bool isAnagram(string s, string t) {
      
        if(s.size()!=t.size())
            return false;
        sort(s.begin(),s.end());
        sort(t.begin(),t.end());
        for(int i=0;i<s.size();i++)
        {
            if(s[i]!=t[i])
                return false;
        }
        return true;
}
Method 2: TC: O(n) we use unordered_map to store the count of each letter and compare, SC:O(n) for space
bool isAnagram(string s,string t)
{
    if(s.size()!=t.size())
    return false;
 unordered_map<char,int>ms,mt;
        for(int i=0;i<s.size();i++)
        {
            ms[s[i]]++;mt[t[i]]++;
        }
        for(auto i:ms)
        {
            if(mt[i.first]!=i.second)
                return false;
        }
        return true;
    }
    Method 3: we can use a frequency array TC:O(n)
    class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.length() != t.length()) return false;
        int n = s.length();
        int counts[26] = {0};
        for (int i = 0; i < n; i++) { 
            counts[s[i] - 'a']++;
            counts[t[i] - 'a']--;
        }
        for (int i = 0; i < 26; i++)
            if (counts[i]) return false;
        return true;
    }
};