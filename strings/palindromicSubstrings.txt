Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:

Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
 

Example 2:

Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
 

Note:

The input string length won't exceed 1000.


class Solution {
public:
     bool palin(string rev)
    {
         
        int n=rev.size();
        for(int i=0;i<n/2;i++)
        {
            if(rev[i]!=rev[n-1-i])
                return false;
        }
        return true;
    }
    int countSubstrings(string s) {
        int n=s.size();int c=0;string rev="";
        //find all substrings and check whether they are palindromic or not
        for(int i=0;i<n;i++)
        {
          
          for(int j=i;j<n;j++)
          {
            rev="";
           for(int k=i;k<=j;k++)
           {
               rev+=s[k];
               
           }
        
              if( palin(rev)==true)
                  c++; 
          }

        }
        return c;
    }
};

TC:O(n*n*n)
SC:O(1)



we can think of dp based approach to redice the time complexity 

we should always proceed from recursive to memoized to tabulation method approach
recursive approach:

#include <bits/stdc++.h>
using namespace std;

int substringCheck(string str,int i,int j)
{
    if(i>=j)
    return 1;
    if(str[i]==str[j])//equal characters 
    {
        return substringCheck(str,i+1,j-1);
    }
    else
    return 0;
}
int countsub(string str)
{
    int n=str.size();int c=0;
    for(int i=0;i<n;i++)
    {
        for(int j=i;j<n;j++)
        {
            
            c+=substringCheck(str,i,j);
        }
    }
    return c;
}
int main() {
	//code
	int t;cin>>t;
	while(t--)
	{
	    int n;cin>>n;
	    string str;cin>>str;
	    cout<<countsub(str)<<"\n";
	}
	return 0;
}

/////////
recursion with memoization
int dp[501][501];
int substringCheck(string str,int i,int j)
{
    
    if(i>=j)
    return 1;
    if(dp[i][j]!=-1)
    return dp[i][j];
    else if(str[i]==str[j])//equal characters 
    {
       return  dp[i][j]= substringCheck(str,i+1,j-1);
    }
    else
    return dp[i][j]=0;
}
int countsub(string str)
{
    int n=str.size();int c=0;
   
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(i!=j)
            dp[i][j]=-1;
            if(i==j)
            dp[i][j]=0;
        }
    }
    for(int i=0;i<n;i++)
    {
        for(int j=i;j<n;j++)
        {
            
            c+=substringCheck(str,i,j);
        }
    }
    return c;
}
int main() {
	//code
	int t;cin>>t;
	while(t--)
	{
	    int n;cin>>n;
	    string str;cin>>str;
	    cout<<countsub(str)<<"\n";
	}
	return 0;
}

/////////////////////////////////////


top down dp

class Solution {
public:
     
    int countSubstrings(string str) {
        int n=str.size();
        if(n==0)
            return 0;
        if(n==1)
            return 1;
         bool dp[n][n];int count=0;
	   memset(dp,false, sizeof(dp));
	  for(int i=0;i<n;i++)//for single characters 
	  {
	      dp[i][i]=true;count++;

	  }
	  //now for two length characters 
	  for(int i=1;i<n;i++)
	  {
	      if(str[i-1]==str[i])
	      {
	          dp[i-1][i]=true;
              count++;
	      }
	  }
        
        for (int gap = 2;gap <n; gap++) {
            for(int i=0, j=gap;j<n;j++,i++)
            {
                if(str[i]==str[j])
                {
                    if(dp[i+1][j-1])
                    {
                        dp[i][j]=true;
                        count+=dp[i][j];
                    }
                }
            }
        }
        return count;
    }
};

TC:O(n*n)
SC:O(n*n)

