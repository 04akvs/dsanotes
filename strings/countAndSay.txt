The count-and-say sequence is a sequence of digit strings defined by the recursive formula:

countAndSay(1) = "1"
countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string.
To determine how you "say" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.

For example, the saying and conversion for digit string "3322251":


Given a positive integer n, return the nth term of the count-and-say sequence.


what we can do here is that for every string we can count the occurence of every digit and then convert that occurence into its string form at every not equal digit
eg: 1122
1 is occuring 2 times thus 
"21"
then two is occuring 2 times thus
"22"
therefore final string is "2122"
TC:O(n*n) Solution





recursive approach :


class Solution {
public:
    string ans="";
    void countsay(int n,string s,unordered_map<int,string>mp){
        if(n==0)
        {
            ans=s;
            return ;
        }
        //we have to count the occurence 
        int count=1;string res="";
        for(int i=0;i<s.size()-1;i++){
            if(s[i]==s[i+1])
                count++;
            else{
                res+=mp[count];res+=s[i];count=1;//the way of appending strings can make a huge difference in TC
            }
        }
         res+=mp[count];res+=s[s.size()-1];
        countsay(n-1,res,mp);
    }
    string countAndSay(int n) {
        string s="";
        if(n==1)
            return "1";
        if(n==2)
            return "11";
        s="11";
        unordered_map<int,string>mp;
     mp[1]="1";mp[2]="2";mp[3]="3";mp[4]="4";mp[5]="5";mp[6]="6";mp[7]="7";mp[8]="8";mp[9]="9";
        countsay(n-2,s,mp);
        return ans;
    }
};

one thing to note is that instead of map , you can also just simply add count to string as res+=char(count+'0');


tc:O(n*k)  k is length of the string 
//////////////////////////////////////////////////////////////////////////



Iterative approach :


class Solution {
public:
    string countAndSay(int n) {
        if(n==1)
            return "1";
        else if(n==2)
            return "11";
        string str="11";string rev="";
        for(int i=3;i<=n;i++)
        {
           int c=1;rev="";
           for(int j=0;j<str.size()-1;j++)
           {
               if(str[j]==str[j+1])
               {
                   c++;
               }
               else
               {
                   rev+=char(c+'0');rev+=str[j];
                   c=1;
               }
           }
            //for the last character
           rev+=char(c+'0');rev+=str[str.size()-1];
            str=rev;//cout<<str;
        }
        return rev;
    }
};