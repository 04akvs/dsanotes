Given a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.

Example 1:

Input:
s = "abpcplea", d = ["ale","apple","monkey","plea"]

Output: 
"apple"
 

Example 2:

Input:
s = "abpcplea", d = ["a","b","c"]

Output: 
"a"
 

Note:

All the strings in the input will only contain lower-case letters.
The size of the dictionary won't exceed 1,000.
The length of all the strings in the input won't exceed 1,000.




class Solution {
public:
    string findLongestWord(string s, vector<string>& d) {
        //I think we should sort the dictionary so that we get lexicographically smallest string
        //remember the string should be a subsequence 
       sort(d.begin(),d.end());
         string ans="";int len=INT_MIN;
        for(int i=0;i<d.size();i++)//for every word in dictionary 
        {
              string str=d[i];
              int c=0;int k=0;int j=0;
            while(j<str.size() && k<s.size())
            {
            if(s[k]==str[j])
            {
                c++;j++;
            }
                k++;
            }
            if(c==str.size() && c>len)
            {
                ans=str;
                len=c;//for max length string 
            }
        }
    return ans;
    }
};

efficient solution without sorting :

TC:O(n*m)

class Solution {
public:
    string findLongestWord(string s, vector<string>& d) {
    
        //remember the string should be a subsequence 
      
         string ans="";int len=INT_MIN;
        for(int i=0;i<d.size();i++)
        {
              string str=d[i];int c=0;int k=0;int j=0;
            while(j<str.size() && k<s.size())
            {
            if(s[k]==str[j])
            {
                c++;j++;
            }
                k++;
            }
            if(c==str.size())//if all characters of str can be formed by deleting 
            {
            if(str.size()>ans.size())//if longer in length
                ans=str;
            if(str.size()==ans.size() && str<ans)//if length same but smaller lexicographically
            {
                ans=str;
            }
            }
        }
    return ans;
    }
};



