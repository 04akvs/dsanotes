Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

 

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 3 * 104
s[i] is '(', or ')'.



class Solution {
public:
    int longestValidParentheses(string s) {
        int maxlength=0;stack<int>st;
        if(s.size()==0)
            return 0;
        st.push(-1);
        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='(')
            {
                st.push(i);//push the index 
            }
            else
            {
                if(!st.empty())
                    st.pop();//pop out '('
                if(!st.empty())
                {
                 maxlength=max(maxlength,i-st.top());   
                }
                else
                {
                    st.push(i);//push it in for new set
                }
            }
        }
        return maxlength;
    }
};



TC:O(n)
sc:O(1)
