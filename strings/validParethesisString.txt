Leetcode 678:
https://leetcode.com/problems/valid-parenthesis-string/

Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.

The following rules define a valid string:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "(*)"
Output: true
Example 3:

Input: s = "(*))"
Output: true
 

Constraints:

1 <= s.length <= 100
s[i] is '(', ')' or '*'.


class Solution {
public:
    bool checkValidString(string s) {
        stack<int>str;
        stack<int>br;
        int n=s.size();
        for(int i=0;i<n;i++){
            if(s[i]=='(')
                br.push(i);
            else if(s[i]=='*')
                str.push(i);
            else {//agar ')' hai toh see whether '(' is there 
                if(!br.empty()){
                    br.pop();
                }
                else if(br.empty()){//if '(' is not there, see whether we can satisfy it with '*'
                    if(!str.empty()){
                        str.pop();
                    }
                else 
                    return false;
                }
            }
        }
       //check whether '(' are left and whether they can be completed by ')'
            while(!br.empty() && !str.empty() && br.top()<str.top())
            {
            str.pop();
            br.pop();
            }
            if(!br.empty())
                return false;
        return true;
    }
};


TC:O(n)
SC:O(n)
