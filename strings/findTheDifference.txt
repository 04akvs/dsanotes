Leetcode 389:
https://leetcode.com/problems/find-the-difference/
You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

 

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"
Example 3:

Input: s = "a", t = "aa"
Output: "a"
Example 4:

Input: s = "ae", t = "aea"
Output: "a"
 

Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lower-case English letters.


Method 1: that comes to my mind is 


class Solution {
public:
    char findTheDifference(string s, string t) {
        sort(s.begin(),s.end());
        sort(t.begin(),t.end());
        for(int i=0;i<t.size();i++){
            if(i<s.size() && t[i]!=s[i])
                return t[i];
        }
        return t[t.size()-1];
    }
};

TC:O(nlogn)
SC:O(1)



improving the time complexity :

Method 2: using hashmap to store frequency of each charcaters in both the strings
then traverse the string 't' once again and check which charcater in it has a freq different than that in string 's'

class Solution {
public:
    char findTheDifference(string s, string t) {
        unordered_map<char,int>st,tt;
for(int i=0;i<s.size();i++)
    st[s[i]]++;
        for(int i=0;i<t.size();i++){
          tt[t[i]]++;
}
        for(int i=0;i<t.size();i++){
          if(tt[t[i]]!=st[t[i]])
              return t[i];
}
   return 'a';
    }
};

TC:O(t.size())
SC:O(n)



furthur improving the space complexity too :

xor o ftwo same characters gives 0 as a result 
and finally when we xor 0 with the single charcter it gives that characters

class Solution {
public:
    char findTheDifference(string s, string t) {
        int ch=0;
        for(int i=0;i<s.size();i++){
           ch=ch^(s[i]-'a');
        }
        for(int i=0;i<t.size();i++){
           ch=ch^(t[i]-'a');
        }
        return ch+'a';
    }
};

TC:O(n)
sc:O(1)

