Leetcode 686:
https://leetcode.com/problems/repeated-string-match/

Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.

Notice: string "abc" repeated 0 times is "",  repeated 1 time is "abc" and repeated 2 times is "abcabc".

 

Example 1:

Input: a = "abcd", b = "cdabcdab"
Output: 3
Explanation: We return 3 because by repeating a three times "abcdabcdabcd", b is a substring of it.
Example 2:

Input: a = "a", b = "aa"
Output: 2
Example 3:

Input: a = "a", b = "a"
Output: 1
Example 4:

Input: a = "abc", b = "wxyz"
Output: -1
 

Input : a= "abc"
Output : b= "cabcabca"

Constraints:

1 <= a.length <= 104
1 <= b.length <= 104
a and b consist of lower-case English letters.



Brute force approach: is to keep appending A and check until we get B in it


class Solution {
public:
    int repeatedStringMatch(string A, string B) {
        if(B=="")
            return 0;
        string A_copy = A;
        for (int i=1; i<=B.length()/A_copy.length()+2;i++)
        {
            if (A.find(B) != string::npos) 
                return i;
            A += A_copy;
        }
        return -1;
    }
};
TC:O(n)


could be also implemented using KMP pattern searching 
