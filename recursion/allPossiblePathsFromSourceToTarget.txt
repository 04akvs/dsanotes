Leetcode 797:
Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1, and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

 

Example 1:


Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Example 2:


Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
Example 3:

Input: graph = [[1],[]]
Output: [[0,1]]
Example 4:

Input: graph = [[1,2,3],[2],[3],[]]
Output: [[0,1,2,3],[0,2,3],[0,3]]
Example 5:

Input: graph = [[1,3],[2],[3],[]]
Output: [[0,1,2,3],[0,3]]
 

Constraints:

n == graph.length
2 <= n <= 15
0 <= graph[i][j] < n
graph[i][j] != i (i.e., there will be no self-loops).
The input graph is guaranteed to be a DAG.



DFS based approach :


since there are no loops thus no need to taking visited array:


class Solution {
public:
    void recurpaths(vector<vector<int>>&graph,vector<vector<int>>&paths,vector<int>path,int src,int dest){
        if(src==dest){
            path.push_back(src);
            paths.push_back(path);
            return ;
        }
        path.push_back(src);
        for(int i=0;i<graph[src].size();i++){
            recurpaths(graph,paths,path,graph[src][i],dest);
        }
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>>paths;
        int n=graph.size();vector<int>path;
        recurpaths(graph,paths,path,0,n-1);
        return paths;
    }
};


TC:O(v+e)
SC:O(v)



Backtracking :


class Solution {
public:
    //backtracking based solution
    //we need to find all possibilities
    //backtracking has 3 steps:
    //1.make some change 
    //2.recurse
    //3.undo the chnage 
    void recurpaths(vector<vector<int>>&graph,vector<vector<int>>&paths,vector<int>&path,int src,int dest){
        if(src==dest){
            paths.push_back(path);
            return ;
        }
        for(int i=0;i<graph[src].size();i++){
            path.push_back(graph[src][i]);
            recurpaths(graph,paths,path,graph[src][i],dest);
            path.pop_back();
        }
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>>paths;
        int n=graph.size();vector<int>path;
         path.push_back(0);
        recurpaths(graph,paths,path,0,n-1);
        return paths;
    }
};
TC:O(2^n) as all possililbities are 2^n