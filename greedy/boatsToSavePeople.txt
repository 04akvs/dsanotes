You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.

Return the minimum number of boats to carry every given person.

 

Example 1:

Input: people = [1,2], limit = 3
Output: 1
Explanation: 1 boat (1, 2)
Example 2:

Input: people = [3,2,2,1], limit = 3
Output: 3
Explanation: 3 boats (1, 2), (2) and (3)

Method 1: brute force approach 

first thing that I can think of is to combine max & min weighing people together so that we use  the optimum & minimum number of boats .
for eg : [1,1,5,3,3]  limit=5
first we'll sort it 

so it becomes [1,1,3,3,5] 
so here we won't choose consecutive people directly first because that might not be optimum 
as (1,1)  (3)  (3) (5) -will make us to need 4 boats 
but  if we choose (1,3)  (1,3) (5) then we need 3 boats only 

thus choose min & max pair likewise 


class Solution {
public:
    int numRescueBoats(vector<int>& people, int limit) {
        sort(people.begin(),people.end());
        int boats=0;
        int n=people.size();
        int visited[n];
        for(int i=0;i<n;i++)
            visited[i]=0;
        for(int i=0;i<n;i++)
        {
            if(visited[i]==0)//if we haven't chosen person at that index already 
            {
            boats++;
            visited[i]=1;
         for(int j=people.size()-1;j>=i+1;j--)
         {
           if(people[i]+people[j]<=limit && visited[j]==0)
           {
               visited[j]=1;//person chosen 
               cout<<people[i]<<" "<<people[j]<<"\n";
               break;//as no more than two people can sit on the same boat 
           }
         }
            }
         
            
        }
        return boats;
    }
};



TC:O(n*n)
SC:O(n)

but this approach gives us TLE for higher values of number of people 



Better approach :


All you need to understand is that, The heaviest person only has the possibility to pair with the lightest one. After that it all makes sense.
Just initialise 2 pointers, and only move the left pointer forward if the heavier person can go with the lighter. i.e. people[r] + people[l] <= limit



class Solution {
public:
    int numRescueBoats(vector<int>& people, int limit) {
        
        int boats=0;
        int n=people.size();
        sort(people.begin(),people.end());
        int i=0;int j=n-1;
        while(i<=j)
        {
            if(i==j)//only a single person is left 
            {
                boats++;i++;
            }
            else if(people[i]+people[j]<=limit)//then these two people can go on the same boat 
            {
                j--;
                i++;
                boats++;
            }
            else if(people[i]+people[j]>limit)//else that heavier person definitely needs to go on a separate boat as no other person would be able to accomodate him
            {
                j--;boats++;
            }
        }
       return boats;
    }
};


TC:O(nlogn)
SC:O(1)

though it can be written more clearly by 


class Solution {
public:
    int numRescueBoats(vector<int>& people, int limit) {
        int boats=0;
        int n=people.size();
        sort(people.begin(),people.end());
        int i=0;int j=n-1;
        while(i<=j)
        {
            if(people[i]+people[j]<=limit)//then these two people can go on the same boat 
            {
                i++;//take on new person 
              
            }
           boats++;
            j--;
        }
       return boats;
    }
};