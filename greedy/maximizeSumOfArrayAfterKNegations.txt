Given an array A of integers, we must modify the array in the following way: we choose an i and replace A[i] with -A[i], and we repeat this process K times in total.  (We may choose the same index i multiple times.)

Return the largest possible sum of the array after modifying it in this way.

 

Example 1:

Input: A = [4,2,3], K = 1
Output: 5
Explanation: Choose indices (1,) and A becomes [4,-2,3].
Example 2:

Input: A = [3,-1,0,2], K = 3
Output: 6
Explanation: Choose indices (1, 2, 2) and A becomes [3,1,0,2].
Example 3:

Input: A = [2,-3,-1,5,-4], K = 2
Output: 13
Explanation: Choose indices (1, 4) and A becomes [2,3,-1,5,4].
 

Note:

1 <= A.length <= 10000
1 <= K <= 10000
-100 <= A[i] <= 100



what I thought of :




class Solution {
public:
    int largestSumAfterKNegations(vector<int>& arr, int k) {
        sort(arr.begin(),arr.end());int sum=0;
        int neg=0;int pos=0;int zer=0;
        for(int i=0;i<arr.size();i++)
        {
            if(arr[i]<0)
            neg++;
            if(arr[i]==0)
                zer++;
            else
                pos++;
        }
        int index=0;int neg2=neg;
        while(neg>0 && k>0)
        {
         arr[index]=arr[index]*-1;
            index++;neg--;k--;
        }
        bool flag=false;
        if(zer==0 && k>0){
          if(k%2!=0)
            {
                if(neg2>0 && index-1>=0)
                {
                if(abs(arr[index-1])>arr[index])
                    arr[index]=arr[index]*-1;
                else 
                    arr[index-1]=arr[index-1]*-1;
                }
              else
                  arr[index]=arr[index]*-1;
            }
        }
        for(int i=0;i<arr.size();i++)
            sum+=arr[i];
        return sum;
    }
};

TC:O(nlogn )

efficient way :


class Solution {
public:
    int largestSumAfterKNegations(vector<int>& arr, int k) {
       priority_queue<int,vector<int>,greater<int>>pq(arr.begin(),arr.end());
       while(k--)
       {
          int x=pq.top();
           pq.pop();
           pq.push(x*-1);
       }
        int sum=0;
        while(!pq.empty())
        {
            sum+=pq.top();
            pq.pop();
        }
        return sum;
    }
};


TC:O((n+k)logn)

