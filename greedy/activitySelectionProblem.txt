Given N activities with their start and finish day given in array start[ ] and end[ ]. Select the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a given day.
Note : Duration of the activity includes both starting and ending day.

Example 1:

Input:
N = 2
start[] = {2, 1}
end[] = {2, 2}
Output: 
1
Explanation:
A person can perform only one of the
given activities.
Example 2:

Input:
N = 4
start[] = {1, 3, 2, 5}
end[] = {2, 4, 3, 6}
Output: 
3
Explanation:
A person can perform activities 1, 3
and 4.
Your Task :
You don't need to read input or print anything. Your task is to complete the function activityselection() which takes array start[ ], array end[ ] and integer N as input parameters and returns the maximum number of activities that can be done.

Expected Time Complexity : O(N * Log(N))
Expected Auxilliary Space : O(N)

Constraints:
1 ≤ N ≤ 2*105
1 ≤ start[i] ≤ end[i] ≤ 109


  //we will try doing tasks which end first
  Thus sort it with respect to end times 


static bool compare(pair<int,int>&p1,pair<int,int>&p2)
    {
        if(p1.second==p2.second)
            return p1.first<p2.first;
        else
        return p1.second<p2.second;
    }
    int activitySelection(vector<int> start, vector<int> end, int n){
        // Your code here
        vector<pair<int,int>>act;
        for(int i=0;i<n;i++)
        {
            act.push_back({start[i],end[i]});
        }
        sort(act.begin(),act.end(),compare);
        int startin=act[0].first;
        int endin=act[0].second;
        int count=1;
        //we will try doing tasks which end first
        for(int i=1;i<n;i++)
        {
           if(act[i].first>endin)
           {
               count++;
               endin=act[i].second;
           }
        }
        return count;
    }

TC:O(nlogn)
SC:O(n)






