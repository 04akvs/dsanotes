InterviewBit:
https://www.interviewbit.com/problems/largest-permutation/

Problem Description

Given an integer array A of size N consisting of unique integers from 1 to N. You can swap any two integers atmost B times.

Return the largest lexicographical value array that can be created by executing atmost B swaps.



Problem Constraints
1 <= N <= 106

1 <= B <= 109



Input Format
First argument is an integer array A of size N.

Second argument is an integer B.



Output Format
Return an integer array denoting the largest lexicographical value array that can be created by executing atmost B swaps.



Example Input
Input 1:

 A = [1, 2, 3, 4]
 B = 1
Input 2:

 A = [3, 2, 1]
 B = 2


Example Output
Output 1:

 [4, 2, 3, 1]
Output 2:

 [3, 2, 1]


Example Explanation
Explanation 1:

 In one swap we can swap (1, 4) so that the array becomes : [4, 2, 3, 1].
Explanation 2:

 Array is already the largest lexicographical value array.


for largest permutation - we need to have the largest number at the first place , then second largest at the second place and so on 

we can use a map to store the indices of each element so that we can swap them later 

vector<int> Solution::solve(vector<int> &arr, int k) {
int n=arr.size();
unordered_map<int,int>mp;
for(int i=0;i<n;i++){
mp[arr[i]]=i;
}
int largest=n;//largest number is n 
int i=0;
while(k>0 && i<n){
    if(arr[i]!=n-i){
        int idx=mp[n-i];
         mp[arr[i]]=idx;
         mp[arr[idx]]=i;
        swap(arr[idx],arr[i]);
        k--;//decrease the swaps available 
    }
   i++;
}
return arr;
}


TC:O(n)
SC:O(n)

