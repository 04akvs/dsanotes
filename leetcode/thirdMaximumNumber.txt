Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:

Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:

Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:

Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.

Method 1:using set 
class Solution {
public:
    int thirdMax(vector<int>& nums) {
   set<int,greater<int> >s;int k=1;auto num=0;
        for(auto i:nums)
        {
            s.insert(i);
        }
        if(s.size()<3)
            return *s.begin();
        for(auto i:s)
        {
            if(k<3)
                k++;
            else
            {
                num=i;break;
            }
        }
        return num;
    }
};
TC:O(nlogn) as one element insertion in set takes logn time
////////////////////
better O(n) solution 
class Solution {
public:
    //we can solve this via min heap as we need do not care about smallest elements so we need somwthing to access them and remove them 
    int thirdMax(vector<int>& nums) {
        if(nums.size()==1)
            return nums[0];
        if(nums.size()==2)
            return max(nums[0],nums[1]);
        int firstmax=INT_MIN;int secondmax=INT_MIN;int thirdmax=INT_MIN;int count=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[i]==INT_MIN)
                count++;
            if(nums[i]>firstmax)
                firstmax=nums[i];
        }
        for(int i=0;i<n;i++)
        {
            if(nums[i]>secondmax && nums[i]<firstmax)
                secondmax=nums[i];
        }
        for(int i=0;i<n;i++)
        {
            if(nums[i]>thirdmax && nums[i]<secondmax && nums[i]<firstmax)
                thirdmax=nums[i];
        }
        if(count==0 && thirdmax==INT_MIN || secondmax==INT_MIN)
        return firstmax;
        else
            return thirdmax;
    }
};