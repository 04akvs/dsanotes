Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.

Basically here , the thing we need to see is that are the zeroes avoidable in the jump because if we step on any zero then we won't be able to move any furthur 
thus , we need to make a count of the maximum jump that we can make till a zero is encountered
 moreover if any array has no zeroes in it then it is always poosible to reach the end as 1 step we can always make 
 .
  bool canJump(vector<int>& nums) {
        int n=nums.size();
        int diff=n-1;
        if(nums[0]==0 && n>1)
            return false;
         if(n==1)
            return true;
        int maxxJumped=0;int jump=0;
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i]!=0)
            {
                jump=nums[i]+i;
                 maxxJumped=max(jump,maxxJumped);
            }
            else//if zero gets encountered we need to see whether there was any previous jump that could have been made to avoid it 
            {
                if(maxxJumped==i)
                return false;
            }
           
        }
        
        return true;
    }
};
TC:O(N) 
SC:O(1)

