Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
class Solution {
public:
    int minDistance(string s, string t) {
        int m=s.size();int n=t.size();
		   int dp[m+1][n+1];
		   for(int i=0;i<m+1;i++)
		   {
		       for(int j=0;j<n+1;j++)
		       {if(i==0)
		       dp[i][j]=j;
		       else if(j==0)
		       dp[i][j]=i;
		   }
		   }
		   for(int i=1;i<m+1;i++)
		   {
		       for(int j=1;j<n+1;j++)
		       {
		           if(s[i-1]==t[j-1])
		           {
		               dp[i][j]=dp[i-1][j-1];
		           }
		           else if(s[i-1]!=t[j-1])
		           {
		               dp[i][j]=1+min(dp[i][j-1],min(dp[i-1][j-1],dp[i-1][j]));
		           }
		       }
		   }
		  return dp[m][n];
		   
		}
};