Given an array, rotate the array to the right by k steps, where k is non-negative.

Follow up:

Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?
 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]



Method 1: the first method which i could think of is to take another array to store the elemnets of the given array then just put the the elements at correct places by 
(i+k)%n

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        vector<int>dummy(nums.size(),0);
        for(int i=0;i<nums.size();i++)
        {
            dummy[i]=nums[i];
        }
        int n=nums.size();
        for(int i=0;i<nums.size();i++)
        {
        nums[(i+k)%n]=dummy[i];
        }
    }
};

TC:O(N)
SC:O(N)
