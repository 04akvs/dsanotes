Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.

Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.

Clarification:

Confused why the returned value is an integer, but your answer is an array?

Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller.
Example 1:

Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3]
Explanation: Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively. It doesn't matter what you leave beyond the returned length.
Example 2:

Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3]
Explanation: Your function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively. It doesn't matter what values are set beyond the returned length.



Method 1:using extra space 
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n=nums.size();
        map<int,int>m;
        for(int i=0;i<n;i++)
        {
        m[nums[i]]++;    
        }
        int k=0;int times=1;
        for(auto i:m)
        {
            int count=i.second;times=1;
            while(times<=count && times<=2 )
            {
                nums[k++]=i.first;
                times++;
            }
        }
        
        return k;
    }
};

TC:O(nlogn) as n elements insertion in map takes log n time

Method 2:
using O(1) extra space 
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int k=2;//as atmost 2 appearences of one number is allowed 
        int n=nums.size();
        if(n==0)
            return 0;
        int start=1;int count=1;
        for(int i=1;i<n;i++)
        {
            if(nums[i]==nums[i-1])
            {
                if(count<k)
                {
                nums[start++]=nums[i];
                count++;
                }
            }
            else
            {
                count=1;//for a new number 
                nums[start++]=nums[i];
            }
        }
        return start;
        
    }
};


TC:O(n)
SC:O(1)