Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). 
n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). 
Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
Example 3:

Input: height = [4,3,2,1,4]
Output: 16
Example 4:

Input: height = [1,2,1]
Output: 2



brute force : method which I can think of is to run two loops and then find the minimum of the two heights and the distance between the two bars and multiply those to get the area . Out of all the areas , find the maximum .

class Solution {
public:
    int maxArea(vector<int>& height) {
        int n=height.size();
        int area=INT_MIN;
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
               int minheight=min(height[i],height[j]);//find the minimum hieght between the two bars 
                area=max(area,minheight*(j-i));//find the area l*b
            }
        }
        return area;
    }
};

TC:O(n*n)
SC:O(1)


efficient approach :




