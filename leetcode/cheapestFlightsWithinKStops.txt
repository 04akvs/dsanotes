


Leetcode - 787

https://leetcode.com/problems/cheapest-flights-within-k-stops/

There are n cities connected by m flights. Each flight starts from city u and arrives at v with a price w.

Now given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.

Example 1:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 1
Output: 200
Explanation: 
The graph looks like this:


The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.
Example 2:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 0
Output: 500
Explanation: 
The graph looks like this:


The cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture.
 

Constraints:

The number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1.
The size of flights will be in range [0, n * (n - 1) / 2].
The format of each flight will be (src, dst, price).
The price of each flight will be in the range [1, 10000].
k is in the range of [0, n - 1].
There will not be any duplicated flights or self cycles.




like shortest path between the source and destination

method 1: using bellman ford algorithm



class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int,int>>graph[n];
        for(int i=0;i<flights.size();i++){
            graph[flights[i][0]].push_back({flights[i][1],flights[i][2]});
        }
        vector<int>dist(n,1e8);
        dist[src]=0;
        //single pair shortest path 
        //bellman ford
        //relax n-1 times then we get shortest path from source node to every other node
        // but here we are allowed to relax only k times 
        for(int i=0;i<k+1;i++){
            //we'll take a snapshot of minimum distances at every stop 
            vector<int>temp=dist;
            for(int j=0;j<flights.size();j++){
                int u=flights[j][0];
                int v=flights[j][1];
                int wt=flights[j][2];
                if(temp[v]>dist[u]+wt)
                    temp[v]=dist[u]+wt;
            }
            dist=temp;
            
        }
        if(dist[dst]==1e8)
            return -1;
        return dist[dst];
    }
};


TC:O(k*E)
