There are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some server unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:



Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
 

Constraints:

1 <= n <= 10^5
n-1 <= connections.length <= 10^5
connections[i][0] != connections[i][1]
There are no repeated connections.



class Solution {
public:
    void dfs(list<int>graph[],int i,vector<bool>&visited)
    {
        visited[i]=true;
        for(auto j:graph[i])
        {
            if(!visited[j])
                dfs(graph,j,visited);
        }
        
    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
       //find all the bridges in the network
        vector<vector<int>>bridges;
        list<int>graph[n];
        int edges=connections.size();
        for(int i=0;i<edges;i++)//creating the graph
        {
            int x=connections[i][0];
            int y=connections[i][1];
            graph[x].push_back(y);
            graph[y].push_back(x);
         }
        //remove each edge one by one and check whether that is a bridge or not 
        for(int i=0;i<edges;i++)
        {
            int u=connections[i][0];
            int v=connections[i][1];
            graph[u].remove(v);
            graph[v].remove(u);
            vector<bool>visited(n,false);
            dfs(graph,u,visited);//see if v can be reached by u or not via some other path then if not that means we increased the disconnected components 

            if(!visited[v])
            {
              vector<int>t;
                t.push_back(u);
                t.push_back(v);
                bridges.push_back(t);
                
            }
            graph[u].push_back(v);
            graph[v].push_back(u);
            
}
        return bridges;
        
    }
};


TC:O(E*(V+E))
causes TLE on leetcode



optimized method :TC:O(V+E)

class Solution {
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<bool> visited(n, false);
        vector<int> disc(n, 0), low(n, 0), parent(n, -1);
        vector<vector<int>> graph(n, vector<int>()), res;
        for (auto& p : connections) {
            graph[p[0]].push_back(p[1]);
            graph[p[1]].push_back(p[0]);
        }
        for (int i = 0; i < n; ++i) {
            if (!visited[i])
            dfsmodified(i, visited, disc, low, parent, graph, res);
        }
        return res;
    }

    void dfsmodified(int u, vector<bool>& visited, vector<int>& disc, vector<int>& low, vector<int>& parent, vector<vector<int>>& graph, vector<vector<int>>& res) {
        static int time = 0;
        visited[u] = true;
        disc[u] = low[u] = ++time;
        for (int v : graph[u]) {
            if (!visited[v]) {
                parent[v] = u;
                dfsmodified(v, visited, disc, low, parent, graph, res);
                low[u] = min(low[u], low[v]);
                if (low[v] > disc[u]) {
                    res.push_back({u, v});
                }

            } else if (v != parent[u]) {
                low[u] = min(low[u], disc[v]);
            }

        }
    }

};