Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums, return the minimum element of this array.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.



method 1 : sort & return the first element 

TC:O(nlogn)


method 2:linearly traverse the array & find the minimum element 

TC:O(n)


method 3:


we can think of binary search as we know that the given array was sorted and we can somehow modify binary search to have an answer in O(logn)

In this problem, we have only three cases.

Case 1. The leftmost value is less than the rightmost value in the list: This means that the list is not rotated.
e.g> [1 2 3 4 5 6 7 ]

Case 2. The value in the middle of the list is greater than the leftmost and rightmost values in the list.
e.g> [ 4 5 6 7 0 1 2 3 ]

Case 3. The value in the middle of the list is less than the leftmost and rightmost values in the list.
e.g> [ 5 6 7 0 1 2 3 4 ]

As you see in the examples above, if we have case 1, we just return the leftmost value in the list. If we have case 2, we just move to the right side of the list. If we have case 3 we need to move to the left side of the list.




class Solution {
public:
    int findMin(vector<int>& nums) {
         if(nums.size()==0)
             return 0;
           int low = 0;
           int high = nums.size() - 1;
           int mid;

    while(low < high) {
        mid = (low + high)/2;
         if(nums[low] < nums[high]) //the array isn't sorted
            return nums[low];
       else if(nums[mid]>nums[high])
        {
            //go to the right part 
            low=mid+1;
        }
        else 
        {
            high=mid;
        }
    }
    return nums[low];
}
    
};


TC:O(logn)

