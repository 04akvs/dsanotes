Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.

For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].

Note: The length of temperatures will be in the range [1, 30000]. Each temperature will be an integer in the range [30, 100].
Brute Force : run two loops and for evry index i,check for a greater element on its right 
TC:O(N*N)
class Solution {
public:
    vector<int> dailyTemperatures(vector<int>& arr) {
        //this question is kind of similar to next greater element on the right
        vector<int>v;int n=arr.size(); 
        for(int i=0;i<=n-1;i++)
        {
            bool flag=true;
            for(int j=i+1;j<n;j++)
            {
                if(arr[j]>arr[i])
                {
                   int  days=j-i;
                    v.push_back(days);flag=false;
                    break;
                }
                
            }
            if(flag)
                v.push_back(0);
        }
        return v;
    }
};
Method 2:Based on the next greater element on the right using stack in O(n) time 
class Solution {
public:
    vector<int> dailyTemperatures(vector<int>& arr) {
        //this question is kind of similar to next greater element on the right
        //we can do this question using stack as its easier to store the last maximum number for a range of values
        int n=arr.size();vector<int>v(n,0);
        stack<pair<int,int> >st;
        for(int i=0;i<=n-1;i++)
        {
            while(!st.empty() && st.top().first<arr[i])
            {
                v[st.top().second]=i-st.top().second;
                //as i will be the index of the day having greater temperature and subtracting it from the current will count the number of days in between 
                st.pop();
            }
            st.push({arr[i],i});
        }
        
        return v;
    }
        
};