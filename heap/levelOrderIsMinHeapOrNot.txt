Input : level = [10, 15, 14, 25, 30]
Output : True
The tree of the given level order traversal is
                     10
                    /  \
                   15   14
                  /  \
                 25   30
We see that each parent has a value less than
its child, and hence satisfies the min-heap 
property
 
Input : level = [30, 56, 22, 49, 30, 51, 2, 67]
Output : False
The tree of the given level order traversal is
                         30
                      /      \
                    56         22
                 /      \     /   \
               49        30  51    2
              /
             67
We observe that at level 0, 30 > 22, and hence
min-heap property is not satisfied



We need to check whether each non-leaf node (parent) satisfies the heap property. For this, we check whether each parent (at index i) is smaller than its children (at indices 2*i+1 and 2*i+2, if the parent has two children). If only one child, we only check the parent against index 2*i+1.

C++JavaPython3C#PHP
 // C++ program to check if a given tree is 
// Binary Heap or not 
#include <bits/stdc++.h> 
using namespace std; 
  
// Returns true if given level order traversal 
// is Min Heap. 
bool isMinHeap(int level[], int n) 
{ 
    // First non leaf node is at index (n/2-1). 
    // Check whether each parent is greater than child 
    for (int i=(n/2-1) ; i>=0 ; i--) 
    { 
        // Left child will be at index 2*i+1 
        // Right child will be at index 2*i+2 
        if (level[i] > level[2 * i + 1]) 
            return false; 
  
        if (2*i + 2 < n) 
        { 
            // If parent is greater than right child 
            if (level[i] > level[2 * i + 2]) 
                return false; 
        } 
    } 
    return true; 
} 
  
// Driver code 
int main() 
{ 
    int level[] = {10, 15, 14, 25, 30}; 
    int n = sizeof(level)/sizeof(level[0]); 
    if  (isMinHeap(level, n)) 
        cout << "True"; 
    else
        cout << "False"; 
    return 0; 
} 

TC:O(n)
SC:O(1)