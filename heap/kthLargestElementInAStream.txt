Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Implement KthLargest class:

KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
int add(int val) Returns the element representing the kth largest element in the stream.
 

Example 1:

Input
["KthLargest", "add", "add", "add", "add", "add"]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
Output
[null, 4, 5, 5, 8, 8]

Explanation
KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
kthLargest.add(3);   // return 4
kthLargest.add(5);   // return 5
kthLargest.add(10);  // return 5
kthLargest.add(9);   // return 8
kthLargest.add(4);   // return 8
 

Constraints:

1 <= k <= 104
0 <= nums.length <= 104
-104 <= nums[i] <= 104
-104 <= val <= 104
At most 104 calls will be made to add.
It is guaranteed that there will be at least k elements in the array when you search for the kth element.



straight forward using max-heap :

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int>pq;
        //build a max heap of size n
       //nlogn
        for(int i=0;i<nums.size();i++){
            pq.push(nums[i]);
        }
        k=k-1;
        //klogn
        while(k--){
            pq.pop();
        }
       return pq.top();//get the kth largest 
    }
};
tc:O(nlogn+klogn)
sc:O(n)

////////////////////////////////////////
using min-heap:  
why we using a min-heap is that we need to keep an account of the largest elements -using min-heap we will always pop out our smaller ones and we'll make sure we still have larger ones 

TC:O(nlogk)


int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int,vector<int>,greater<int> >pq(nums.begin(), nums.begin() + k);int res=0;
        for (int i = k; i < nums.size(); i++)
    {
        // if current element is more than the root of the heap
        if (nums[i] > pq.top())
        {
            // replace root with the current element
            pq.pop();
            pq.push(nums[i]);
        }
    }
        return pq.top();
        
    }