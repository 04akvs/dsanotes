GFG link :
https://practice.geeksforgeeks.org/problems/is-binary-tree-heap/1#

Given a binary tree you need to check if it follows max heap property or not.

Input:
The task is to complete the method which takes one argument, root of Binary Tree. The struct Node has a data part which stores the data, pointer to left child and pointer to right child.There are multiple test cases. For each test case, this method will be called individually.

Output:
The function should return true if property holds else false.
 

Example 1:

Input:
      5
    /  \
   2    3
Output: 1
Example 2:

Input:
       10
     /   \
    20   30 
  /   \
 40   60
Output: 0
Constraints:
1 ≤ Number of nodes ≤ 100
1 ≤ Data of a node ≤ 1000

Company Tags
 Hike



class Solution {
  public:
  //to check completeness 
  int nodes(Node* root){
    if (root == NULL) {
        return 0;
    }
    return 1+nodes(root->left)+nodes(root->right);
}
  //to check value property
  bool ismaxheap(Node* root,int index,int n){
      if(root==NULL)//leaf node
      return true;
      if(index>=n)
      return false;
      // current node has a lower value than its left or right child
    if ((root->left && root->left->data>= root->data) ||
            (root->right && root->right->data >= root->data)) 
        return false;
      else
      return ismaxheap(root->left,2*index+1,n) && ismaxheap(root->right,2*index+2,n);
  }
    bool isHeap(struct Node * tree)
    {
        //for max heap 
        //complete binary treee
        //parent's value >=both children's value
        int n=nodes(tree);
        return ismaxheap(tree,0,n);
        
    }
};
TC:O(n)
SC:O(1) as no explicit usage




Iterative approach :


1. for completeness check that no emoty node is encountered till all the nodes are traversed once an empty child is seen 
2. as we traverse for evrey node check that its value >=(both the children 's value )


#include <iostream>
#include <vector>
#include <queue>
using namespace std;
 
// Data structure to store a binary tree node
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
 
// Function to check if a given binary tree is a max-heap or not
bool isHeap(Node* root)
{
    // create an empty queue and enqueue the root node
    queue<Node*> queue;
    queue.push(root);
 
    // take a boolean flag, which becomes true when an empty left
    // or right child is seen for a node
    bool isNullSeen = false;
 
    // loop till queue is empty
    while (queue.size())
    {
        // process front node in the queue
        Node* curr = queue.front();
        queue.pop();
 
        // left child is non-empty
        if (curr->left)
        {
            // if either heap property is violated
            if (isNullSeen || curr->left->data>= curr->data) {
                return false;
            }
 
            // enqueue left child
            queue.push(curr->left);
        }
        // left child is empty
        else {
            isNullSeen = true;
        }
 
        // right child is non-empty
        if (curr->right)
        {
            // if either heap property is violated
            if (isNullSeen || curr->right->data>= curr->data) {
                return false;
            }
 
            // enqueue left child
            queue.push(curr->right);
        }
        // right child is empty
        else {
            isNullSeen = true;
        }
    }
 
    // we reach here only when the given binary tree is a max-heap
    return true;
}
TC:O(n)
