


Given K sorted arrays arranged in the form of a matrix of size K*K. The task is to merge them into one sorted array.
Example 1:

Input:
K = 3
arr[][] = {{1,2,3},{4,5,6},{7,8,9}}
Output: 1 2 3 4 5 6 7 8 9
Explanation:Above test case has 3 sorted
arrays of size 3, 3, 3
arr[][] = [[1, 2, 3],[4, 5, 6], 
[7, 8, 9]]
The merged list will be 
[1, 2, 3, 4, 5, 6, 7, 8, 9].
Example 2:

Input:
K = 4
arr[][]={{1,2,3,4}{2,2,3,4},
         {5,5,6,6},{7,8,9,9}}
Output:
1 2 2 2 3 3 4 4 5 5 6 6 7 8 9 9 
Explanation: Above test case has 4 sorted
arrays of size 4, 4, 4, 4
arr[][] = [[1, 2, 2, 2], [3, 3, 4, 4],
[5, 5, 6, 6]  [7, 8, 9, 9 ]]
The merged list will be 
[1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 
6, 6, 7, 8, 9, 9 ].
Your Task:
You do not need to read input or print anything. Your task is to complete mergeKArrays() function which takes 2 arguments, an arr[k][k] 2D Matrix containing k sorted arrays and an integer k denoting the number of sorted arrays, as input and returns the merged sorted array ( as a pointer to the merged sorted arrays in cpp, as an ArrayList in java, and list in python)

Expected Time Complexity: O(nk Logk)
Expected Auxiliary Space: O(k)

Constraints:
1 <= K <= 100





The very naive method is to create an output array of size n * k and then copy all the elements into the output array 
followed by sorting.
 

Algorithm: 
Create a output array of size n * k.
Traverse the matrix from start to end and insert all the elements in output array.
Sort and print the output array.


TC:O(n*k + (nk)log(n*k))



/////



efficient approach using min-heap:


#include<bits/stdc++.h>
using namespace std;

output: 0 1 2 3 4 6 9 10 11
int main()
{

     vector<vector<int> >arr = { {1, 3},
                  {2, 4, 6},
                  {0, 9, 10, 11}} ;
    priority_queue<pair<int,pair<int,int> >,vector<pair<int,pair<int,int> >>,greater<pair<int,pair<int,int> >> >pq;
    vector<int>v;
    //first we create a min heap of size k , inserting one node of each
    for(int i=0;i<arr.size();i++ )
    {
        pq.push({arr[i][0],{i,0}});//also insert their row and columns 
    }
    while(!pq.empty())
    {
        pair<int,pair<int,int> >p=pq.top();
        v.push_back(p.first);
        int i=p.second.first;int j=p.second.second;
        pq.pop();
        //now since we've processed one element of that row array we need to compare its next element
        if(j+1<arr[i].size())
        pq.push({arr[i][j+1],{i,j+1}});
    }
    for(int i=0;i<v.size();i++)
    cout<<v[i]<<" ";
    

    return  0;
    
}
tC:O(nklogk)
space:O(K)


