Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:

Input: [3,2,1,5,6,4] and k = 2
Output: 5
Example 2:

Input: [3,2,3,1,2,4,5,5,6] and k = 4
Output: 4
Method 1:sort the array and return the element accordingly
class Solution {
public:
  
    int findKthLargest(vector<int>& nums, int k) {
        int n=nums.size();
       sort(nums.begin(),nums.end());
        return nums[n-k];
    }
};
TC:O(n*log n)
////////////////////////////////////////
Method 2:
using min heap in O(nlogk)
class Solution {
public:
    //by using min heap
  
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int,vector<int>,greater<int> >pq(nums.begin(), nums.begin() + k);int res=0;
        for (int i = k; i < nums.size(); i++)
    {
        // if current element is more than the root of the heap
        if (nums[i] > pq.top())
        {
            // replace root with the current element
            pq.pop();
            pq.push(nums[i]);
        }
    }
        return pq.top();
        
    }
};
/////////////////////////////////
by usinh max heap
push all elements inside the heap then pop elements k times
class Solution {
public:
    //by using max heap
  
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int,vector<int> >pq(nums.begin(),nums.end());
        while(--k)
        {
            pq.pop();
            
        }
        return pq.top();
    }
};
tc:O(n+klogn) //as building a heap takes o(n) and popping k elements takes klogn as pop() for one element is logn





another method is based on using partition subroutine of quick sort 
average time complexity is O(n)
we choose a pivot and we know that at the end of our partitioning our array will look like:

  |elements>=pivot | pivot| elements<=pivot |
  so our work space gets reduced 
  for the array : 3 2 1 5 6 4 
   we see that after partioning our array will look like: initially we chose leftmost as pivot i.e 3
   5 4 6 3 2 1 , so we see that our pivot always lands up at its right position  as if we would have sorted it array would look like: 6 5 4 3 2 1 thus position of pivot is correct 
   so we keep on doing partioning and ignoring the elements we know that will always be lesser
   till we get pivotIndex==k-1(as we need k'th largest element)
   if k==4 then 3 (index=k-1=3) would have been our answer 

class Solution {
public:
    //by using quick select
  int partition(vector<int>&nums,int left,int right)
  {
int pivot=nums[left];//we choose our leftmost element as pivot
  int i=left+1;
  int j=right;
  while(i<=j)
  {
      if(nums[i]<pivot && nums[j]>pivot)
      {
          swap(nums[i],nums[j]);i++;j--;
      }
      if(nums[i]>=pivot)
      {
       i++;   
      }
      if(nums[j]<=pivot)
          j--;
  }
      swap(nums[j],nums[left]);
      return j;
  }
    int findKthLargest(vector<int>& nums, int k) {
       int left=0;int right=nums.size()-1;
        int index=0;int kth=0;
        while(true)
        {
            int index=partition(nums,left,right);
            if(index==k-1)
            {
                kth=nums[index];
                break;
            }
            if(index<k-1)
            {
                left=index+1;
            }
            else
                right=index-1;
        }
        return kth;
    }
};