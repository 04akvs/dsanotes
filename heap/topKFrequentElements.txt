Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.


class Solution {
public:
   static bool compare(pair<int,int>&p1,pair<int,int>&p2)
    {
        return p1.first>p2.first;
    }
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int>result;int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<pair<int,int> >v;
        int c=1;
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i]==nums[i+1])
            {
                c++;
            }
            else
            {
               v.push_back({c,nums[i]});
                c=1;
            }
        }
        v.push_back({c,nums[n-1]});
        sort(v.begin(),v.end(),compare);
        for(int i=0;i<k;i++)
        {
            result.push_back(v[i].second);
        }
        return result;
    }
};


TC:O(nlogd) i.e O(nlogd)
SC:O(d)
d=number of distinct elements


//////////////////////////////////////////
Method 2: whenever we think about any problem that wants us to catch first k largest or smallest 
it should instantly come to our mind to use a heap of size k
 
 the key for comparison of elements in heap is the frequnecy of each element 
 we'll use min heap as then we can easily access items having smaller frequency so we can remove them


  class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        int n=nums.size();
        unordered_map<int,int> m;//to store the frequency of each element
        for(int i=0;i<n;i++){
            m[nums[i]]++;
        }
        priority_queue<pair<int,int>> pq;  //First element stores frequency and second element value
		//As we have not use any compare function max heap will sort according to first element of pair
        unordered_map<int,int>::iterator itr;
        for(itr=m.begin();itr!=m.end();itr++){
            pq.push({itr->second,itr->first});
        }
        vector<int> ans(k);
        for(int i=0;i<k;i++){
            ans[i]=pq.top().second;
            pq.pop();
        }
        return ans;
    }
    };


