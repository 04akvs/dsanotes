Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.


class Solution {
public:
   static bool compare(pair<int,int>&p1,pair<int,int>&p2)
    {
        return p1.first>p2.first;
    }
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int>result;int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<pair<int,int> >v;
        int c=1;
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i]==nums[i+1])
            {
                c++;
            }
            else
            {
               v.push_back({c,nums[i]});
                c=1;
            }
        }
        v.push_back({c,nums[n-1]});
        sort(v.begin(),v.end(),compare);
        for(int i=0;i<k;i++)
        {
            result.push_back(v[i].second);
        }
        return result;
    }
};


TC:O(nlogn)+O(nlogn)+O(n) i.e O(nlogn)
SC:O(n)


