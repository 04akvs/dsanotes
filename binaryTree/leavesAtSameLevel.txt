GFG link:https://practice.geeksforgeeks.org/problems/leaf-at-same-level/1#


Given a Binary Tree, check if all leaves are at same level or not.

Example 1:

Input: 
            1
          /   \
         2     3

Output: 1

Explanation: 
Leaves 2 and 3 are at same level.

Example 2:

Input:
            10
          /    \
        20      30
       /  \        
     10    15

Output: 0

Explanation:
Leaves 10, 15 and 30 are not at same level.



 bool check(Node *root)
    {
        if(root==NULL)
        return true;
        unordered_set<int>s;
        queue<Node*>q;
        q.push(root);int level=1;
        while(!q.empty()){
            int sz=q.size();
            while(sz--){
            Node* t=q.front();
            q.pop();
            if(t->left==NULL && t->right==NULL)//if its a leaf node enter its level
            s.insert(level);
            if(t->left)
            q.push(t->left);
            if(t->right)
            q.push(t->right);
            }
            level++;
        }
        return s.size()==1;
    }

TC:O(n)
sc:O(max number of nodes at any level+ number of different level of nodes )





recursive approach:



use set and push level of every leaf node into the set
if(set size ==1 ) then it means all levels were same
else return false


void leaf(Node* root,int level,unordered_set<int>&s){
        if(root==NULL)
        return ;
        if(root->left==NULL && root->right==NULL){
            s.insert(level);
        }
        leaf(root->left,level+1,s);
        leaf(root->right,level+1,s);
    }
    bool check(Node *root)
    {
        //Your code here
        if(root==NULL)
        return true;
        unordered_set<int>s;
        leaf(root,0,s);
        return s.size()==1;
    }
TC:O(n) as just traversing the tree once


