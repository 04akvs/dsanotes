Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.

You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.

Example 1:

Input: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
Output: 
Merged tree:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7


using queue and level order traversal , merge t2 into t1

class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(t1==NULL && t2==NULL)
            return t1;
        if(t1 && !t2)
            return t1;
        if(!t1 && t2)
            return t2;
        queue<TreeNode*>q1,q2;
        q1.push(t1);q2.push(t2);
        while(!q1.empty() || !q2.empty())
        {
            TreeNode* root1=q1.front();
            TreeNode* root2=q2.front();
            q1.pop();q2.pop();
               root1->val+=root2->val; 
            if(root1->left && root2->left)
            {
                q1.push(root1->left);
                q2.push(root2->left);
            }
            else if(!root1->left && root2->left)
            {
                root1->left=root2->left;
            }
            if(root1->right && root2->right)
            {
                q1.push(root1->right);
                q2.push(root2->right);
            }
            else if(!root1->right && root2->right)
            {
                root1->right=root2->right;
            }
            
        }
        return t1;
        
    }
};


TC:O(n)



/////////////////////////////////////////////////////////////////




recursive approach:

by creating a new tree 
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(t1==NULL && t2==NULL)
            return t1;
        else if(t1 && t2==NULL)
            return t1;
        else if(t2 && t1==NULL)
            return t2;
        else
        {
            TreeNode* node=new TreeNode(t1->val+t2->val);
            node->left=mergeTrees(t1->left,t2->left);
            node->right=mergeTrees(t1->right,t2->right);
            return node ;
        }
        
    }
};


TC:O(n)
SC:O(n)



method 2: by using the same tree t1 and merging the t2 into t1

class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(t1==NULL && t2==NULL)
            return t1;
        else if(t1 && t2==NULL)
            return t1;
        else if(t2 && t1==NULL)
            return t2;
        else
        {
            t1->val+=t2->val;
            t1->left=mergeTrees(t1->left,t2->left);
            t1->right=mergeTrees(t1->right,t2->right);
            return t1 ;
        }
        
    }
};


