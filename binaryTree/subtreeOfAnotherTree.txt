Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.

Example 1:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.
 Method 1:Recursive approach 
class Solution {
public:
    bool check(TreeNode* s,TreeNode* t)
    {
        if(s==NULL &&  t==NULL)
            return true;
         if(s==NULL || t==NULL)
            return false;
        return s->val==t->val && check(s->left,t->left) && check(s->right,t->right);/* Check if the data of both roots is  
    same and data of left and right  
    subtrees are also same */
      
    }
    bool isSubtree(TreeNode* s, TreeNode* t) {
       if(s==NULL)//we reached the end of the subtree to be checked thus we should return false
           return false;
        if(t==NULL)
            return true;
        if(check(s,t))
            return true;
        return isSubtree(s->left,t) || isSubtree(s->right,t);
           
    }
};
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        Stack<TreeNode> stack = new Stack<>();
        while (s != null || !stack.isEmpty()) {
            while (s != null) {
                stack.push(s);
                s = s.left;
            }
            s = stack.pop();
            if (isSame(s, t)) return true;
            s = s.right;
        }
        return false;
    }
    
    public boolean isSame(TreeNode x, TreeNode y) {
        if (x == null && y == null) return true;
        if (x == null || y == null) return false;
        if (x.val != y.val) return false;
        return isSame(x.left, y.left) && isSame(x.right, y.right);
    }
}