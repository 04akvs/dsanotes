Leetcode 993:

https://leetcode.com/problems/cousins-in-binary-tree/



In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:



Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

Constraints:

The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //level order traversal 
    bool isCousins(TreeNode* root, int x, int y) {
        queue<TreeNode*>q;
        q.push(root);
        bool foundx=false;bool foundy=false;
        while(!q.empty()){
            int sz=q.size();
            while(sz--){
                TreeNode* temp=q.front();
                q.pop();
                if(temp->left && temp->left->val==x && temp->right && temp->right->val==y || (temp->left && temp->left->val==y && temp->right && temp->right->val==x))
                    return false;
                if(temp->left)
                    q.push(temp->left);
                if(temp->right)
                    q.push(temp->right);
                if(temp->val==x)
                    foundx=true;
                if(temp->val==y)
                    foundy=true;
            }
            //if x and y get found on the same level 
            if(foundx && foundy)
                return true;
            if(foundx || foundy)//if only one of them is found then not on the same level
                return false;
        }
        return true;
    }
};

TC:O(height)  which in worst case can be n thus O(n)




Method 2: DFS based approach :



 void dfs(TreeNode* node,int parent,int depth,unordered_map<int,pair<int,int>>&mp){
        if(node==NULL)
            return ;
        mp[node->val]={parent,depth};
        dfs(node->left,node->val,depth+1,mp);
        dfs(node->right,node->val,depth+1,mp);
        
    }
    bool isCousins(TreeNode* root, int x, int y) {
        unordered_map<int,pair<int,int>>mp;
        dfs(root,0,0,mp);
        return mp[x].first!=mp[y].first && mp[x].second==mp[y].second;
    }
};



Time: O(N)
Space: O(h), it's the depth of dfs recursion, where h is the height of the binary tree.



