Given the root of a binary tree, return the sum of values of its deepest leaves.
 

Example 1:


Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15
Example 2:

Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19



class Solution {
public:
    int totalLevels(TreeNode* root)
    {
        if(root==NULL)
            return 0;
        int l=totalLevels(root->left);
        int r=totalLevels(root->right);
        return max(l,r)+1;
    }
    int deepestLeavesSum(TreeNode* root) {
        // sum of nodes on last level
        int sum=0;
        if(root==NULL)
            return sum;
        int levels=totalLevels(root);
        queue<TreeNode*>q;
        int deepestSum=0;
        q.push(root);
        int level=0;
        while(!q.empty())
        {
          int sz=q.size();
            level++;
            while(sz--)
            {
                TreeNode* temp=q.front();
                sum+=temp->val;
                q.pop();
                if(temp->left)
                    q.push(temp->left);
                if(temp->right)
                    q.push(temp->right);
            }
            if(level==levels)
                deepestSum=sum;
            sum=0;
        }
        return deepestSum;
    }
};

Time complexity of this method is O(n) where n is number of nodes in given binary tree.

SC:O(n) as in worst case height of tree can be n


