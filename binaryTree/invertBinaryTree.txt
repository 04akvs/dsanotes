Invert a binary tree.

Example:

Input:

     4
   /   \
  2     7
 / \   / \
1   3 6   9
Output:

     4
   /   \
  7     2
 / \   / \
9   6 3   1
  inverting here we can see that the left and right children of every node are getting ecxchanged 
  so we can firstly solve it using recursion

  class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==NULL)
            return NULL;
        TreeNode* temp=root;
        temp=root->left;
        root->left=root->right;
        root->right=temp;
        TreeNode* invertleft=invertTree(root->left);
        TreeNode* invertright=invertTree(root->right);
        return root;
        
        
    }
};
//////////////////////----------------------------//////////////////////////////////////
we can use the swap variable to swap values
    TreeNode* invertTree(TreeNode* root) {
        if(root==NULL)
            return NULL;
        swap(root->left,root->right);
        TreeNode* node=invertTree(root->left);
        TreeNode* nodee=invertTree(root->right);
        return root;
        
        
    }
};