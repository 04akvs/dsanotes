
https://practice.geeksforgeeks.org/problems/reverse-level-order-traversal/1#


Given a binary tree of size N, find its reverse level order traversal. ie- the traversal must begin from the last level.

Example 1:

Input :
        1
      /   \
     3     2

Output: 3 2 1
Explanation:
Traversing level 1 : 3 2
Traversing level 0 : 1
Example 2:

Input :
       10
      /  \
     20   30
    / \ 
   40  60

Output: 40 60 20 30 10
Explanation:
Traversing level 2 : 40 60
Traversing level 1 : 20 30
Traversing level 0 : 10

Your Task:  
You dont need to read input or print anything. Complete the function reverseLevelOrder() which takes the root of the tree as input parameter and returns a list containing the reverse level order traversal of the given tree.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)


Constraints:
1 ≤ N ≤ 10^4


Company Tags
 Adobe  Amazon  Cisco  FactSet  Flipkart  Microsoft




Recursive approach:


void getCurrentLevel(Node* root, int level, vector<int> &ans) {
    if(root == NULL) {
        return;
    }
    
    if(level==1) {
        ans.push_back(root->data);
    } else if (level > 1)  {
        getCurrentLevel(root->left, level-1, ans);
        getCurrentLevel(root->right, level-1, ans);
    }
}

int getHeight(Node *root) {
    if(root==NULL) {
        return 0;
    } 
    
    int lHeight = getHeight(root->left);
    int rHeight = getHeight(root->right);
    
    return max(lHeight, rHeight) + 1; 
}

vector<int> reverseLevelOrder(Node *root)
{
  vector<int> ans;
  
  int levels = getHeight(root);
  //cout<<levels;

  for(int i=levels; i>=1; i--) {
      getCurrentLevel(root, i, ans);
  }
    
    return ans;
    
}



Iterative approach:




vector<int> reverseLevelOrder(Node *root)
{
    // code here
    vector<int>ans;
     vector<vector<int> >level;
        if(root==NULL)
            return ans;
        queue<Node*>q;
        q.push(root);
        while(!q.empty())
        {
            int len=q.size(); vector<int>v;
            for(int i=0;i<len;i++)
            {
                Node* root=q.front();
                  q.pop();
                v.push_back(root->data);
                if(root->left)
                q.push(root->left);
                 if(root->right)
                q.push(root->right);
            }
            level.push_back(v);
           
        }
        
        reverse(level.begin(),level.end());
        for(auto i:level)
        {
            for(auto j:i)
            ans.push_back(j);
        }
        return ans;
    
}
