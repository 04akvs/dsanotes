Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
if we look closely its just like opposite of bottom view 
           -2:4
           -1:2
            0:1,5,6
            1:3
            2:7
            we need to print the first nodes of every key in map



Recursive approach :

void top(Node* root,int val,int level,map<int,pair<int,int>>&m)
    {
        if(root==NULL)
            return ;
            if(m.count(val)==0 || level<m[val].second)
        m[val]={root->data,level};
        top(root->left,val-1,level+1,m);
        top(root->right,val+1,level+1,m);
    }
    vector<int> topView(Node *root)
    {
        //Your code here
        map<int,pair<int,int>>m;
        vector<int>ans;
        if(root==NULL)
        return ans;
        top(root,0,0,m);
        for(auto i:m){
            ans.push_back(i.second.first);
        }
        return ans;
    }

TC:O(nlogn)
sc:O(n)



////////////////////////////////////////////


approach: BFS using queue level order 
void topView(struct Node *root)      //TC:O(nlogn)
{
    //Your code here
    if(root==NULL)
    return ;
    map<int,vector<int> >m;
    queue<pair<Node*,int> >q;
    q.push({root,0});
    while(!q.empty())
    {
      pair<Node*,int>p=q.front();q.pop();
       int hd=p.second;Node* temp=p.first;
      if(temp->left)
      q.push({temp->left,hd-1});
      if(temp->right)
      q.push({temp->right,hd+1});
    m[hd].push_back(temp->data);
    }
    for(auto i:m)
    {
        vector<int>v=i.second;
    cout<<v[0]<<" ";
    }
    
}
////////////////----------//////////////////////////
No need to use vector in map can also be done with map<int,int> by just ensuring we're inserting each key for the first time 
void topView(struct Node *root)
{
    //Your code here
    if(root==NULL)
    return ;
    map<int,int >m;
    queue<pair<Node*,int> >q;
    q.push({root,0});
    while(!q.empty())
    {
      pair<Node*,int>p=q.front();q.pop();
       int hd=p.second;Node* temp=p.first;
       if(m.find(hd)==m.end())   //that is to check whether  being inserted for the first time 
     m[hd]=temp->data;
      if(temp->left)
      q.push({temp->left,hd-1});
      if(temp->right)
      q.push({temp->right,hd+1});
    
    }
    for(auto i:m)
    {
        //auto j=i.second;
    cout<<i.second<<" ";
    }
    
}
/////////////////////////top View using stack//////////////////////////////////
void top_view(Node root)
{
    Node curr = root;
    Stack<Node> stack = new Stack<Node>();
    while(curr != null) {
        stack.push(curr);
        curr = curr.left;
    }
    
    while(!stack.isEmpty()){
        Node node = stack.pop();
        System.out.print(node.data + " ");//all left nodes starting from bottom
    }
    
    curr = root.right;
    while(curr != null){
        System.out.print(curr.data + " "); //then all right nodes
        curr = curr.right;
    }
}