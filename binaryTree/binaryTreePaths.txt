Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3


class Solution {
public:
    void allPaths(TreeNode* root,string s,vector<string>&result)
    {
        if(root==NULL)
            return ;
        if(root->left==NULL && root->right==NULL)
        {
             s+=to_string(root->val);
            result.push_back(s);
          return ;
        }
        s+=to_string(root->val)+"->";
        allPaths(root->left,s,result);
        allPaths(root->right,s,result);
    }
    vector<string> binaryTreePaths(TreeNode* root) {
       string s="";
        vector<string>result;
        if(root==NULL)
            return result;
        allPaths(root,s,result);
        return result;
    }
};

The complexity of that code is just O(n), where n is the number of the node.
 It is because whatever the code looks like, the recursive function visits each node only one time at maximum.
TC:O(n)
SC:O(h)



iterative solution :


