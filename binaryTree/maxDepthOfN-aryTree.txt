Given a n-ary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).

 

Example 1:



Input: root = [1,null,3,2,4,null,5,6]
Output: 3


recursive solution:

class Solution {
public:
    
    int maxDepth(Node* root) {
        if(root==NULL)
            return 0;
        int maxh=0;
        for(int i=0;i<root->children.size();i++)
        {
           maxh= max(maxh,maxDepth(root->children[i]));
        }
           
        return maxh+1;
        
    }
};




iterative approach:


class Solution {
public:
    //bfs approach :jitni baar queue chalega utni uski height hogi
    int maxDepth(Node* root) {
        if(root==NULL)
            return 0;
        queue<Node*>q;
        q.push(root);
        int depth=0;
        while(!q.empty())
        {
           
            int sz=q.size();
        while(sz--)
        {
             Node* root=q.front();
            q.pop();
         for(int i=0;i<root->children.size();i++)
        {
          q.push(root->children[i]);
        }   
        }
            depth++;
        }
        
           
     return depth;
        
    }
};


TC:O(height) as we are processing every once every level 


