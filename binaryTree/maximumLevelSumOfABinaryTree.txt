Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.

Return the smallest level x such that the sum of all the values of nodes at level x is maximal.

 

Example 1:


Input: root = [1,7,0,7,-8,null,null]
Output: 2
Explanation: 
Level 1 sum = 1.
Level 2 sum = 7 + 0 = 7.
Level 3 sum = 7 + -8 = -1.
So we return the level with the maximum sum which is level 2.
Example 2:

Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-105 <= Node.val <= 105



class Solution {
public:
    int maxLevelSum(TreeNode* root) {
        if(root==NULL)
            return 0;
        //basically we neeed to do level order traversal & store the sum of all nodes at that level then compare with maxumlevel sum so far if its greater than store the level 
        queue<TreeNode*>q;
        q.push(root);
        int level,l=0;
        int maxlevelsum=INT_MIN;
        while(!q.empty())
        {
            int sz=q.size();//number of nodes at that level
            int levelsum=0;//sum of nodes at that level
            while(sz--)
            {
                TreeNode* temp=q.front();
                q.pop();
                levelsum+=temp->val;
                if(temp->left)
                {
                    q.push(temp->left);
                }
                if(temp->right)
                {
                    q.push(temp->right);
                }
            }
            l++;//increment the level number
            if(levelsum>maxlevelsum)
            {
                maxlevelsum=levelsum;
                level=l;
            }
        }
        return level;
    }
};


TC:O(n)
SC:O(h)
