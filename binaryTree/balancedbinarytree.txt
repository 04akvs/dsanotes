Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

Input: root = [3,9,20,null,null,15,7]
Output: true

class Solution {
public:
    int height(TreeNode* root)
    {
        if(root==NULL)
            return 0;
        int leftHeight=height(root->left);
        int rightHeight=height(root->right);
        return max(leftHeight,rightHeight)+1;
     }
    bool isBalanced(TreeNode* root) {
        if(root==NULL)
            return true;
      if(abs(height(root->left)-height(root->right))<=1 && isBalanced(root->left) && isBalanced(root->right))
          return true;
    return false;
}  
};////worst case tc:O(n*n) in case of skewed tree