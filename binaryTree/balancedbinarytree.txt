Leetcode 110:

Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

Input: root = [3,9,20,null,null,15,7]
Output: true



For the current node root, calling depth() for its left and right children actually has to access all of its children, thus the complexity is O(N).
 We do this for each node in the tree, so the overall complexity of isBalanced will be O(N^2). This is a multiple pass approach.
class Solution {
public:
    int height(TreeNode* root)
    {
        if(root==NULL)
            return 0;
        int leftHeight=height(root->left);
        int rightHeight=height(root->right);
        return max(leftHeight,rightHeight)+1;
     }
    bool isBalanced(TreeNode* root) {
        if(root==NULL)
            return true;
      if(abs(height(root->left)-height(root->right))<=1 && isBalanced(root->left) && isBalanced(root->right))
          return true;
    return false;
}  
};////worst case tc:O(n*n) in case of skewed tree



///////////////////-------------------------////////////////////////
Method 2:O(n) solution 
The second method is based on DFS.

 Instead of calling depth() explicitly for each child node, we return the height of the current node in DFS recursion. When the sub tree of the current node (inclusive) is balanced, the function dfsHeight() returns a non-negative value as the height. Otherwise -1 is returned. According to the leftHeight and rightHeight of the two children, the parent node could check if the sub tree
is balanced, and decides its return value.


class Solution {
public:
    bool flag=true;
    int height(TreeNode* root){
        if(root==NULL)
            return 0;
        int lh=height(root->left);
        int rh=height(root->right);
        if(abs(lh-rh)>1)//if for any node the height diff exceeds one then mark flag as flag 
            flag=false;
        return max(lh,rh)+1;
    }
    bool isBalanced(TreeNode* root) {
        if(root==NULL)
            return true;
        height(root);
        return flag;
    }
};

TC:O(n)
SC:O(height of tree) stack space 