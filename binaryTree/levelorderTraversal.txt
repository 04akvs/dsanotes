//level order traversal of a tree is just like the bfs if a graph 
so we can use a queue to do level order traversal  
Time complexity:O(n) //n is th enumber of nodes
extra space: O(n) as we need a queue
vector<int> levelOrder(Node* node)
{
  //Your code here
  vector<int>v;
  queue<Node*>q;
  q.push(node);
  while(!q.empty())
  {
      Node* temp=q.front();
      q.pop();
      v.push_back(tp->data);
      if(temp->left)
      q.push(temp->left);
      if(temp->right)
      q.push(temp->right);
      
  }
  return v;
}



Leetcode 102: https://leetcode.com/problems/binary-tree-level-order-traversal/

Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],

vector<vector<int>> levelOrder(TreeNode* root) {
    vector<vector<int>> ans;
    queue<TreeNode *> q;
    if (root) q.push(root);
    while (!q.empty()) {
        int len = q.size();
        vector<int> level;
        for (int i = 0;i < len;++i) {
            TreeNode *node = q.front();
            level.push_back(node->val);
            if (node->left) q.push(node->left);
            if (node->right) q.push(node->right);
            q.pop();
        }
        ans.push_back(level);
    }
    return ans;
}
///////-------------------//////////////
recursive approach
vector<vector<int>> ans;
void helper(TreeNode* ptr,int level){
    if(ptr==NULL)
        return;
        
    if(ans.size()<=level){
        ans.push_back({ptr->val});    
    }
    else
        ans[level].push_back(ptr->val);
    helper(ptr->left,level+1);
    helper(ptr->right,level+1);
    return;
    
}
vector<vector<int>> levelOrder(TreeNode* root) {
    helper(root,0);
    return ans;
}




recursive approach using maps:


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //questions to ask: what about null values do we need to represent that 
    map<int,vector<int>>m;
    void traverse(TreeNode* root,int level){
        if(root==NULL)
            return ;
        m[level].push_back(root->val);
        traverse(root->left,level+1);
        traverse(root->right,level+1);
    }
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>level;
        if(root==NULL)
            return level;
        traverse(root,0);
        for(auto i:m){
            if(i.second.size())
                level.push_back(i.second);
        }
        return level;
    }
};


TC:O(n)
sc:O(level)
