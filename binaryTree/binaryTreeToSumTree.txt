Given a Binary Tree of size N , where each node can have positive or negative values. Convert this to a tree where each node contains the sum of the left and right sub trees of the original tree. The values of leaf nodes are changed to 0.

Example 1:

Input:
             10
          /      \
        -2        6
       /   \     /  \
     8     -4   7    5

Output:
            20
          /    \
        4        12
       /  \     /  \
     0     0   0    0



recursive approach : is to perform simple tree traversal & return sum of its left & right subtree at every stage



int  sumvalue(Node* root)
{
    if(root==NULL)
    return 0;
    
        int temp=root->data;
        int lsum=sumvalue(root->left);
        int rsum=sumvalue(root->right);
        root->data=lsum+rsum;
        return root->data+temp;
    
}
void toSumTree(Node *root)
{
    // Your code here
   sumvalue(root);
    
}

TC:O(n)
sc:o(height)
