Given the root of a binary tree, then value v and depth d, you need to add a row of nodes with value v at the given depth d. The root node is at depth 1.

The adding rule is: given a positive integer depth d, for each NOT null tree nodes N in depth d-1, create two tree nodes with value v as N's left subtree root and right subtree root. And N's original left subtree should be the left subtree of the new left subtree root, its original right subtree should be the right subtree of the new right subtree root. If depth d is 1 that means there is no depth d-1 at all, then create a tree node with value v as the new root of the whole original tree, and the original tree is the new root's left subtree.

Example 1:

Input: 
A binary tree as following:
       4
     /   \
    2     6
   / \   / 
  3   1 5   

v = 1

d = 2

Output: 
       4
      / \
     1   1
    /     \
   2       6
  / \     / 
 3   1   5   

Example 2:

Input: 
A binary tree as following:
      4
     /   
    2    
   / \   
  3   1    

v = 1

d = 3

Output: 
      4
     /   
    2
   / \    
  1   1
 /     \  
3       1
Note:

The given d is in range [1, maximum depth of the given tree + 1].
The given binary tree has at least one tree node.




the approach that I can think of initially is to do level order traversal & as soon as we reach the level before d (i.e level==d-1) , we add our new values 


class Solution {
public:
    TreeNode* addOneRow(TreeNode* root, int v, int d) {
        if(root==NULL)
            return NULL;
        if(d==1)//then just make it as new root and rest make it as its left subtree
        {
            TreeNode* newRoot=new TreeNode(v);
            newRoot->left=root;
            newRoot->right=NULL;
            return newRoot;
        }
        queue<TreeNode*>q;
        q.push(root);
        int level=0;
        bool change=false;
        while(!q.empty())
        {
            int sz=q.size();
            level++;
            if(level+1==d)
                change=true;//we reached the level to add new row
               while(sz--)
               {
                TreeNode* temp=q.front();cout<<temp->val<<" ";
                 q.pop();
                   if(change)
                    {
                    TreeNode* tempL=temp->left;
                    temp->left=new TreeNode(v);//add new row to its left 
                    temp->left->left=tempL;//make the node's left subtree as the new node's left 
                     TreeNode* tempR=temp->right;
                     temp->right=new TreeNode(v);//add new row to its right
                     temp->right->right=tempR;//make the node's right subtree as the new node's right 
                    }
                   
                if(temp->left)
                {
                    q.push(temp->left);
                }
                if(temp->right)
                {
                     q.push(temp->right); 
                }
            }
            cout<<"\n";
            if(change)//we have added new rows , now we can exit 
                break;
        }
        return root;
        
    }
};

TC:O(n)
SC:O(logn)


