Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

Note: A leaf is a node with no children.

Example:

Input: [1,2,3]
    1
   / \
  2   3
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
Example 2:

Input: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.



until we reach a leaf node , we keep forming the number from the root's data & then add it to the sum once we find the leaf node 


class Solution {
public:
void path(TreeNode* root,int num,int &sum)
    {
    if(root==NULL)
    {
         return ;
     }
    if(root->left==NULL && root->right==NULL)//leafnode
    {
        num=num*10+root->val;
        sum=sum+num;
        cout<<num<<" ";
        return ;
    }
        path(root->left,num*10+root->val,sum);
        path(root->right,num*10+root->val,sum);
        
    }
    int sumNumbers(TreeNode* root) {
        int sum=0;int num=0;
        if(root==NULL)
            return 0;
        path(root,0,sum);
        return sum;
    }
};

TC:O(n)
sc:O(n)

