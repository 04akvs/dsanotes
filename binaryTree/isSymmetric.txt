Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3
   Method 1:Recursive Solution TC:O(n)
   class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL)
            return true;
        return isMirror(root->left,root->right);
        
    }
    bool isMirror(TreeNode* left,TreeNode* right)
    {
        if(left==NULL && right==NULL)
            return true;
        if(left==NULL || right==NULL)
            return false;
        if(left->val==right->val)
        return isMirror(left->right,right->left) && isMirror(left->left,right->right);
        else
            return false;
     }
};
Method 2:Iterative approach using queue
the nodes at every level are palindromic 
so we just need to check
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL)
            return true;
        queue<TreeNode*>q;
        q.push(root->left);q.push(root->right);
        while(!q.empty())
        {
            TreeNode* left=q.front();q.pop();
            TreeNode* right=q.front();q.pop();
            if(left==NULL  && right==NULL)
              continue;
             if( left==NULL || right==NULL || left->val!=right->val)
                return false;
                q.push(left->left);
                q.push(right->right);
                q.push(left->right);
                q.push(right->left);
         
        }
        return true;
    }
  
};