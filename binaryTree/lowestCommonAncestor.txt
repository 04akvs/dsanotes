Leetcode 236:

Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia:
 “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
 Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3


class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL)
            return NULL;
        if(root->val==p->val || root->val==q->val)//if root itself contains one of those values , then obviously it would be lca
            return root;
        TreeNode* leftSidePresent=lowestCommonAncestor(root->left,p,q);//check whether leftsubtree mein present
        TreeNode* rightSidePresent=lowestCommonAncestor(root->right,p,q);//check whether right subtree mein present
        if(leftSidePresent!= NULL && rightSidePresent!=NULL)
            return root;
        else if(leftSidePresent==NULL )
            return rightSidePresent ;
        else
            return leftSidePresent;
            
    }
};



///////////////////////////////////////////


Iterative approach:


// Non Recursive BFS Approach: TC - O(n)
    // Step 1: traverse all the tree and save the node-parent pairs (in a hash map) for all the nodes in the tree (till the point we encounter BOTH p and q)
    // Step 2: start from p and save all the parents of p till root (including p and root) in a hash set
    // Step 3: start from q and and navigate through all the parents till root and whenever you see a parent that is present in the set (common ancestor for p and q), that is LCA
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL)
            return NULL;
        unordered_map<TreeNode*,TreeNode*>parent;
        queue<TreeNode*>qt;
        qt.push(root);
        parent[root]=NULL;//root has no parent
        while(!parent.count(p) || !parent.count(q)){
            TreeNode* temp=qt.front();
            qt.pop();
            parent[temp->left]=temp;
            parent[temp->right]=temp;
            if(temp->left)
                qt.push(temp->left);
            if(temp->right)
                qt.push(temp->right);
            
        }
        unordered_set<TreeNode*>st;
        while(p){//push in all the parents of p 
            st.insert(p);
            p=parent[p];
        }
        while(st.find(q)==st.end()){//until you find a common parent 
            q=parent[q];
        }
        return q;
        
    }
};


