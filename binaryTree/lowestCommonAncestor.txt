Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia:
 “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
 Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3


class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL)
            return NULL;
        if(root->val==p->val || root->val==q->val)//if root itself contains one of those values , then obviously it would be lca
            return root;
        TreeNode* leftSidePresent=lowestCommonAncestor(root->left,p,q);//check whether leftsubtree mein present
        TreeNode* rightSidePresent=lowestCommonAncestor(root->right,p,q);//check whether right subtree mein present
        if(leftSidePresent!= NULL && rightSidePresent!=NULL)
            return root;
        else if(leftSidePresent==NULL )
            return rightSidePresent ;
        else
            return leftSidePresent;
            
    }
};