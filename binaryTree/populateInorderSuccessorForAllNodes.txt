Given a Binary Tree, write a function to populate next pointer for all nodes. The next pointer for every node should be set to point to inorder successor.

Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains an integer n denoting the number of edges respectively. The last line contains the edges of the tree.

Output:
Print the data for both nodes separated by "->" ( without quotes). -1 is printed if there is no successor for the node.

Constraints:
1<=T<=10^5
1<=n<=10^5
1<=data of the node<=10^5

Example:
Input:
1
3
10 8 L 8 3 L 10 12 R

Output:
3->8 8->10 10->12 12->-1




using extra space to store inorder traversal :

void inorder(Node* root,vector<Node*>&in){
    if(root==NULL)
    return ;
    inorder(root->left,in);
    in.push_back(root);
    inorder(root->right,in);
}
    void populateNext(Node *root)
    {
        //code here
        vector<Node*>in;
        inorder(root,in);
        Node* prev=in[0];
        for(int i=1;i<in.size();i++){
            prev->next=in[i];
            prev=prev->next;
        }
    }

TC:O(n)
sc:O(n) using extra space 

///////////////////////////////////////

we need to do inorder traversal and have a prev node to attach the current  node to it


void populateNext(struct node* root)
{

// Your code goes here
static struct node* prev=NULL;
if(root==NULL)
return ;
populateNext(root->left);
if(prev)
prev->next=root;
prev=root;
populateNext(root->right);


}

TC:O(n)
sc:no extra space required 