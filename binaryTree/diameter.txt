
Given a binary tree, you need to compute the length of the diameter of the tree. 
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. 
This path may or may not pass through the root.

Example:
Given a binary tree 

          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

class Solution {
public:
    int height(TreeNode* root)   TC:O(n*n) as we're calculating left and right height for every node and there are n nodes 
    {
        if(root==NULL)
            return 0;
        int leftHeight=height(root->left);
        int rightHeight=height(root->right);
        return max(leftHeight,rightHeight)+1;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL)
            return 0;
        int rightDia=diameterOfBinaryTree(root->right);
        int leftDia=diameterOfBinaryTree(root->left);
        int leftH=height(root->left);
        int rightH=height(root->right);
        return max(max(rightDia,leftDia),leftH+rightH);//didn't do plus 1 here as number if edges asked not the number of nodesin the longest path
    }
};
Method 2:using O(n) time complexity 
AS For every node, length of longest path which pass it = Maxheight of its left subtree + Maxheight of its right subtree.




class Solution {
public:
    int maxDia(TreeNode* root,int &res){
        if(root==NULL)
            return 0;
        int lh=maxDia(root->left,res);
        int rh=maxDia(root->right,res);
        res=max(res,lh+rh);
        return max(lh,rh)+1;//root adds 1 (due to itself)
    }
    int diameterOfBinaryTree(TreeNode* root) {
        //there are 3 choices which can give us max diameter
        //either left subtree has max diameter 
        //either right subtree has max diameter
        //or the parth through root has max diameter
        int res=0;
        maxDia(root,res);
        return res;
    }
};

