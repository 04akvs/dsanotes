Given a binary tree of size  N, a node and a positive integer k., Your task is to complete the function kthAncestor(), the function should return the kth ancestor of the given node in the binary tree. If there does not exist any such ancestor then return -1.


Example 1:



Input:
     K = 2
     Node = 4
Output: 1
Explanation:
Since, K is 2 and node is 4, so we
first need to locate the node and
look k times its ancestors.
Here in this Case node 4 has 1 as his
2nd Ancestor aka the Root of the tree.
 

Example 2:

Input:
k=1 
node=3
      1
    /   \
    2     3

Output:
1
Explanation:
K=1 and node=3 ,Kth ancestor of node 3 is 1.



bool  pathFromRootToNode(Node* root,int node,vector<int>&path)
{
    if(root==NULL)//means we reached the end and weren't able to find the node
    return false;
    path.push_back(root->data);//put the currentt  node as it comes in the path from root to that node
    if(root->data==node)
    {
        return true;
    }
    bool lfound=pathFromRootToNode(root->left,node,path);
    bool rfound=pathFromRootToNode(root->right,node,path);
    if(rfound || lfound)
    return true;
    else
    {
        path.pop_back();//if not in path so remove it
        return false;
    }
    
}
int kthAncestor(Node *root, int k, int node)
{
    // Code here
    vector<int>path;
    if(root==NULL)
    return -1;
    pathFromRootToNode(root,node,path);
    if(path.size()<=k)
    return -1;
    else
    return path[path.size()-k-1];
}



TC:O(n)
SC:O(h)
