Leetcode 35 :

Search Index position

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
Example 4:

Input: nums = [1,3,5,6], target = 0
Output: 0
Example 5:

Input: nums = [1], target = 0
Output: 0
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104


brute force : 
just traverse linearly and find the first position where nums[i]>=target 


int searchInsert(vector<int>& nums, int target) {
        int pos=-1;
        for(int i=0;i<nums.size();i++){
            if(target<=nums[i]){
                pos=i;
                break;
            }
        }
        return pos==-1?nums.size():pos;
    }

TC:O(n)
SC:O(1)


Better approach using binary search :

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int pos=-1;
       int low=0;
        int high=nums.size()-1;
        while(low<=high){
            int mid=(high+low)/2;
            if(nums[mid]>=target){
                high=mid-1;
                pos=mid;
            }
            else if(nums[mid]<target)
                low=mid+1;
        }
        return pos==-1?nums.size():pos;
    }
};

TC:O(logn)
SC:O(1)


