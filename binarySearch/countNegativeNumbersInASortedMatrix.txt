Leetcode 1351:

Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, 
return the number of negative numbers in grid.

 

Example 1:

Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.
Example 2:

Input: grid = [[3,2],[1,0]]
Output: 0
Example 3:

Input: grid = [[1,-1],[-1,-1]]
Output: 3
Example 4:

Input: grid = [[-1]]
Output: 1
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
-100 <= grid[i][j] <= 100
 

Follow up: Could you find an O(n + m) solution?


brute force :

traverse each cell and count negative 


efficient using binary search is :

class Solution {
public:
    int countNegatives(vector<vector<int>>& arr) {
        int m=arr.size();
        int n=arr[0].size();
        int count=0;
        for(int i=0;i<m;i++){
           int low=0;int high=n-1;
            int ans=-1;
            while(low<=high){
                int mid=low+(high-low)/2;
                if(arr[i][mid]>=0)
                    low=mid+1;
                else{
                    ans=mid;
                    high=mid-1;
                }
                
            }
             count+=ans==-1?0:n-ans;    
        }
        return count;
    }
};

TC:O(mlogn)

sc:O(1)



///////////////////////////////////////////////////////////////////////////////



efficient is : begin from the top right corner and whenever you see a positive number just skip that row now as that will contain positive nums on left 
if negative are coming decrease j pointer to accomodate more 


class Solution {
public:
    int countNegatives(vector<vector<int>>& arr) {
        int m=arr.size();
        int n=arr[0].size();
        int j=n-1;int i=0;int count=0;
        while(i<m){
            if(j>=0 && arr[i][j]<0){
                j--;
            }else{
                count+=n-j-1;
                i++;
            }
        }
        return count;
    }
};

TC:O(n+m)
SC:O(1)
