Given an m x n matrix. If an element is 0, set its entire row and column to 0. Do it in-place.

Follow up:

A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?
 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]


Brute force solution: 
what we can think here is that when we find a zero in the matrix , we need to change that whole row and column to zero ,so if we do it in that own matrix then it would cause wrong answer as then new zeroes would be added
so we will take another matrix which is the copy of the original and then change the original accordingly 

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
        vector<vector<int> >visited;
        for(int i=0;i<m;i++)
        {
         visited.push_back(matrix[i]);
        }
        for(int i=0;i<m;i++)
        {
        for(int j=0;j<n;j++)
        {
            if(visited[i][j]==0)
            {
                for(int k=0;k<m;k++)//for column wise
                {
                    matrix[k][j]=0;
                }
                for(int l=0;l<n;l++)//for row wise
                {
                    matrix[i][l]=0;
                }
            }
        }
        }
    }
};


TC:O(m*n)
SC:O(m*n)




///////////////////////////////////////////

space optimized approach :O(m+n) extra space
what we can do here is take two vectors one of row and the other of column and in the original matrix wherever matrix[i][j]=0 , mark row[i]=1 and col[j]=1 
denoting that the whole row has to be made 0 and that column has to be made 0

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
        vector<int>row(m,0);
        vector<int>col(n,0);
        for(int i=0;i<m;i++)
        {
        for(int j=0;j<n;j++)
        {
            if(matrix[i][j]==0)
            {
                row[i]=1;
                col[j]=1;
            }
        }
        }
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(row[i]==1 || col[j]==1)
                    matrix[i][j]=0;
            }
        }
        
    }
};

TC:O(m*n)
SC:O(m+n)


//////////////////////////////////////


class Solution {
public:
   
    void setZeroes(vector<vector<int>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
        //we'll take the extra row and column vector in the matrix itself instead of having separately 
        //the first row of the matrix will store whether that row has zero or not
         //the first column of the matrix will store whether that column has zero or not
        bool row_has_zero=false;//whether the first row has zero or not
        for(int i=0;i<n;i++)
        {
            if(matrix[0][i]==0)
            {row_has_zero=true;
             break;
            }
        }
        bool column_has_zero=false;//whether the first column has zero or not
        for(int i=0;i<m;i++)
        {
            if(matrix[i][0]==0)
            {column_has_zero=true;
             break;
            }
        }
        for(int i=0;i<m;i++)
        {
        for(int j=0;j<n;j++)
        {
            if(matrix[i][j]==0)//if that cell has zero
            {
               matrix[0][j]=0;//mark that row's id as 0
                matrix[i][0]=0;//mark that col's id as zero
            }
        }
        }
        //now traverse matrix 
        for(int i=1;i<m;i++)
        {
        for(int j=1;j<n;j++)
        {
            if(matrix[0][j]==0 || matrix[i][0]==0)//if marked as 0 present
            {
               matrix[i][j]=0;
            }
        }
        }
         // Zero out first col
  if (column_has_zero) {
    for (int i = 0; i < m; i++) {
      matrix[i][0] = 0;
    }
  }

  // Zero out first row
  if (row_has_zero) {
    for (int j = 0; j <n; j++) {
      matrix[0][j] = 0;
    }
  }
    }
        
       
};


TC:O(n*m)
SC:O(1)
