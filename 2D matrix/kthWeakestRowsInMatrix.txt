Given a m * n matrix mat of ones (representing soldiers) and zeros (representing civilians), return the indexes of the k weakest rows in the matrix ordered from the weakest to the strongest.

A row i is weaker than row j, if the number of soldiers in row i is less than the number of soldiers in row j, or they have the same number of soldiers but i is less than j. Soldiers are always stand in the frontier of a row, that is, always ones may appear first and then zeros.

 

Example 1:

Input: mat = 
[[1,1,0,0,0],
 [1,1,1,1,0],
 [1,0,0,0,0],
 [1,1,0,0,0],
 [1,1,1,1,1]], 
k = 3
Output: [2,0,3]
Explanation: 
The number of soldiers for each row is: 
row 0 -> 2 
row 1 -> 4 
row 2 -> 1 
row 3 -> 2 
row 4 -> 5 
Rows ordered from the weakest to the strongest are [2,0,3,1,4]
Example 2:

Input: mat = 
[[1,0,0,0],
 [1,1,1,1],
 [1,0,0,0],
 [1,0,0,0]], 
k = 2
Output: [0,2]
Explanation: 
The number of soldiers for each row is: 
row 0 -> 1 
row 1 -> 4 
row 2 -> 1 
row 3 -> 1 
Rows ordered from the weakest to the strongest are [0,2,3,1]
 

Constraints:

m == mat.length
n == mat[i].length
2 <= n, m <= 100
1 <= k <= m
matrix[i][j] is either 0 or 1.




method 1: brute force 

class Solution {
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        int soldier=0;
        int n=mat.size();
        vector<pair<int,int> >weakest;//to store soldiers in each row and then the index of that row 
        vector<int>v;
        for(int i=0;i<n;i++)
        {
            int soldier=0;
            for(int j=0;j<mat[i].size();j++)
            {
                //done for the column 
                if(mat[i][j]==1)
                    soldier++;
            }
            weakest.push_back({soldier,i});//push all the soldiers for a given row 
        }
        sort(weakest.begin(),weakest.end());
        for(int i=0;i<k;i++)
        {
          v.push_back(weakest[i].second);  
        }
        return v;
        
    }
};

TC:O(n*n)



a little optimized by only moving acrosss the row till we keep on encountering a 1 :


class Solution {
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        int soldier=0;
        int m=mat.size();int n=mat[0].size();
        vector<pair<int,int> >weakest;
        vector<int>v;
        for(int i=0;i<m;i++)
        {
            int soldier=0;
            int j=0;
            while(j<n && mat[i][j]==1)//do only till we encounter ones 
            {
                soldier++;
                j++;
            }
            weakest.push_back({soldier,i}); 
        }
        sort(weakest.begin(),weakest.end());
        for(int i=0;i<k;i++)
        {
          v.push_back(weakest[i].second);  
        }
        return v;
        
    }
};



