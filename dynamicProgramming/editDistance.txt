Given two strings s and t. Find the minimum number of operations that need to be performed on str1 to convert it to str2. The possible operations are:

Insert
Remove
Replace
 

Example 1:

Input: 
s = "geek", t = "gesek"
Output: 1
Explanation: One operation is required 
inserting 's' between two 'e's of str1.


Brute force solution:
is to traverse all the characters one by one 
and then check for two possibilities -
1. the characters are same then we do not need to do anything extra and recur for rest of the two strings (m-1,n-1)
2. but if characters are not same then we need to see which one of the operations will cost us minimum
insert:(m,n-1)
replace:(m-1,n-1)
delete:(m-1,n)
 

 so since we need to recur everytime for every character , we need to make recursive approach
 base case is when 
 if(m==0)//the length of the first string becomes 0 then to convert str1 to str2 ,
 we are left with no other option except to insert all n characters of str2 in str1
 thus if(m==0)
 return n;
 if(n==0)
 return m;//as now delete m charcters 

    int minEdit(int m,int n,string s,string t)
	{
	    if(m==0)
	    return n;
	    else if(n==0)
	    return m;
	    if(s[m-1]==t[n-1])//no changes need to be made
	    return minedit(m-1,n-1,s,t);//thus recur for rest of the string 
	    if(s[m-1]!=t[n-1])
	    return 1+min(minedit(m,n-1,s,t),min(minedit(m-1,n,s,t),minedit(m-1,n-1,s,t)));
	    
	}
		int editDistance(string s, string t)
		{
		    // Code here
		   int m=s.size();int n=t.size();
		   return minedit(m,n,s,t);
		}


        In worst case we may end up doing 3^m operations thus time complexity is exponential

        //////////////////////////----------////////////////////////////
        to improve the time complexity we use memoization with recursion
        to store some results instead of calling recursion blindly

        int minedit(int m,int n,string s,string t,vector<vector<int> >dp)
	{
	    if(m==0)
	    return n;
	    if(n==0)
	    return m;
	    if(dp[m-1][n-1]!=-1)
	    return dp[m][n];
	    if(s[m-1]==t[n-1])//no changes need to be made
	    dp[m][n]= minedit(m-1,n-1,s,t,dp);//thus recur for rest of the string 
	    if(s[m-1]!=t[n-1])
	    dp[m][n]=1+min(minedit(m,n-1,s,t,dp),min(minedit(m-1,n,s,t,dp),minedit(m-1,n-1,s,t,dp)));
	    return dp[m][n];
	    
	}
		int editDistance(string s, string t)
		{
		    // Code here
		   int m=s.size();int n=t.size();
		   vector<vector<int> >dp(m+1,vector<int>(n+1,-1));
		  // memset(dp,-1,sizeof(dp));
		   return minedit(m,n,s,t,dp);
		}
        TC:O(m*n)
        SC:O(m*n) but since recursion is called so it can cause stack overflow
        thus we need to optimize it
        ////////////////---------------------------
        method 3:bottom up dp
        we'll change recursive steps to iterative
         m---->i
         n------>j
         bas and thats how we can change our recursive code to iterative
        
class Solution {
public:
    int minDistance(string word1, string word2) {
        int m=word1.size();int n=word2.size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,0));
        for(int i=0;i<=m;i++){
            dp[i][0]=i;//remove every character
        }
        for(int j=0;j<=n;j++){
            dp[0][j]=j;//insert every character
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++)
            {
                if(word1[i-1]==word2[j-1]){//then no operation needed
                    dp[i][j]=dp[i-1][j-1];
                }
                else{//take minimum of operations 
                    dp[i][j]=1+min(dp[i][j-1],min(dp[i-1][j],dp[i-1][j-1]));
                }
            }
        }
        return dp[m][n];
    }
};
        TC:O(m*n)
        SC:O(m*n)