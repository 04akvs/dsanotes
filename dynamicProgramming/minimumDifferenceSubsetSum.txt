Given an integer array arr of size N, the task is to divide it into two sets S1 and S2 such that the absolute difference between their sums is minimum and find the minimum difference

Example 1:

Input: N = 4, arr[] = {1, 6, 11, 5} 
Output: 1
Explanation: 
Subset1 = {1, 5, 6}, sum of Subset1 = 12 
Subset2 = {11}, sum of Subset2 = 11   
Example 2:
Input: N = 2, arr[] = {1, 4}
Output: 3
Explanation: 
Subset1 = {1}, sum of Subset1 = 1
Subset2 = {4}, sum of Subset2 = 4

recursive approach :
To generate sums we either include the i’th item in set 1 or don’t include, i.e., include in set 2.  


   see lets suppose the array is [2,4,2,3]

    we need to find two subsets such that their difference in sum is minimum 
                     if we find sum of 1 subset be equal to s1Sum, other subset's sum would be (totalSubsetSum-s1Sum)


                     so bas we need to consider two cases for every element -
                     either include it in set 1 
                     or exclude it from set 2

                     jaise we end up considering all elements - calculate the differnece between two subsets formed =(s1Sum-(totalSum-s1Sum))


int subsetMin(int arr[],int s1,int totalSum,int n)
	{
	    if(n<0)
	    {
	        return abs(s1-(totalSum-s1));//if we have consider all the elements 
	    }
	    int inc=subsetMin(arr,s1+arr[n-1],totalSum,n-1);//include that element 
	    int exc=subsetMin(arr,s1,totalSum,n-1);//exclude that element 
	     return min(inc,exc);
	 
	}
	int minDiffernce(int arr[], int n) 
	{ 
	    // Your code goes here
	    //so it is basically based on partitioning 
	   // every item will either be included in set s1 or excluded from it and included in set s2
	   int s1=0;int totalSum=0;
	   for(int i=0;i<n;i++)
	   totalSum+=arr[i];//maximum sum that any subset can have 
	   return subsetMin(arr,s1,totalSum,n);//s1 is empty initially & set 2 is full
	} 
	


tc:exponential


optimized approach is:

bottom up dp:
class Solution{

	public:
	
	int minDiffernce(int arr[], int n) 
	{ 
	    // Your code goes here
	    //so it is basically based on partitioning 
	   // every item will either be included in set s1 or excluded from it and included in set s2
	   int sum = 0; 
    for (int i = 0; i < n; i++)
        sum += arr[i];
 
    // Create an array to store results of subproblems
    bool dp[n+1][sum+1];
 
    // Initialize first column as true. 0 sum is possible 
    // with all elements.
    for (int i = 0; i <= n; i++)
        dp[i][0] = true;
 
    // Initialize top row, except dp[0][0], as false. With
    // 0 elements, no other sum except 0 is possible
    for (int i = 1; i <= sum; i++)
        dp[0][i] = false;
 
    // Fill the partition table in bottom up manner
    for (int i=1; i<=n; i++)
    {
        for (int j=1; j<=sum; j++)
        {
            // If i'th element is excluded
            dp[i][j] = dp[i-1][j];
 
            // If i'th element is included
            if (arr[i-1] <= j)
                dp[i][j] |= dp[i-1][j-arr[i-1]];
        }
    }
  
    // Initialize difference of two sums. 
    int diff = INT_MAX;
     
    // Find the largest j such that dp[n][j]
    // is true where j loops from sum/2 t0 0
    for (int j=sum/2; j>=0; j--)
    {
        // Find the 
        if (dp[n][j] == true)
        {
            diff = sum-2*j;
            break;
        }
    }
    return diff;
}
};


TC:O(n*sum)
SC:O(n*sum)
