Leetcode 152:


Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

It is guaranteed that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.


Based on Kadane's Algorithm



 Keep track of both the maximum and minimum products,
  since at any point, a negative number * negative number = positive number. 
  So you can't just keep track of the max positive product and not care about the negative - maybe that negative can become positive too, and claim the throne.

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n=nums.size();
        int maxend=nums[0];
        int minend=nums[0];
        int maxoverall=nums[0];
        for(int i=1;i<n;i++)
        {
            int temp=maxend;
            maxend=max({nums[i],nums[i]*maxend,nums[i]*minend});
            minend=min({nums[i],nums[i]*temp,nums[i]*minend});
            maxoverall=max(maxoverall,maxend);
        }
        return maxoverall;
    }
};

TC:O(n)
SC:O(1)
