Given n wines in a row, with integers denoting the cost of each wine respectively. 
Each year you can sale the first or the last wine in the row. 
However, the price of wines increases over time. Let the initial profits from the wines be P1, P2, P3…Pn. 
On the Yth year, the profit from the ith wine will be Y*Pi.
 For šach year, your task is to print “beg” or “end” denoting whether first or last wine should be sold.
  Also, calculate the maximum profit from all the wines.

Examples :

Input: Price of wines: 2 4 6 2 5
Output: beg end end beg beg 
         64

recursion:



int maxProfit(start, end, year)
{
   if(start==end) return wine[start]*year; //base condition
   leftProfit = wine[start]*year + maxProfit(start+1, end, year+1, wine);
   rightProfit = wine[end]*year + maxProfit(start, end-1, year+1, wine);
return max(leftProfit, rightProfit);
}



memoization with recursion:


We will use dynamic programming to solve this problem. Create a 2D array. This array will store the maximum profit for selling the wines.
 Its size will be (wine.length*wine.length).
int wineProfit[wine.length][wine.length]; //assign the array with initial values of zero, it means the profit is not calculated yet.
wineProfit[0][4] = maximum profit by selling the wines from index 0 to 4. eg. [2, 4, 6, 2, 5]
wineProfit[1][3] = maximum profit by selling the wines from index 1 to 3. eg. [4, 6, 2]
and so on.
int maxProfit(start, end, year)
{
    if (start > end)
        return 0;
    else if (wineProfit[start][end] != 0)
        return wineProfit[start][end];
    else if (start <= end){
leftProfit = wine[start] * year + maxprofit(start + 1, end, year + 1);
rightProfit = wine[end] * year + maxprofit(start, end - 1, year + 1);
wineProfit[start][end] = max(leftProfit, rightProfit); //this step is memoization
return wineProfit[start][end];
    }
    else
        return 0;
}

TC:O(n*n)

