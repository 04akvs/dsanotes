You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.

 

Example 1:

Input: amount = 5, coins = [1, 2, 5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
class Solution {
public:
Brute force recursive approach:
    
    int coinChange(vector<int>& coins, int n, int amount)
    {
        if(n==0)
            return 0;
        if(amount == 0)
        {
            return 1;
        }
        if(coins[n-1] > amount)
        {
            return coinChange(coins, n-1, amount);
        }
        return coinChange(coins, n, amount-coins[n-1]) + coinChange(coins, n-1, amount);
    }
    
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        if(amount == 0) {
            return 1;
        }
        if(n==0)
            return 0;
        return coinChange(coins, n, amount);
        
    }
};
/////////////////////////////////////////////////
Memiozation with recursion
vector<vector<int>> dp;
    int coinChange(vector<int>& coins, int n, int amount)
    {
        if(n==0)
            return 0;
        if(amount == 0)
        {
            return 1;
        }
        if(dp[n][amount] != -1)
        {
            return dp[n][amount];
        }
        if(coins[n-1] > amount)
        {
            dp[n][amount] = coinChange(coins, n-1, amount);
            return dp[n][amount];
        }
        dp[n][amount] = coinChange(coins, n, amount-coins[n-1]) + coinChange(coins, n-1, amount);
        return dp[n][amount];
    }
    
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        if(amount == 0) {
            return 1;
        }
        if(n==0)
          return 0;
        
        dp.resize(n+2,vector<int>(amount+2,-1));
        
        dp[n][amount] = coinChange(coins, n, amount);
        return dp[n][amount];
        
    }
};
//////////////////////////////////////////////////////////////////

class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        int i,j,dp[n+1][amount+1];
memset(dp,0,sizeof(dp));
for(i=0;i<=n;i++)
{
for(j=0;j<=amount;j++)
{
if(i==0) dp[i][j]=0;
if(j==0) dp[i][j]=1;
}
}
for(i=1;i<=n;i++)
{
for(j=1;j<=amount;j++)
{
if(coins[i-1]<=j) dp[i][j]=dp[i][j-coins[i-1]] + dp[i-1][j];
else dp[i][j]=dp[i-1][j];
}
}
return dp[n][amount];
}
   
    