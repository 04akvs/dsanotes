A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

The answer is guaranteed to fit in a 32-bit integer.

 
 for reference :
 https://leetcode.com/problems/decode-ways/discuss/740182/C++-Recursion-or-Recursion-with-memoization-or-DP-Explained

Example 1:

Input: s = "12"
Output: 2
Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: s = "226"
Output: 3
Explanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
Example 3:

Input: s = "0"
Output: 0
Explanation: There is no character that is mapped to a number starting with 0.
The only valid mappings with 0 are 'J' -> "10" and 'T' -> "20", neither of which start with 0.
Hence, there are no valid ways to decode this since all digits need to be mapped.
Example 4:

Input: s = "06"
Output: 0
Explanation: "06" cannot be mapped to "F" because of the leading zero ("6" is different from "06").
 

Constraints:

1 <= s.length <= 100
s contains only digits and may contain leading zero(s).



Recursion O(2^n). 
A char may be decoded alone or by pairing with the next char.



class Solution {
public:
    //every digit has two choices either get paired up or be as it to represent a character
    int numways(string s,int i){
        if(i==s.size())//we reached the end 
            return 1;
        if(s[i]=='0')//as any substring can't start with a zero
            return 0;
        if(i==s.size()-1)
            return 1;
       int way1=numways(s,i+1);
        int way2=0;
        string str=s.substr(i,2);//taking two at a time
        if(stoi(str)>0 && stoi(str)<=26){
            way2=numways(s,i+2);
        }
        return way1+way2;
        
         
    }
    int numDecodings(string s) {
      int n=s.size();
       return numways(s,0);
        
        
    }
};




TLE

recursion with memoization :



class Solution {
public:
    int ways(string s,int i,vector<int>&dp){
         if(i==s.size())
            return 1;
        if(s[i]=='0')//no mapping can begin with zero
            return 0;
        if(dp[i]!=-1)
            return dp[i];
        if(i==s.size()-1)//we successfully reached the end thus found one way
            return 1;
        int way1=ways(s,i+1,dp);
        int way2=0;
        if(s[i]=='1' || (s[i]=='2' && s[i+1]<'7')){
            way2=ways(s,i+2,dp);
        }
        return dp[i]=way1+way2;
    }
    int numDecodings(string s) {
        int n=s.size();
         vector<int>dp(n,-1);//to avoid recalculating for the same subproblems 
        return ways(s,0,dp);
    }
};





TC:O(n)
SC:O(n)
///////////////////////////////////



Bottom up approach :
to improve the space complexity 






class Solution {
public:
    //bottom up approach 
    int numDecodings(string s) {
        int n=s.size();
        //dp[i] = number of ways to decode the string of length i
         vector<int>dp(n+1);
        dp[0]=1;
        if(s[0]=='0')
            dp[1]=0;
        else
            dp[1]=1;
        for(int i=2;i<=n;i++){
            int one=stoi(s.substr(i-1,1));
            int two=stoi(s.substr(i-2,2));
            if(one>=1)
                dp[i]=dp[i]+dp[i-1];
            if(two>=10 && two<=26)
                dp[i]=dp[i]+dp[i-2];
        }
        return dp[n];
    }
};
TC:O(n)
SC:O(n)

