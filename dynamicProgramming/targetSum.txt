You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
Example 2:

Input: nums = [1], target = 1
Output: 1
 

Constraints:

1 <= nums.length <= 20
0 <= nums[i] <= 1000
0 <= sum(nums[i]) <= 1000
-1000 <= target <= 1000


Recursive approach :

for evrey element we have 2 things to try either add or subtract thus 
class Solution {
public:
    int recur(vector<int>&nums,int i,int sum,int S){
        if(i==nums.size()){
            if(sum==S)
                return 1;
            return 0;
        }
        //by adding or by subtracting 
        int add=recur(nums,i+1,sum+nums[i],S);
        int subtract=recur(nums,i+1,sum-nums[i],S);
        return add+subtract;
    }
    int findTargetSumWays(vector<int>& nums, int S) {
        return recur(nums,0,0,S);
        
    }
};

TC:(2^n)





Recursion with memoization:



class Solution {
public:
    //map is being used instead of 2D array since sum can be negative too and we can't store negative indexes for array/vectors
    map<pair<int,int>,int>mp;
    int recur(vector<int>&nums,int i,int sum,int S){
        if(i==nums.size()){//reached the end 
            if(sum==S)//we get one expression whose sum is equal to target 
                return 1;//thus return one way
            return 0;//else no way
        }
        if(mp.find({i,sum})!=mp.end())
            return mp[{i,sum}];
        //each digit has two choices by adding or by subtracting 
        int add=recur(nums,i+1,sum+nums[i],S);//add operator
        int subtract=recur(nums,i+1,sum-nums[i],S);//subtarct operator
        return mp[{i,sum}]=add+subtract;
    }
    int findTargetSumWays(vector<int>& nums, int S) {
        
        return recur(nums,0,0,S);
    }
};

tc:O(n*sum + nlogn)



Bottom Up Approach:

