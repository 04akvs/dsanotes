Leetcode 376-


A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with two or fewer elements is trivially a wiggle sequence.

For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.
In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.
A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.

Given an integer array nums, return the length of the longest wiggle subsequence of nums.

 

Example 1:

Input: nums = [1,7,4,9,2,5]
Output: 6
Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).
Example 2:

Input: nums = [1,17,5,10,13,15,10,5,16,8]
Output: 7
Explanation: There are several subsequences that achieve this length.
One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).
Example 3:

Input: nums = [1,2,3,4,5,6,7,8,9]
Output: 2
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 1000



class Solution {
public:
    //there is a choice for every number to take it or don't 
    int wiggle(vector<int>&nums,int i,int last){
        if(i==nums.size()){
          return 0;
        }
        int include=0;int exclude=0;
        if((last==-1 && (nums[i]-nums[i-1])>0))
         include=1+wiggle(nums,i+1,1);
        else if(last==1 && nums[i]-nums[i-1]<0)
           include=1+wiggle(nums,i+1,-1); 
        else
         exclude=wiggle(nums,i+1,last);
        return max(exclude,include);
    }
    int wiggleMaxLength(vector<int>& nums) {
        int last=-1;//for negative difference
        if(nums.size()==1 || nums.size()==2)
            return 1;
        //positive difference or either negative difference 
        return 1+max(wiggle(nums,1,1),wiggle(nums,1,-1));  
    }
};

TC:O(2^n)


Recursion woth memoization:

class Solution {
public:
    //there is a choice for every number to take it or don't 
    int wiggle(vector<int>&nums,int i,int last,vector<int>&dp){
        if(i==nums.size()){
          return 0;
        }
        if(dp[i]!=0)
            return dp[i];
        int include=0;int exclude=0;
        if((last==-1 && (nums[i]-nums[i-1])>0))
         include=1+wiggle(nums,i+1,1,dp);
        else if(last==1 && nums[i]-nums[i-1]<0)
           include=1+wiggle(nums,i+1,-1,dp); 
        else
         exclude=wiggle(nums,i+1,last,dp);
        return max(exclude,include);
    }
    int wiggleMaxLength(vector<int>& nums) {
        if(nums.size()==1 || nums.size()==2)
            return 1;
        vector<int>dp(nums.size()+1,0);
        //positive difference or either negative difference 
        return 1+max(wiggle(nums,1,1,dp),wiggle(nums,1,-1,dp));  
    }
};



Bottom Up approach :

//the approach is similar to like in LIS 


class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        if(nums.size()==1 || nums.size()==2)
            return 1;
        int n=nums.size();
        vector<int>dp(n+1);
        dp[0]=1;int lastSign=0;
        for(int i=1;i<n;i++){
            if(lastSign!=1 && nums[i]-nums[i-1]>0)
            {
                dp[i]=1+dp[i-1];
                lastSign=1;
            }
            else if(lastSign!=-1 && nums[i]-nums[i-1]<0)
            {
                dp[i]=1+dp[i-1];
                lastSign=-1;
            }
            else 
                dp[i]=dp[i-1];
        }
        //positive difference or either negative difference 
        return dp[n-1];
    }
};


TC:O(n)
SC:O(n)


In O(1) space:


class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        if(nums.size()==1 || nums.size()==2)
            return 1;
        int n=nums.size();
       
        int dp=1;int lastSign=0;
        for(int i=1;i<n;i++){
            if(lastSign!=1 && nums[i]-nums[i-1]>0)
            {
               dp++;
                lastSign=1;
            }
            else if(lastSign!=-1 && nums[i]-nums[i-1]<0)
            {
                dp++;
                lastSign=-1;
            }
            else 
               dp=dp;
        }
        //positive difference or either negative difference 
        return dp;
    }
};








