You are given K eggs, and you have access to a building with N floors from 1 to N. 

Each egg is identical in function, and if an egg breaks, you cannot drop it again.

You know that there exists a floor F with 0 <= F <= N such that any egg dropped at a floor higher than F will break, and any egg dropped at or below floor F will not break.

Each move, you may take an egg (if you have an unbroken one) and drop it from any floor X (with 1 <= X <= N). 

Your goal is to know with certainty what the value of F is.

What is the minimum number of moves that you need to know with certainty what F is, regardless of the initial value of F?

 

Example 1:

Input: K = 1, N = 2
Output: 2
Explanation: 
Drop the egg from floor 1.  If it breaks, we know with certainty that F = 0.
Otherwise, drop the egg from floor 2.  If it breaks, we know with certainty that F = 1.
If it didn't break, then we know with certainty F = 2.
Hence, we needed 2 moves in the worst case to know what F is with certainty.


basic idea: recursive approach 

class Solution {
public:
    int eggdrop(int eggs,int floors)
    {
        if(eggs<=1 || floors<=1)
            return floors;
        int minn=INT_MAX;
        for(int i=1;i<=floors;i++)
        {
        int temp=1+max(eggdrop(eggs-1,i-1),eggdrop(eggs,floors-i));
                       if(temp<minn)
                       minn=temp;
        }
                       return minn;
    }
    int superEggDrop(int K, int N) {
        int eggs=K;int floors=N;
        return eggdrop(eggs,floors);
    }
};
n is floors k is eggs
Time Complexity: O(n * (2^min(n,k))
Space Complexity: O(1) , If we ignore space taken by stack frame


//////////////////////////////////////////////////
class Solution {
public:
    int t[101][10001];
    int eggdrop(int eggs,int floors)
    {
        if(eggs<=1 || floors<=1)
            return floors;
        if(t[eggs][floors]!=-1)
            return t[eggs][floors];
        int minn=INT_MAX;
        for(int i=1;i<=floors;i++)
        {
        int temp=1+max(eggdrop(eggs-1,i-1),eggdrop(eggs,floors-i));
         if(temp<minn)
         minn=temp;
        }
    return t[eggs][floors]=minn;
    }
    int superEggDrop(int K, int N) {
        int eggs=K;int floors=N;
        memset(t,-1,sizeof(t));
        return eggdrop(eggs,floors);
    }
};
/////////////////////////////////////////////
Bottom up dp solution:
class Solution {
public:
    int superEggDrop(int K, int N) {
        int eggs=K;int floors=N;
        //bottom up dp solution
        int t[eggs+1][floors+1];
        //for one floor  , one attempt is needed
        for(int i=0;i<=eggs;i++)
        {
            t[i][1]=1;
            t[i][0]=0;//and for zero floors , no attempt is needed
        }
        //now for one egg , we need to check every floor 
        for(int j=0;j<=floors;j++)
        {
           t[1][j]=j; 
        }
        //now optimal substructure
        for(int i=2;i<=eggs;i++)
        {
            for(int j=2;j<=floors;j++)
            {
                t[i][j]=INT_MAX;
                for(int x=1;x<=j;x++)
                {
                    int temp=1+max(t[i-1][x-1],t[i][j-x]);
                    if(temp<t[i][j])
                        t[i][j]=temp;
                }
            }
        }
        return t[eggs][floors];
        
        
    }
};
TC:O(eggs*floors*floors)
SC:O(eggs*floors)
/////////////////////////////////////////////////////////
we need to furthur optimize this approach as it has chances to give TLE
for bigger values
K=6
N=1000
TLE
so instead of looping totally , we can use binary search technique

class Solution {
public:
    int find(int k,int n,vector<vector<int>> &memo)
    {   if(n==0||n==1) return n;  //if no. of floor 0 , 1 return n:
        if(k==1) return n;        // if 1 egg return number of floor   
        if(memo[k][n]!=-1) return memo[k][n];
        int ans=1000000,l=1,h=n,temp=0;
     
        while(l<=h)
        {
            int mid=(l+h)/2;
            int left=find(k-1,mid-1,memo);   //egg broken check for down floors of mid
            int right=find(k,n-mid,memo) ;   // not broken check for up floors of mid
            temp=1+max(left,right);          //store max of both 
            if(left<right){                  //since right is more than left and we need more in worst case 
              l=mid+1;                       // so l=mid+1 to gain more temp for worst case : upward
            }
            else                             //left > right so we will go downward 
            {    
                h=mid-1;
            }
            ans=min(ans,temp);               //store minimum attempts
        }
        
     /*
        Here we have k eggs and n floor
        if we drop from i  (i=1 to n):
         i) egg break , now we remain k-1 eggs and i-1 floor beacase after i floor all the eggs will break
        ii) egg not break , now we remain k eggs and n-i floor because before i (included) all eggs will be remain
      */
        return memo[k][n]=ans;
     
    }
    int superEggDrop(int K, int N) {
        //K -> egg , N -> floor
        vector<vector<int>> memo(K+1,vector<int> (N+1,-1));
        return find(K,N,memo);
         
    }
};

TC:(eggs * floors * log(floors))
SC:O(eggs*floors)
/////////////////////////////////

class Solution {
public:
    
    int superEggDrop(int K, int N) {
        if(N==0||N==1) return N;     //Think for base case
        if(K==1) return N;
        
        vector<vector<int>> dp(K+1,vector<int> (N+1,0));
      for(int i=0;i<=K;i++)
        dp[i][0]=0,dp[i][1]=1;   //Filling from base case as if N==0 ans=0 , N==1 ans=1
      for(int i=0;i<=N;i++)
        dp[0][i]=0,dp[1][i]=i;   //Filling from base case as if K==0 ans=0 , K==1 ans=N, number of current floor (i)
        
        for(int i=2;i<K+1;i++)
        {
            for(int j=2;j<N+1;j++)
            {    int l=1,h=j,temp=0,ans=100000;
                 while(l<=h)
                 {
                    int mid=(l+h)/2;
                    int left= dp[i-1][mid-1]; //egg broken check for down floors of mid
                    int right= dp[i][j-mid];  // not broken check for up floors of mid
                    temp=1+max(left,right);          //store max of both 
                    if(left<right){                  //since right is more than left and we need more in worst case 
                      l=mid+1;                       // so l=mid+1 to gain more temp for worst case : upward
                    }
                    else                             //left > right so we will go downward 
                    {    
                        h=mid-1;
                    }
                    ans=min(ans,temp);               //store minimum attempts
                 }
                 dp[i][j]=ans;
            }
        }
        return dp[K][N];
         
    }
};
Time Complexity: O((n * k) * logn)
Space Complexity: O(n * k)

