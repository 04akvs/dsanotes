Leetcode 123-


You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
Example 4:

Input: prices = [1]
Output: 0
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105

the approach is similar to buy and sell stock I where the steps were 1 while here we are allowed at most 2 times


recursion with memoization:



class Solution {
public:
    int buystate(vector<int>&prices,int i,int steps,int buy,vector<vector<vector<int>>>&dp){
       if(i>=prices.size()|| steps>=2){
           return 0;
       }
       if(dp[i][buy][steps]!=-1)
           return dp[i][buy][steps];
       if(buy){//if we can buy
           return dp[i][buy][steps]=max(-prices[i]+buystate(prices,i+1,steps,!buy,dp),buystate(prices,i+1,steps,buy,dp));
       }
       else
       {
           return dp[i][buy][steps]=max(prices[i]+buystate(prices,i,steps+1,!buy,dp),buystate(prices,i+1,steps,buy,dp));
       }
   }
    int maxProfit(vector<int>& prices) {
        int maxx=-1;
        vector<vector<vector<int>>>dp(prices.size(),vector<vector<int>>(2,vector<int>(2,-1)));
        return buystate(prices,0,0,1,dp);
    }
    
};

TC:O(n*2*2)
i.e linear 
SC:linear

///////////////////////////////////////////////////////////

Bottom up dp:

