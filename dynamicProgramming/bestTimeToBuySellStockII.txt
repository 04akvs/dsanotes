Leetcode 122.





You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e., max profit = 0.
 

Constraints:

1 <= prices.length <= 3 * 104
0 <= prices[i] <= 104


we can see that there is choice of the buyer to buy or don't buy when he is on the position to buy (i.e isn't holding any previous stock to sell)
similarly for selling 
we'll take max of all such possibilities.

if he decides to buy the i'th stock  then he need to spend money =prices[i] thus we subtract it from total money ie. -prices[i] would be added 
but if he decides to sell then he'll gain some money =prices[i] thus add it to total



recursive plus memoization:


class Solution {
public:
    int buystate(vector<int>&prices,int i,int steps,int buy,vector<vector<int>>&dp){
       if(i>=prices.size()){
           return 0;
       }
       if(dp[i][buy]!=-1)
           return dp[i][buy];
       if(buy){//if we can buy
           return dp[i][buy]=max(-prices[i]+buystate(prices,i+1,steps,!buy,dp),buystate(prices,i+1,steps,buy,dp));
       }
       else
       {
           return dp[i][buy]=max(prices[i]+buystate(prices,i,steps-1,!buy,dp),buystate(prices,i+1,steps,buy,dp));
       }
   }
    int maxProfit(vector<int>& prices) {
        int maxx=-1;
        vector<vector<int>>dp(prices.size(),vector<int>(2,-1));
        return buystate(prices,0,1,1,dp);
    }
};


TC:O(n*2)=linear
SC:O(n)



Bottom up dp:


class Solution {
public:
    int maxProfit(vector<int>& prices) {
       int n=prices.size();
        vector<vector<int>>dp(prices.size(),vector<int>(2,0));
            dp[0][0]=0;//if can't buy 
            dp[0][1]=-prices[0];//if can buy then buys
        for(int i=1;i<n;i++){
                    dp[i][0]=max(prices[i]+dp[i-1][1],dp[i-1][0]);//sell or don't sell
                    dp[i][1]=max(-prices[i]+dp[i-1][0],dp[i-1][1]);//buy or don't buy
            }
        
        return max(dp[n-1][0],dp[n-1][1]);
    }
};


TC:O(n)

SC:O(n*2)) linear