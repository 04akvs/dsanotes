A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and space is marked as 1 and 0 respectively in the grid.

 

Example 1:


Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right
Example 2:


Input: obstacleGrid = [[0,1],[0,0]]
Output: 1
 

Constraints:

m == obstacleGrid.length
n == obstacleGrid[i].length
1 <= m, n <= 100
obstacleGrid[i][j] is 0 or 1.


recursion:


class Solution {
public:
    int recur(vector<vector<int>>&grid,int i,int j,int m,int n){
        if(i>=m || j>=n || grid[i][j]==1)
            return 0;
        if(i==m-1 && j==n-1)//reached finish
            return 1;//as one path we got 
        return recur(grid,i+1,j,m,n)+recur(grid,i,j+1,m,n);
        
    }
    int uniquePathsWithObstacles(vector<vector<int>>&grid) {
        int m=grid.size();int n=grid[0].size();
        return recur(grid,0,0,m,n);
    }
};

TC:O(2^n)

TLE thus 

//////////////////////////////////////////////////////////////////////////


recursion with memoization:



class Solution {
public:
    int recur(vector<vector<int>>&grid,int i,int j,int m,int n,vector<vector<int>>&dp){
        if(i>=m || j>=n || grid[i][j]==1)
            return 0;
        if(i==m-1 && j==n-1)//reached finish
            return 1;//as one path we got 
        if(dp[i][j]!=-1)
            return dp[i][j];
        return dp[i][j]=recur(grid,i+1,j,m,n,dp)+recur(grid,i,j+1,m,n,dp);
        
    }
    int uniquePathsWithObstacles(vector<vector<int>>&grid) {
        int m=grid.size();int n=grid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return recur(grid,0,0,m,n,dp);
    }
};

TC:O(n*m)
SC:O(n*m)



/////////////////////////////////////////////////////////////////////


Bottom up dp:


class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>&grid) {
        int m=grid.size();int n=grid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,0));
        if(grid[0][0]==1 || grid[m-1][n-1]==1)
            return 0;
        dp[0][0]=1;//start point one way
        //we won't let any obstacle cell contribute to our answer 
        for(int i=1;i<m;i++){
                dp[i][0]=grid[i][0]?0:dp[i-1][0];

        }
        for(int j=1;j<n;j++){
            dp[0][j]=grid[0][j]?0:dp[0][j-1];
        }
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++){
               if(grid[i][j]!=1)//if not an obstacle then we can move down & right form here
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
};

TC:O(n*m)
sc:O(n*m)




/////////////////////////////////////////////////////////////////

we can furthur optimise our space complexity by using the grid given itself 

 as our dp table 


class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>&grid) {
        int m=grid.size();int n=grid[0].size();
        if(grid[0][0]==1 || grid[m-1][n-1]==1)
            return 0;
        grid[0][0]=1;//start point one way
        //we won't let any obstacle cell contribute to our answer 
        for(int i=1;i<m;i++){
                grid[i][0]=grid[i][0]?0:grid[i-1][0];

        }
        for(int j=1;j<n;j++){
            grid[0][j]=grid[0][j]?0:grid[0][j-1];
        }
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++){
               if(grid[i][j]!=1)//if not an obstacle then we can move down & right form here
                    grid[i][j]=grid[i-1][j]+grid[i][j-1];
                else
                    grid[i][j]=0;
            }
        }
        return grid[m-1][n-1];
    }
};

TC:O(n*m)
SC:O(1)

