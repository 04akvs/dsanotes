
Leetcode 1092-


Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences.  If multiple answers exist, you may return any of them.

(A string S is a subsequence of string T if deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results in the string S.)

 

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.
 

Note:

1 <= str1.length, str2.length <= 1000
str1 and str2 consist of lowercase English letters.


class Solution {
public:
    //i can find the length of longest common subsequence in them 
    //that will be common thus we can add it only once  from the resultant string
    string shortestCommonSupersequence(string s1, string s2) {
        int n=s1.size();int m=s2.size();
        //cout<<n+m-lcs(str1,str2,n-1,m-1);
        //first let us find the length of LCSupersequence
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(s1[i-1]==s2[j-1])
                    dp[i][j]=1+dp[i-1][j-1];
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        string res="";
        int i=n,j=m;//let us begin from the end of both strings
        while(i>0 && j>0){
            if(s1[i-1]==s2[j-1]){
                //if equal then toh incldue only once 
                res.push_back(s1[i-1]);
                i--;j--;//as we got one common letter
        }
            else{
                if(dp[i-1][j]>dp[i][j-1])//means the current character isn't contributing the LCS so we move on but insert it in string because it'll contribute in SCS
                {
                    res.push_back(s1[i-1]);i--;
                }
                else
                {
                    res.push_back(s2[j-1]);j--;
                }
              
            }
        }
        while(i>0){
            res.push_back(s1[i-1]);i--;
        }
        while(j>0){
            res.push_back(s2[j-1]);j--;
        }
        reverse(res.begin(),res.end());
        return res;
        
        
    }
};




Another way of comparing 
class Solution {
public:
    //i can find the length of longest common subsequence in them 
    //that will be common thus we can delte it from the resultant string
    string shortestCommonSupersequence(string s1, string s2) {
        int n=s1.size();int m=s2.size();
        //cout<<n+m-lcs(str1,str2,n-1,m-1);
        //first let us find the length of LCSupersequence
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(s1[i-1]==s2[j-1])
                    dp[i][j]=1+dp[i-1][j-1];
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        string res="";
        int i=n,j=m;//let us begin from the end of both strings
        while(i>0 && j>0){
            if(dp[i][j]==dp[i-1][j]){//means didn't contribute to LCS thus not common take it
                res.push_back(s1[i-1]);i--;
            }
            else if(dp[i][j]==dp[i][j-1]){
                res.push_back(s2[j-1]);j--;
            }
            else{//if unequal then means common characters are there so include either one
                res.push_back(s1[i-1]);i--;j--;
            }
        }
        while(i>0){
            res.push_back(s1[i-1]);i--;
        }
        
        while(j>0){
            res.push_back(s2[j-1]);j--;
        }
        reverse(res.begin(),res.end());
        return res;    
    }
};

TC:O(n*m)

