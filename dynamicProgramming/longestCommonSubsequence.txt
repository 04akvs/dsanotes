Given two strings text1 and text2, return the length of their longest common subsequence.

A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, "ace" is a subsequence of "abcde" while "aec" is not). A common subsequence of two strings is a subsequence that is common to both strings.

 

If there is no common subsequence, return 0.
Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Brute force approach : tC:O(2^n)
would be to generate all possible subsequences and then find longestCommonSubsequence
we can do it via recursion
int lcs(int x,int y,string text1,string text2)
{
    if(x==0 || y==0)
    return 0;
     if(s1[x-1]==s2[y-1])
    return 1+lcs(x-1,y-1,s1,s2);
     else
    return max(lcs(x-1,y,s1,s2),lcs(x,y-1,s1,s2));
    }
    int longestCommonSubsequence(string text1, string text2) {
       int x=text1.size();int y=text2.size();
        return lcs(x,y,text1,text2);
        
}

DP based solution:

class Solution {
public:
    
    int longestCommonSubsequence(string text1, string text2) {
       int x=text1.size();int y=text2.size();
        int t[x+1][y+1];
        for(int i=0;i<x+1;i++)
        {
            for(int j=0;j<y+1;j++)
            {
                if(i==0 || j==0)
                    t[i][j]=0;
            }
        }
        for(int i=1;i<x+1;i++)
        {
         for(int j=1;j<y+1;j++)
        {
        if(text1[i-1]==text2[j-1])
        t[i][j]=1+t[i-1][j-1];
        else 
        t[i][j]=max(t[i-1][j],t[i][j-1]);
         }
        
    
        }
        return t[x][y];
    }
};
