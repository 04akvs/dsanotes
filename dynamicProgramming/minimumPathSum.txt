Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12

every cell has two ways to proceed - either go down from it (i+1,j)  or go right from it (i,j+1)
and depending upon min we will choose our result thsu recursion comes to our mind 

class Solution {
public:
    int recurPaths(vector<vector<int>>&grid,int i,int j,int m,int n)
    {
        if(i==m-1 && j==n-1)//we reached bottom right
            return grid[i][j];
        if(i>=m || i<0 || j<0 || j>=n)
            return INT_MAX;//we can't do 0 as then minimum would be zero only 
        return grid[i][j]+min(recurPaths(grid,i+1,j,m,n),recurPaths(grid,i,j+1,m,n));//we need to take minimum of these two paths 
    }
    int minPathSum(vector<vector<int>>& grid) {
        //you start from top left
        //and end at bottom right 
        int m=grid.size();
        int n=grid[0].size();
        return recurPaths(grid,0,0,m,n);
    }
};


TC:O(2^n)
   obviously it will TLE



recursion with memoization :


class Solution {
public:
    int minS=INT_MAX;
    int recur(vector<vector<int> >&grid,int i,int j,int m,int n,vector<vector<int> >&dp)
    {
        
        if(i==m-1 && j==n-1)//reached bottom right
        {
            return grid[i][j];
        }
        if(i>=m || i<0 || j>=n || j<0)
            return INT_MAX;
        if(dp[i][j]!=-1)
            return dp[i][j];
        return dp[i][j]=grid[i][j]+min(recur(grid,i+1,j,m,n,dp), recur(grid,i,j+1,m,n,dp));
       //right
        
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
      vector<vector<int>>dp(m,vector<int>(n,-1));
        return recur(grid,0,0,m,n,dp);
       // return minS;
    }
};



TC:O(n*m)


bottom up dp:



what we do in bottom up is : from smaller results we make up our bigger results 

that is we use our previuosly calculated values to give us results for current values .



here how do we use that then?


we know that to arrive at any cell -----  that person would have either come from cell above to it or on left to it as he is only allowed to move down or right




so if we are at cell (i,j) then we must have come either from (i-1,j)i.e above or (i,j-1) depending on which path gives us minimum resultant cost 


so we make our table 

int dp[m][n];
dp[m-1][n-1] denotes cost to reach cell m-1,n-1


class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        //you start from top left
        //and end at bottom right 
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,grid[0][0]));
         for (int i = 1; i < m; i++)//boundary conditions for first column as j-1 doesn't exist 
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        for (int j = 1; j < n; j++)//boundary conditions for first row as i-1 doesn't exist 
            dp[0][j] = dp[0][j - 1] + grid[0][j];
        for (int i = 1; i < m; i++)
            for (int j = 1; j < n; j++)
                dp[i][j]  = min(dp[i - 1][j],dp[i][j - 1]) + grid[i][j];
        return dp[m - 1][n - 1];
      
        
    }
};