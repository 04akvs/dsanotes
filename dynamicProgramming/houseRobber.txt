
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
             Total amount you can rob = 2 + 9 + 1 = 12.

class Solution {
public:
    int houserob(vector<int>&nums,int n)
    {
        if(n<=0)
            return 0; 
            int include=nums[n-1]+houserob(nums,n-2);//include that house
        int exclude=houserob(nums,n-1);//exclude that house
        return max(include,exclude);
    }
    int rob(vector<int>& nums) {
        int n=nums.size();
        return houserob(nums,n);
    }
};
//////////////////////////////////////////

Memoization with recursion
class Solution {
public:
    int t[101];
    int houserob(vector<int>&nums,int n)
    {
        if(n<=0)
            return 0; 
        if(t[n]!=-1)
            return t[n];
            int include=nums[n-1]+houserob(nums,n-2);
        int exclude=houserob(nums,n-1);
        return t[n]=max(include,exclude);
    }
    int rob(vector<int>& nums) {
        int n=nums.size();
        memset(t,-1,sizeof(t));
        return houserob(nums,n);
    }
};

////////////////////////////////////////////////
bottom up dp
class Solution {
public:
    
    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n+1,0);//dp[i]=maximum money with i houses
        dp[1]=nums[0];//if only one house is there then you have to steal from that house only 
        for(int i=2;i<=n;i++){
            dp[i]=max(nums[i-1]+dp[i-2],dp[i-1]);
        }
        return dp[n];
    }
};
