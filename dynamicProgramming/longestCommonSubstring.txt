Given two strings. The task is to find the length of the longest common substring.


Example 1:

Input: S1 = "ABCDGH", S2 = "ACDGHR"
Output: 4
Explanation: The longest common substring
is "CDGH" which has length 4.
Example 2:

Input: S1 = "ABC", S2 "ACB"
Output: 1
Explanation: The longest common substrings
are "A", "B", "C" all having length 1.

Your Task:
You don't need to read input or print anything. Your task is to complete the function longestCommonSubstr() which takes the string S1, string S2 and their length n and m as inputs and returns the length of the longest common substring in S1 and S2.


Expected Time Complexity: O(n*m).
Expected Auxiliary Space: O(n*m).


Constraints:
1<=n, m<=1000



Brute force approach is to comsider all the substrings and check maxlength of matching 



Recursive approach :

since every letter can contribute or doesn't to longest common substring thus choices to be considered so we follow recursion 


int maxlen=0;int len=0;
    int lcs(string s1,string s2,int n,int m){
        if(m<0 || n<0)//as no furthur common
        {
            maxlen=max(maxlen,len);
            len=0;
            return 0;
        }
        if(s1[n]==s2[m])//one character matches
        {
            len+=1;//increase the length by one 
            return lcs(s1,s2,n-1,m-1);
        }
        else//if breakage comes then we need to consider new substring
        {
            maxlen=max(maxlen,len);//find out maxlength till now 
            len=0;//made as 0 since now we are going to consider new substring 
            return max(lcs(s1,s2,n-1,m),lcs(s1,s2,n,m-1));
        }
        
    }
    int longestCommonSubstr(string s1, string s2, int n, int m)
    {
        // your code here
        lcs(s1,s2,n-1,m-1);
        return maxlen;
    }


TC:O(2^max(n,m))

Bottom up DP:

converting our recursive code to iterative :



int longestCommonSubstr(string s1, string s2, int n, int m)
    {
        // your code here
        int maxlen=0;
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int i=0;i<=n;i++)
        dp[i][0]=0;//if either of them is 0 then nothing common
        for(int j=0;j<=m;j++)
        dp[0][j]=0;//if either of them is 0 then nothing common
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++){
                if(s1[i-1]!=s2[j-1])//breakage
                  dp[i][j]=0;
                
                else if(s1[i-1]==s2[j-1]){
                       dp[i][j]=1+dp[i-1][j-1]; 
                    maxlen=max(maxlen,dp[i][j]);
                   }
                }
            }
        
        return maxlen;
    }


    
