
Leetcode 303-


Given an integer array nums, find the sum of the elements between indices left and right inclusive, where (left <= right).

Implement the NumArray class:

NumArray(int[] nums) initializes the object with the integer array nums.
int sumRange(int left, int right) returns the sum of the elements of the nums array in the range [left, right] inclusive (i.e., sum(nums[left], nums[left + 1], ... , nums[right])).
 

Example 1:

Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]

Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)
numArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) 
numArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))
 

Constraints:

1 <= nums.length <= 104
-105 <= nums[i] <= 105
0 <= left <= right < nums.length
At most 104 calls will be made to sumRange.



Brute force :

solution that I can think of initially is that -
just sum elements from index left to right .
linear approach 

class NumArray {
public:
    vector<int>numss;
    NumArray(vector<int>& nums) {
        numss=nums;
    }
    
    int sumRange(int left, int right) {
        int sum=0;
        for(int i=left;i<=right;i++){
            sum+=numss[i];
        }
        return sum;
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * int param_1 = obj->sumRange(left,right);
 */






efficient approach:


class NumArray {
public:
  vector<int>dp;
    NumArray(vector<int>& nums) {
        vector<int>dpp(nums.size(),0);
        dp=dpp;
        dp[0]=nums[0];
        for(int i=1;i<nums.size();i++){
            dp[i]=dp[i-1]+nums[i];
        }
    }
    int sumRange(int left, int right) {
        if(left>=1)
        return dp[right]-dp[left-1];
        else
        return dp[right];
    }
};

OR   

based on taking cumulative sum
class NumArray {
public:
  vector<int>dp;
    NumArray(vector<int>& nums) {
        int sum=0;
        for(int i=0;i<nums.size();i++){
           sum+=nums[i];
            dp.push_back(sum);
        }
    }
    int sumRange(int left, int right) {
        if(left>=1)
        return dp[right]-dp[left-1];
        else
        return dp[right];
    }
};

