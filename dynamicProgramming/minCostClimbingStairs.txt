On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).

Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.

Example 1:

Input: cost = [10, 15, 20]
Output: 15
Explanation: Cheapest is start on cost[1], pay that cost and go to the top.
Example 2:

Input: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
Output: 6
Explanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].
Note:

cost will have a length in the range [2, 1000].
Every cost[i] will be an integer in the range [0, 999].



recursive approach:



class Solution {
public:
    int recur(vector<int>&cost,int i,int n){
        if(i>=n)
            return 0;
        if(i==n-1)//base case
            return cost[i];
        //either take one step or take two steps and finally we choose its minimum 
       return cost[i]+min(recur(cost,i+1,n),recur(cost,i+2,n));
    }
    int minCostClimbingStairs(vector<int>& cost) {
        int start=0;int n=cost.size();
       return  min(recur(cost,0,n),recur(cost,1,n));//as we can start from either first or second staircase
    }
};


TC:O(2^n)
gives TLE


recursion with memoization:

we see that only one variable is there thus we need to make 1D vector to store values 


TC:from exponential to linear 
=O(n)

class Solution {
public:
    int recur(vector<int>&cost,int i,int n,vector<int>&dp){
        if(i>=n)
            return 0;
        if(i==n-1)
            return cost[i];
        if(dp[i]!=-1)
            return dp[i];
        //either take one step or take two steps 
       return dp[i]=cost[i]+min(recur(cost,i+1,n,dp),recur(cost,i+2,n,dp));
    }
    int minCostClimbingStairs(vector<int>& cost) {
        int start=0;int n=cost.size();
        vector<int>dp(n,-1);
       return  min(recur(cost,0,n,dp),recur(cost,1,n,dp));
    }
};

////////////////////////////////////////////////////

bottom up DP:


tabular method:

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int start=0;int n=cost.size();
        vector<int>dp(n,-1);
        dp[0]=cost[0];dp[1]=cost[1];
        for(int i=2;i<n;i++)
        {
          dp[i]=cost[i]+min(dp[i-1],dp[i-2]); 
        }
       return  min(dp[n-1],dp[n-2]);
    }
};

TC:O(n)
SC:O(n)




efficient method: SC:O(1)


class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int start=0;int n=cost.size();
        int first=cost[0];int second=cost[1];
        for(int i=2;i<n;i++)
        {
          int curr=cost[i]+min(first,second);
          first=second;
          second= curr
        }
       return  min(first,second);
    }
};

