Leetcode 801


We have two integer sequences A and B of the same non-zero length.

We are allowed to swap elements A[i] and B[i].  Note that both elements are in the same index position in their respective sequences.

At the end of some number of swaps, A and B are both strictly increasing.  (A sequence is strictly increasing if and only if A[0] < A[1] < A[2] < ... < A[A.length - 1].)

Given A and B, return the minimum number of swaps to make both sequences strictly increasing.  It is guaranteed that the given input always makes it possible.

Example:
Input: A = [1,3,5,4], B = [1,2,3,7]
Output: 1
Explanation: 
Swap A[3] and B[3].  Then the sequences are:
A = [1, 3, 5, 7] and B = [1, 2, 3, 4]
which are both strictly increasing.
Note:

A, B are arrays with the same length, and that length will be in the range [1, 1000].
A[i], B[i] are integer values in the range [0, 2000].



recursive approach:


class Solution {
public:
    
    int recur(vector<int>a,vector<int>b,int i,int preva,int prevb){
        if(i>=a.size())
            return 0;
        int minSwap=INT_MAX;
         if(a[i]>preva && b[i]>prevb)//no swap needed as already increasing
             minSwap=recur(a,b,i+1,a[i],b[i]);
        if(a[i]>prevb && b[i]>preva)//swap
            minSwap=min(1+recur(a,b,i+1,b[i],a[i]),minSwap);
        return minSwap;
    }
    int minSwap(vector<int>& a, vector<int>& b) {
        return recur(a,b,0,-1,-1);
    }
};



TC:O(2^n)



recursion with memoization:


swapped variable to denote whether we've swapped or not 

class Solution {
public:
    
    int recur(vector<int>a,vector<int>b,int i,int preva,int prevb,int swapped,vector<vector<int>>&dp){
        if(i>=a.size())
            return 0;
        if(dp[i][swapped]!=-1)
            return dp[i][swapped];
        int minSwap=INT_MAX;
         if(a[i]>preva && b[i]>prevb)//no swap needed
             minSwap=recur(a,b,i+1,a[i],b[i],0,dp);
        if(a[i]>prevb && b[i]>preva)//swap
            minSwap=min(1+recur(a,b,i+1,b[i],a[i],1,dp),minSwap);
        return dp[i][swapped]=minSwap;
    }
    int minSwap(vector<int>& a, vector<int>& b) {
        vector<vector<int>>dp(a.size(),vector<int>(2,-1));
        return recur(a,b,0,-1,-1,0,dp);
    }
};


TC:O(n*2 )=O(n)



Bottom up dp:




