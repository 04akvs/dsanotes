Leetcode 174-


The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.

The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.

Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).

To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.

Return the knight's minimum initial health so that he can rescue the princess.

Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.

 

Example 1:


Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]
Output: 7
Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.
Example 2:

Input: dungeon = [[0]]
Output: 1
 

Constraints:

m == dungeon.length
n == dungeon[i].length
1 <= m, n <= 200
-1000 <= dungeon[i][j] <= 1000


- We will implement a recursive approach starting from the top left
	- In each of the recursive call
		- We will move downward or rightward
			- We will pick the choice that will give us the least amount of hp
		- In order to stay at the current cell at 'r,c'
			- The minimum health needs to be 'min health of going rightward or downward - dungeon[r][c]'
			- We should note that if min health goes below 0
				- We have to default the min health to 1

 int recur(vector<vector<int>>& grid,int i,int j,int m,int n,vector<vector<int>>&dp){
     if(i>=m || j>=n)
        return 100000000;
        if(i==m-1 && j==n-1){
              return max(1,1-grid[i][j]);//for eg :grid[i][j] is +ve then 1-3 else 1+3 thus 4 
            
        }
        if(dp[i][j]!=-1)
            return dp[i][j];
        int right=recur(grid,i,j+1,m,n,dp);
        int down=recur(grid,i+1,j,m,n,dp);
        //he will choose the path giving him minimum 
        int minHealth=min(right,down)-grid[i][j];
        return dp[i][j]=max(1,minHealth);//as negative value will get added 
    }
    
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m=dungeon.size();int n=dungeon[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return recur(dungeon,0,0,m,n,dp);
           
    }



Bottom up approach :



 int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int rows=dungeon.size();
        if(rows==0)
            return 0;
        int cols=dungeon[0].size();
        vector<vector<int> > dp(rows,vector<int> (cols,0));
        dp[rows-1][cols-1]=max(1,1-dungeon[rows-1][cols-1]);
        
        for(int i=rows-2;i>=0;i--){
            dp[i][cols-1]=max(dp[i+1][cols-1]-dungeon[i][cols-1],1);
        }
        for(int i=cols-2;i>=0;i--){
            dp[rows-1][i]=max(dp[rows-1][i+1]-dungeon[rows-1][i],1);
        }
        
        for(int i=rows-2;i>=0;i--){
            for(int j=cols-2;j>=0;j--){
                int val1=max(dp[i+1][j]-dungeon[i][j],1);
                int val2=max(dp[i][j+1]-dungeon[i][j],1);
                dp[i][j]=min(val1,val2);
            }
        }
        return dp[0][0];
    }

    