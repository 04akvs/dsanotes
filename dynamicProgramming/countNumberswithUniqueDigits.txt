Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.

 

Example 1:

Input: n = 2
Output: 91
Explanation: The answer should be the total numbers in the range of 0 â‰¤ x < 100, excluding 11,22,33,44,55,66,77,88,99
Example 2:

Input: n = 0
Output: 1
 

Constraints:

0 <= n <= 8


basic brute force approach that comes to my mind :


class Solution {
public:
    
    void countb(int n,int &count){
        for(int i=11;i<n;i++){
            int temp=i;unordered_set<int>s;
            int size=0;
            while(temp>0){
            s.insert(temp%10);
                size++;
                temp=temp/10;
            }
            if(s.size()==size)
                count++;
        }
    }
    int countNumbersWithUniqueDigits(int n) {
        if(n==0)
            return 1;
        if(n==1)
            return 10;
        n=pow(10,n);
        int count=11;//as numbers from 0 to 10 are unique only 
        countb(n,count);
        return count;
        
    }
};

where n is 10^n
TC:O(n*sizeof(n))


gives TLE from 10^5



better approach :


difficult for me to understand it yet 