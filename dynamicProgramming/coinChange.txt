You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 

Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1
Example 2:

Input: coins = [2], amount = 3
Output: -1

brute force: recursive approach 
class Solution {
public:
    int minCoin(vector<int>&coins,int amount,int n)
    {
        if(amount==0)
            return 0;
        if(n==0)
            return INT_MAX;
        if(coins[n-1]<=amount)
        {
           return min(1+minCoin(coins,amount-coins[n-1],n),minCoin(coins,amount,n-1));
        }
        else
            return minCoin(coins,amount,n-1);
    }
    int coinChange(vector<int>& coins, int amount) {
        
      int n=coins.size();
         int res=minCoin(coins,amount,n);
        return  res==INT_MAX?-1:res;
    }
};
TC:O(2^n)
no extra data structure used therefire O(1) extra space 
/////////////////////////------------------------///////////////////
but we need to optimise the time complexity so that we do not blindly call recursion 
thus we use 
memoization with recursion top down approach 





class Solution {
public:
    int minCoins(vector<int>&coins,int amount,int index,vector<vector<int> >&dp)
    {
        if(dp[index][amount]!=-1)
            return dp[index][amount];
        if(index>=coins.size())
            return 10005;
        if(amount==0)
            return 0;
        
        if(coins[index]<=amount)//we have two choices take it or don't 
        {
           int include=1+minCoins(coins,amount-coins[index],index,dp);
           int exclude=minCoins(coins,amount,index+1,dp);
            return dp[index][amount]=min(include,exclude);
        }
        else
            return dp[index][amount]=minCoins(coins,amount,index+1,dp);
        
    }
    int coinChange(vector<int>& coins, int amount) {
        //we have option to either choose any coin or reject that
        int n=coins.size();
        vector<vector<int> >dp(coins.size()+5,vector<int>(amount+5,-1));
        for(int i=0;i<=n;i++)
            dp[i][0]=0;
        int answer=minCoins(coins,amount,0,dp);
        return answer==10005?-1:answer;
    }
};


////////////////////-----------------/////////////
Bottom up approach : tc:O(n*amount)
sc:O(n*amount)
same like memoization except the fact that n--->i
      amount ---->j
class Solution {
public:
    //bottom up dp 
   int coinChange(vector<int>& coins, int amount) {
        
      int n=coins.size();
        int dp[n+1][amount+1];
        for(int i=0;i<n+1;i++)
            dp[i][0] = 0;

        for(int j=0;j<amount+1;j++)
            dp[0][j] = INT_MAX-1;//as else it will cause integer overflow for cases when no combo makes up the amount eg:[2]
 //amount is 3
        for(int i=1;i<n+1;i++){
            for(int j=1;j<amount+1;j++){
                if(coins[i-1] > j) dp[i][j] = dp[i-1][j];
                else dp[i][j] =min(dp[i-1][j], 1+dp[i][j-coins[i-1]]);
            }
        } 
        return dp[n][amount]==INT_MAX-1?-1:dp[n][amount];
    }
};


