Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.

Approach similar to LIS:



Recursive approach:

of finding just the length of LDS-
class Solution {
public:
    int lis(vector<int>&nums,int curr,int prev){
        if(curr==nums.size())
            return 0;
        int include=0;int exclude=0;
        if(prev==-1 || (nums[curr]%nums[prev]==0 || nums[prev]%nums[curr]==0))
           include= 1+lis(nums,curr+1,curr);
        exclude=lis(nums,curr+1,prev);
        return max(include,exclude);
    }


    Bottom up:

    vector<int> largestDivisibleSubset(vector<int>& nums) {
        
        int n=nums.size(); sort(nums.begin(),nums.end());
        // cout<<lis(nums,0,-1);
        vector<int>dp(n,1);int ans=INT_MIN;int index=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j]==0 && dp[i]<dp[j]+1)
                {
                    dp[i]=dp[j]+1;
                    if(dp[i]>ans){
                        index=i;
                        ans=dp[i];
                    }
            }
            }
            ans=max(ans,dp[i]);
        }
           vector<int>lds(ans,0);
            lds[ans-1]=nums[index];
            int anss=ans-1;
            for(int i=index-1;i>=0;i--){
            if(dp[i]==anss && (lds[anss]%nums[i]==0)){
                lds[anss-1]=nums[i];
                anss--;
            }
        }
        return lds;
    }
};



TC:O(n*n)

