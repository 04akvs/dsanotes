Leetcode 279


Given an integer n, return the least number of perfect square numbers that sum to n.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

 

Example 1:

Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.
Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.
 

Constraints:

1 <= n <= 104

Recursion method :

class Solution {
public:
    int perfect(int n){
        if(n<=3)
            return n;
        int minN=INT_MAX;
       for(int i=1;i*i<=n;i++){
           minN=min(minN,perfect(n-i*i)+1);
       }
        return minN;
    }
    int numSquares(int n) {
        return perfect(n);
    }
};

Top down -



class Solution {
public:
    int perfect(int n,vector<int>&dp){
        if(n==0)
            return 0;
        if(dp[n]!=-1)
            return dp[n];
        int minN=INT_MAX;
       for(int i=1;i*i<=n;i++){
           minN=min(minN,perfect(n-i*i,dp)+1);
       }
        return dp[n]=minN;
    }
    int numSquares(int n) {
        vector<int>dp(n+1,-1);
        return perfect(n,dp);
    }
};





Bottom Up /Tabulation Method 

class Solution {
public:
    
    int numSquares(int n) {
        vector<int>dp(n+1,0);
        for(int i=1;i<=n;i++){
            dp[i]=i;//as maximum number of perfect squqres that sum upto n is n (1*1+1*1----)
            for(int j=1;j*j<=i;j++){
                dp[i]=min(dp[i],1+dp[i-j*j]);
            }
        }
        return dp[n];
    }
};


TC:O(n*sqrt(n))


