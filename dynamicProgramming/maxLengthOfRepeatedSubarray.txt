Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.

 

Example 1:

Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]
Output: 3
Explanation: The repeated subarray with maximum length is [3,2,1].
Example 2:

Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]
Output: 5
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 100


 Make dp MxN matrix. (M,N are lengths of both strings)
Mark first row and first column as 0 for all.
Start from first char of s and match with every char of t, do this for all chars of S.
If char of S[i] matches with char of T[j] then we have found a common char that can contribute to our ans, so just copy the previous answers from both strings without the current char (if strings are abcde and abcdlkjlk and you are at 'd' so we check what was the previous answer before coming to d, and we add 1 to the previous ans). The max val till now is the ans.
If chars dont match, put dp[i][j]=0;

class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        int n1=nums1.size();int n2=nums2.size();
        vector<vector<int>>dp(n1+1,vector<int>(n2+1,0));
        int maxlen=0;
        //if its include either include it or don't include it 
        for(int i=1;i<=n1;i++){
            for(int j=1;j<=n2;j++){
                if(nums1[i-1]==nums2[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                    maxlen=max(maxlen,dp[i][j]);
                }
                else
                    dp[i][j]=0;
            }
        }
        return maxlen;
    }
};

TC:O(n1*n2)
SC:O(n1*n2)


