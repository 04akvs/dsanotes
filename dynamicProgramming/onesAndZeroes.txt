You are given an array of binary strings strs and two integers m and n.

Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.

A set x is a subset of a set y if all elements of x are also elements of y.

 

Example 1:

Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
{"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.
Example 2:

Input: strs = ["10","0","1"], m = 1, n = 1
Output: 2
Explanation: The largest subset is {"0", "1"}, so the answer is 2.
 

Constraints:

1 <= strs.length <= 600
1 <= strs[i].length <= 100
strs[i] consists only of digits '0' and '1'.
1 <= m, n <= 100


recursive soltuion:
as for every string we have a choice to either include it or exclude it to see we get optimal answer 


class Solution {
public:
    int recur(vector<pair<int,int>>&v,int i,int m,int n){
        if(i==v.size() || (m==0 && n==0))//we reached end and no more to choose 
            return 0;
        if(v[i].first>n || v[i].second>m){//we can't choose it as atmost is the limit 
            return recur(v,i+1,m,n);
        }
        //now for every string we have a choice to either include or exclude it to get maximum length
        int include=1+recur(v,i+1,m-v[i].second,n-v[i].first);
        int exclude=recur(v,i+1,m,n);
        return max(include,exclude);
    }
    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<pair<int,int>>v;
        //for every string count the number of zeroes and ones in it 
        for(int i=0;i<strs.size();i++){
            int ones=0;int zeroes=0;
            for(int j=0;j<strs[i].size();j++){
                if(strs[i][j]=='1')
                    ones++;
                else
                    zeroes++;
            }
            v.push_back({ones,zeroes});
        }
        int ans=recur(v,0,m,n);
        return ans;
    }
};



TC:O(2^n)

TLE










class Solution {
public:
    //now we'll memoize to avoid recalculating 
    //we see that in our code ,three variables are changing thus we need to make a 3D array
    int dp[601][101][101];
    int recur(vector<pair<int,int>>&v,int i,int m,int n){
        if(i==v.size() || (m==0 && n==0))//we reached end and no more to choose 
            return 0;
        if(v[i].first>n || v[i].second>m){//we can't choose it as atmost is the limit 
            return recur(v,i+1,m,n);
        }
        if(dp[i][m][n]!=-1)
            return dp[i][m][n];
        //now for every string we have a choice to either include or exclude it to get maximum length
        int include=1+recur(v,i+1,m-v[i].second,n-v[i].first);
        int exclude=recur(v,i+1,m,n);
        return dp[i][m][n]=max(include,exclude);
    }
    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<pair<int,int>>v;
        memset(dp,-1,sizeof(dp));
        //for every string count the number of zeroes and ones in it 
        for(int i=0;i<strs.size();i++){
            int ones=0;int zeroes=0;
            for(int j=0;j<strs[i].size();j++){
                if(strs[i][j]=='1')
                    ones++;
                else
                    zeroes++;
            }
            v.push_back({ones,zeroes});
        }
        int ans=recur(v,0,m,n);
        return ans;
    }
};

TC:O(n*m*l)


Bottom UP approach left 