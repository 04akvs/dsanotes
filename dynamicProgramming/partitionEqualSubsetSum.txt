recursive solution:
class Solution {
public:
    bool subset(vector<int>&nums,int n,int sum)
    {
        if(n==0 && sum>0)
            return false;
        if(sum==0)
            return true;
        if(nums[n-1]>sum)
            return subset(nums,n-1,sum);
        else 
            return subset(nums,n-1,sum-nums[n-1]) || subset(nums,n-1,sum);
    }
    bool equal(vector<int>&nums,int n,int sum)
    {
        if(sum%2==1)
            return false;
        else
            return subset(nums,n,sum/2);
    }
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(int i=0;i<nums.size();i++)
            sum+=nums[i];
        int n=nums.size();
        return equal(nums,n,sum);
    }
};

TC:O(2^n)
SC:no extra space for storing values
//////////////////////////////------------------------///////////////
Memoization with recursion :

we store up results in order to avoid blindly calling recursion 
////////////////////----------------------////////////////
Bottom up:Dp based approach 
TC:O(n*sum)
SC:O(n*sum)
int equalPartition(int n, int arr[])
    {
        // code here
        int sum=0;
       for(int i=0;i<n;i++)
       {
           sum+=arr[i];
       }
       if(sum%2==1)
       return false;
      bool t[n+1][sum/2+1];
      for(int i=0;i<n+1;i++)
      {
          t[i][0]=true;
      }
      for(int j=0;j<sum/2+1;j++)
      t[0][j]=false;
      for(int i=1;i<n+1;i++)
      {
          for(int j=1;j<sum/2+1;j++)
          {
              if(arr[i-1]<=j)
              t[i][j]=t[i-1][j-arr[i-1]] || t[i-1][j];
              else
              t[i][j]=t[i-1][j];
          }
      }
      return t[n][sum/2];
    }