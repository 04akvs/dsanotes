Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.

Example 1:

Input: [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.


Brute Force:TC-O(N*N)
find all contagious subarrays and find each ka product 
for(int i=0;i<n;i++)
{
    int pro=1;
    for(int j=i;j<n;j++)
    {
        pro=pro*arr[j];
        maxp=max(maxp,pro);
    }
}
return maxp;
}


Better Approach: Similar to kadane's algorithm
TC:O(N) 
SC:O(1)
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int  maxSoFar=nums[0];int minSoFar=nums[0];
        int n=nums.size();int globalMax=nums[0];
            if(n==0)
            return 0;
        for(int i=1;i<nums.size();i++)
        {
            int tempmax=maxSoFar;
            maxSoFar=max(nums[i],max(maxSoFar*nums[i],nums[i]*minSoFar));
            minSoFar=min(nums[i],min(tempmax*nums[i],nums[i]*minSoFar));
            if(maxSoFar>globalMax)
                globalMax=maxSoFar;
        }
        return globalMax;
    }
};
