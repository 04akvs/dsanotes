Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we don't need any insertions.
Example 2:

Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".
Example 3:

Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".
Example 4:

Input: s = "g"
Output: 0
Example 5:

Input: s = "no"
Output: 1
 

Constraints:

1 <= s.length <= 500
All characters of s are lower case English letters.

using longest common subsequence method :

class Solution {
public:
    int minInsertions(string s) {
        int n=s.size();string rev="";
        for(int i=0;i<n;i++)
            rev=s[i]+rev;
       //or we can find LPS by LCS of s & its reverse 
        vector<vector<int>>dp(n+1,vector<int>(n+1,0));
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(s[i-1]==rev[j-1]){
                   dp[i][j]=1+dp[i-1][j-1];
                    }
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
          }
        return n-dp[n][n];
    }
};

using longest palindromic subsequence method:

class Solution {
public:
    int minInsertions(string s) {
        int n=s.size();
        //find the length of lonest palindromic subsequence 
        //we need to insert n-LPS to make whole string palindromic
        vector<vector<int>>dp(n,vector<int>(n,0));
        for(int i=0;i<n;i++)
            dp[i][i]=1;//single character is always a palindrome
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i+1;j<n;j++)
            {
                if(s[i]==s[j]){
                   dp[i][j]=2+dp[i+1][j-1];
                    }
                else
                    dp[i][j]=max(dp[i+1][j],dp[i][j-1]);
                }
          }
        return n-dp[0][n-1];
    }
};






TC:O(n*n)

