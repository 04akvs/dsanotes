Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:

Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum underlined below:
[[2,1,3],      [[2,1,3],
 [6,5,4],       [6,5,4],
 [7,8,9]]       [7,8,9]]
Example 2:

Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is underlined below:
[[-19,57],
 [-40,-5]]
Example 3:

Input: matrix = [[-48]]
Output: -48
 

Constraints:

n == matrix.length
n == matrix[i].length
1 <= n <= 100
-100 <= matrix[i][j] <= 100



Recursive approach :

class Solution {
public:
    int path(vector<vector<int>>&matrix,int i,int j,int n){
        if(i==n)//last row reached too
            return 0;
        if(j>=n || j<0)
            return 1000;
       return matrix[i][j]+min(min(path(matrix,i+1,j,n),path(matrix,i+1,j+1,n)),path(matrix,i+1,j-1,n));
        
        
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        //starts at any element in the first row 
        int n=matrix.size();
        int ans=INT_MAX;
        for(int j=0;j<n;j++)
        {
            ans=min(ans,path(matrix,0,j,n));
        }
        return ans;
    }
};



recursion with memoization:

class Solution {
public:
    int path(vector<vector<int>>&matrix,int i,int j,int n, vector<vector<int>>&dp){
        if(i==n)//last row reached too
            return 0;
        if(i>n || j>=n || i<0 || j<0)
            return 1000;
        if(dp[i][j]!=-1)
            return dp[i][j];
       return dp[i][j]=matrix[i][j]+min(min(path(matrix,i+1,j,n,dp),path(matrix,i+1,j+1,n,dp)),path(matrix,i+1,j-1,n,dp));
        
        
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        //starts at any element in the first row 
        int n=matrix.size();
        int ans=INT_MAX;
         vector<vector<int>>dp(n,vector<int>(n,-1));
        for(int j=0;j<n;j++)
        {
            ans=min(ans,path(matrix,0,j,n,dp));
        }
        return ans;
    }
};



bottom up approach :



class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& A) {
        //starts at any element in the first row 
        int n=A.size();
        int ans=INT_MAX;
         vector<vector<int>>dp(n,vector<int>(n,INT_MAX));
        for(int i=0;i<A.size();i++){//in first row cost 
        dp[0][i] = A[0][i];
    }
        for(int i=1;i<A.size();i++){
        for(int j=0;j<A.size();j++){
            if(j>0 and j<A.size()-1){
                dp[i][j] = min(min(dp[i-1][j-1]+A[i][j],dp[i-1][j]+A[i][j]),dp[i-1][j+1]+A[i][j]);
            }
            else if(j==0){
                dp[i][j] = min(dp[i-1][j+1]+A[i][j],dp[i-1][j]+A[i][j]);
            }
            else if(j == A.size()-1){
                dp[i][j] = min(dp[i-1][j-1]+A[i][j],dp[i-1][j]+A[i][j]);
            }
        }
    }
        for(int j=0;j<n;j++)
        {
            ans=min(ans,dp[n-1][j]);//now we take the minimum cost spent to reach last row 
        }
        return ans;
    }
};



TC:O(n*n)
SC:O(n*n)
