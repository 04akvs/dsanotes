You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. Note that we have only one quantity of each item.
In other words, given two integer arrays val[0..N-1] and wt[0..N-1] which represent values and weights associated with N items respectively. Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. You cannot break an item, either pick the complete item, or donâ€™t pick it (0-1 property).
Input:
N = 3
W = 4
values[] = {1,2,3}
weight[] = {4,5,1}
Output: 3
Brute force: recursive solution to generate all possible subsets and their profits and then find the subset giving max profits
int knapSack(int W, int wt[], int val[], int n) 
{ 
   // Your code here
   if(n==0 || W==0)
   return 0;
   if(wt[n-1]<=W)//if the item has weight lesser then we have two choices -either include or don't include and take the maximum result out of these two choices 
   {
       return max(val[n-1]+knapSack(W-wt[n-1],wt,val,n-1),knapSack(W,wt,val,n-1));
   }
   else //if weight of that item is lesser than we do not have any other choice except to exclud it 
   return knapSack(W,wt,val,n-1);
}
TC:O(2^n) as for every item subsets are generated
auxillary space complexity :o(1) as no extra data structure has been used to store values
though recursion uses stack space which has high chance to cause over flow 
///////////////////////////////////////////////////////////////
better solution with optimized time complexity 
called as memoization+recursion
in this , instead of calling recursion blindly for every value we see that whether that result has been already calculated if so then it saves our time 
we create a matrix of dimensions corresponding to the varying inputs here 
these are n and W 
thus int t[n+1][W+1]
fill initially it with -1 as then if some cell doesn't have -1 then we know that it has already been calculated




int knp(int W,int wt[],int val[],int n,int t[][W+1])
{
if(n==0 || W==0)
   return 0;
   if(t[n][W]!=-1)
   return t[n][W];
   if(wt[n-1]<=W)
   {
       t[n][W]=max(val[n-1]+knp(W-wt[n-1],wt,val,n-1,t),knp(W,wt,val,n-1,t));
   }
   else 
   t[n][W]= knp(W,wt,val,n-1,t);
   return t[n][W];

}
int knapSack(int W, int wt[], int val[], int n) 
{ 
   // Your code here
   int t[n+1][W+1];
   memset(t,-1,sizeof(t));
   return knp(W,wt,val,n,t);
   
}

TC:O(n*W)
sC:O(n*W)
but recursion always has chances to cause stack overflow thus we need to furthur optimise to avoid using recursion
we need to change recursive calls to iterative calls
here bottom up DP comes into play
int knapSack(int W, int wt[], int val[], int n) 
{ 
   // Your code here
   int t[n+1][W+1];//matrix of chancging values
   //i corresponds to n 
   // j corresponds to capacity W
  
   //change base case of recursion to initialization in DP
   for(int i=0;i<n+1;i++)
   {
       for(int j=0;j<W+1;j++)
       {
           if(i==0 || j==0)
           t[i][j]=0;
       }
   }
   //now change recursive calls to iterative
   for(int i=1;i<n+1;i++)
   {
       for(int j=1;j<W+1;j++)
       {
           if(wt[i-1]<=j)
           {
               t[i][j]=max(val[i-1]+t[i-1][j-wt[i-1]],t[i-1][j]);
           }
           else
           t[i][j]=t[i-1][j];
       }
   }
   return t[n][W];
   
}
TC:O(n*W)
SC:O(n*W)