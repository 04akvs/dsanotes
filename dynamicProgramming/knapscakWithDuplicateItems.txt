
Unbounded knapsack -
https://practice.geeksforgeeks.org/problems/knapsack-with-duplicate-items4201/1#


Given a set of N items, each with a weight and a value, and a weight limit W. Find the maximum value of a collection containing any of the N items any number of times so that the total weight is less than or equal to W.

 

Example 1:

Input: N = 2, W = 3
val[] = {1, 1}
wt[] = {2, 1}
Output: 3
Explaination: Pick the 2nd element thrice.
 

Example 2:

Input: N = 4, W = 8
val[] = {1, 4, 5, 7}
wt[] = {1, 3, 4, 5}
Output: 11
Explaination: The optimal choice is to 
pick the 2nd and 4th element.
 

Your Task:
You do not need to read input or print anything. Your task is to complete the function knapSack() which takes the values N, W and the arrays val[] and wt[] as input parameters and returns the maximum possible value.

 

Expected Time Complexity: O(N*W)
Expected Auxiliary Space: O(W)

 

Constraints:
1 ≤ N, W ≤ 1000
1 ≤ val[i], wt[i] ≤ 100


Recursion with memoization:


the only difference is that once an item is included it can be included again


int kpprofit(int val[],int wt[],int w,int n,vector<vector<int>>&dp){
    if(n==0 || w==0){
        return 0;//as no more profit can be made 
    }
    if(dp[n-1][w]!=-1)
    return dp[n-1][w];
    int inc=0;int exc=0;
    if(wt[n-1]<=w){//we can pick or exclude it
        inc=val[n-1]+kpprofit(val,wt,w-wt[n-1],n,dp);
        exc=kpprofit(val,wt,w,n-1,dp);
    }
     exc=kpprofit(val,wt,w,n-1,dp);
    return dp[n-1][w]=max(inc,exc);
}
    int knapSack(int n, int w, int val[], int wt[])
    {
        // code here
        vector<vector<int>>dp(n+1,vector<int>(w+1,-1));
        return kpprofit(val,wt,w,n,dp);
    }
};


TC:O(n*w)
SC:O(n*w)


Bottom Up:



 int knapSack(int n, int w, int val[], int wt[])
    {
        // code here
        vector<vector<int>>dp(n+1,vector<int>(w+1,0));
        for(int i=0;i<n+1;i++)
        dp[i][0]=0;
        for(int j=0;j<w+1;j++)
        dp[0][j]=0;
        for(int i=1;i<n+1;i++){
            for(int j=1;j<w+1;j++){
                if(wt[i-1]<=j){
                    dp[i][j]=max(val[i-1]+dp[i][j-wt[i-1]],dp[i-1][j]);
                }
                else
                dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][w];
    }


    TC:O(n*w)
    SC:O(n*w)



optimising space :

SC:O(w)


int knapSack(int n, int w, int val[], int wt[])
    {
        // code here
        vector<int>dp(w+1,0);
        for(int i=0;i<n;i++){
            for(int j=1;j<w+1;j++){
                if(wt[i]<=j){
                    dp[j]=max(val[i]+dp[j-wt[i]],dp[j]);
                }
            }
        }
        return dp[w];
    }


    