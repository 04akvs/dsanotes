
Leetcode 978:


Given an integer array arr, return the length of a maximum size turbulent subarray of arr.

A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

More formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:

For i <= k < j:
arr[k] > arr[k + 1] when k is odd, and
arr[k] < arr[k + 1] when k is even.
Or, for i <= k < j:
arr[k] > arr[k + 1] when k is even, and
arr[k] < arr[k + 1] when k is odd.
 

Example 1:

Input: arr = [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]
Example 2:

Input: arr = [4,8,12,16]
Output: 2
Example 3:

Input: arr = [100]
Output: 1
 

Constraints:

1 <= arr.length <= 4 * 104
0 <= arr[i] <= 109


class Solution {
public:
    int maxTurbulenceSize(vector<int>& arr) {
        if(arr.size()==1 || arr.size()==0)
            return arr.size();
        if(arr.size()==2 && arr[0]!=arr[1])
            return 2;
       int inc = 1, dec = 1, result = 1;
        for (int i = 1; i < arr.size(); i++) {
            if (arr[i] < arr[i - 1]) {
                dec = inc + 1;
                inc = 1;//alternate
            } else if (arr[i] > arr[i - 1]) {
                inc = dec + 1;
                dec = 1;//alternate
            } else {
                inc = 1;
                dec = 1;
            }
            result = max({result,inc,dec});
        }
        return result;
    }
};

/////////////////////////////////////////////////////////////////////////

class Solution {
public:
//     Thinking process:

// dp[i]: longest turbulent subarray ending at A[i]
// Defining two states: low to high transition and high to low transition.

// dp[i][0]: longest turbulent subarray ending at A[i] and A[i-1] < A[i] (low to high)
// dp[i][1]: longest turbulent subarray ending at A[i] and A[i-1] > A[i] (high to low)

// To increase the length there are couple of options:

// dp[i][0] = max(dp[i][0], 1 + dp[i - 1][1]); // prev state was [high to low] and we need to move from [low to high]
// dp[i][1] = max(dp[i][1], 1 + dp[i - 1][0]); // prev state was [low to high] and we need to move from [high to low]


    int maxTurbulenceSize(vector<int>& arr) {
        if(arr.size()==1 || arr.size()==0)
            return arr.size();
        if(arr.size()==2 && arr[0]!=arr[1])
            return 2;
       int n = arr.size();
        vector<vector<int>>dp(n, vector<int>(2, 1));
        
        int res = 1;
        for (int i = 1; i < n; i++) {
            if (arr[i] > arr[i-1])
                dp[i][0] = max(dp[i][0], 1 + dp[i-1][1]);
            else if (arr[i] < arr[i-1])
                dp[i][1] = max(dp[i][1], 1 + dp[i-1][0]);
            
            res = max(res, max(dp[i][0], dp[i][1]));
        }
        
        return res;
    }
};

