
Given a string of S as input. Your task is to write a program to remove or delete minimum number of characters from the string so that the resultant string is palindrome.

Note: The order of characters in the string should be maintained.

Input:
First line of input contains a single integer T which denotes the number of test cases. Then T test cases follows. First line of each test case contains a string S.

Output:
For each test case, print the deletions required to make the string palindrome.

Constraints:
1<=T<=100
1<=length(S)<=10000

Example:
Input:
2
aebcbda
geeksforgeeks
Output:
2
8
 
 what we can analyze that to make the whole string palindrome 
 first we need to know the subsequence which is already a palindrome 
 which can be found by lps method 
 lets say that lps length=5 while our string length is 7 
 that means ki 2 characters are there in the string which are preventing the entire string to be a palindrome 
 thus delete those two characters
  thus deletions=string length-lps length




#include <bits/stdc++.h>
using namespace std;

int main() {
	//code
	int t;cin>>t;
	while(t--)
	{
	string s;cin>>s;int n=s.size();

	string rev=s;
        reverse(rev.begin(),rev.end());
        int t[n+1][n+1];
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<n+1;j++)
            {
                if(i==0 ||j==0)
                    t[i][j]=0;
            }
        }
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<n+1;j++)
            {
                if(s[i-1]==rev[j-1])
                    t[i][j]=1+t[i-1][j-1];
                else
                    t[i][j]=max(t[i-1][j],t[i][j-1]);
            }
        }
       
	int lps=t[n][n];
	int deletions=s.size()-lps;
	cout<<deletions<<"\n";
	}
	
	return 0;
}