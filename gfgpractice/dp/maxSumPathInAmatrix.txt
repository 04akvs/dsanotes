Given a NxN matrix of positive integers. There are only three possible moves from a cell Matrix[r][c].

Matrix [r+1] [c]
Matrix [r+1] [c-1]
Matrix [r+1] [c+1]
â€‹Starting from any column in row 0, return the largest sum of any of the paths up to row N-1.


Example 1:

Input: N = 2
Matrix = {{348, 391},
          {618, 193}}
Output: 1009
Explaination: The best path is 391 -> 618. 
It gives the sum = 1009.

Example 2:

Input: N = 2
Matrix = {{2, 2},
          {2, 2}}
Output: 4
Explaination: No matter which path is 
chosen, the output is 4.

Your Task:
You do not need to read input or print anything. Your task is to complete the function maximumPath() which takes the size N and the Matrix as input parameters and returns the highest maximum path sum.


Expected Time Complexity: O(N*N)
Expected Auxiliary Space: O(N*N)


Constraints:
1 ≤ N ≤ 100
1 ≤ Matrix[i][j] ≤ 1000



class Solution{
public:
int path(vector<vector<int>>&grid,int i,int j,int n){
    if(i>=n || j>=n || i<0 || j<0)
    return INT_MIN;
    if(i==n-1)//we reached row
    return grid[i][j];
    return grid[i][j]+max(max(path(grid,i+1,j+1,n),path(grid,i+1,j-1,n)),path(grid,i+1,j,n));
}
    int maximumPath(int n, vector<vector<int>>grid)
    {
        // code here
        //we can start from any column from row 0
        int ans=0;
        for(int j=0;j<n;j++)
        {
            ans=max(ans,path(grid,0,j,n));
        }
        return ans;
    }
};

TC:O(3^n)



/////////////////////////////////////////////////////////////



recursion with memoization:




class Solution{
public:
int path(vector<vector<int>>&grid,int i,int j,int n,vector<vector<int>>&dp){
    if(i>=n || j>=n || i<0 || j<0)
    return INT_MIN;
    if(i==n-1)//we reached row
    return grid[i][j];
    if(dp[i][j]!=-1)
    return dp[i][j];
    return dp[i][j]=grid[i][j]+max(max(path(grid,i+1,j+1,n,dp),path(grid,i+1,j-1,n,dp)),path(grid,i+1,j,n,dp));
}
    int maximumPath(int n, vector<vector<int>>grid)
    {
        // code here
        //we can start from any column from row 0
        int ans=0;
        vector<vector<int>>dp(n,vector<int>(n,-1));
        for(int j=0;j<n;j++)//as we can start from any column 
        {
            ans=max(ans,path(grid,0,j,n,dp));
        }
        return ans;
    }
};


TC:O(n*n)
SC:O(n*n)



////////////////////////////////////



bottom up Dp:


int maximumPath(int n, vector<vector<int>>dp)
    {
        // code here
        //we can start from any column from row 0
        int ans=INT_MIN;
        //vector<vector<int>>dp(n,vector<int>(n,-1));
        for(int i=1;i<n;i++){
        for(int j=0;j<n;j++)
        {
            int a = INT_MIN , b = INT_MIN , c = INT_MIN ;
            a = dp[i-1][j];
           if( j >= 1 )b = dp[i-1][j-1];
           if( j < n-1 )c = dp[i-1][j+1];

            dp[i][j]+=max( {a , b , c });
        }
        }
        for(int j=0;j<n;j++){
            ans=max(ans,dp[n-1][j]);
        }
        return ans;
    }



    TC:O(n*n)


    