Given a number N. Find the minimum number of operations required to reach N starting from 0. You have 2 operations available:

Double the number
Add one to the number

Example 1:

Input:
N = 8
Output: 4
Explanation: 0 + 1 = 1, 1 + 1 = 2,
2 * 2 = 4, 4 * 2 = 8

â€‹Example 2:

Input: 
N = 7
Output: 5
Explanation: 0 + 1 = 1, 1 + 1 = 2,
1 + 2 = 3, 3 * 2 = 6, 6 + 1 = 7


greedy approach which i figured out after taking some examples
class Solution
{
  public:
    int minOperation(int n)
    {
        //code here.
               int start=n;
               int steps=n%2;
               start=n-n%2;//its always optimal to make it an even number as doubling is always will make req operations smaller and bring us closer to our target 
               while(start>1)
               {
                   if(start%2==0)
                  start=start/2;
                  else
                  start=start-1;
                  steps++;
               }
               steps+=start-0;
               return steps;
    }
};




/////////////


recursion as we have two ways to reach our target




int recur(int n)
  {
      if(n<=3)
      return n;
      if(n%2==0)
      return 1+recur(n/2);
      else
      return 1+1+recur(n/2);(as one step added due to make it to even first )
      
      
      
  }
    int minOperation(int n)
    {
        //code here.
       return recur(n);
              
    }

TC:exponential



//bottom up dp 


int minOperation(int n)
    {
        //code here.
       int dp[n+1];
       for(int i=0;i<=3;i++)
       {
           dp[i]=i;
       }
       for(int i=4;i<=n;i++)
       {
           if(i%2==0)
           dp[i]=dp[i/2]+1;
           else
           dp[i]=dp[i-1]+1;
       }
       return dp[n];
              
    }


    
