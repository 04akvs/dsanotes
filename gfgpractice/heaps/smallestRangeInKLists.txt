Given K sorted lists of integers of size N each, find the smallest range that includes at least one element from each of the K lists. If more than one such range's are found, find the first such range found.

Example 1:

Input:
N = 5, K = 3
KSortedArray[][] = {{1 3 5 7 9},
                    {0 2 4 6 8},
                    {2 3 5 7 11}}
Output: 1 2
Explanation: K = 3
A:[1 3 5 7 9]
B:[0 2 4 6 8]
C:[2 3 5 7 11]
Smallest range is formed by number 1
present in first list and 2 is present
in both 2nd and 3rd list.
Example 2:

Input:
N = 4, K = 3
KSortedArray[][] = {{1 2 3 4},
                    {5 6 7 8},
                    {9 10 11 12}}
Output: 4 9
Your Task :

Complete the function findSmallestRange() that receives array , array size n and k as parameters and returns the output range (as a pair in cpp and array of size 2 in java and python)

Expected Time Complexity : O(n * k *log k)
Expected Auxilliary Space  : O(k)

Constraints:
1 <= K,N <= 500


pair<int,int> findSmallestRange(int arr[][N], int n, int k)
{
      //code here
      //we need to have k pointers
      int ptr[k+1];
      for(int i=0;i<=k;i++)
      {
          ptr[i]=0;
      }
      bool flag=false;
      int minEle=0;int maxEle=0;int minRange=INT_MAX;
      int minIndex=-1;int minV=INT_MAX;int maxV=INT_MIN;
      while(1)//jab tak we don't reach end
      {
          minV=INT_MAX;
          maxV=INT_MIN;
          minIndex=-1;
          flag=false;
         for(int i=0;i<k;i++)
         {
         if(ptr[i]==n)
         {
             flag=true;
             break;
         }
         if(ptr[i]<n && arr[i][ptr[i]]<minV)
         {
             minV=arr[i][ptr[i]];
             minIndex=i;
         }
          if(ptr[i]<n && arr[i][ptr[i]]>maxV)
         {
             maxV=arr[i][ptr[i]];
           
         }
         }
         //now we got our min and max values 
         if(flag==true)
         break;
         ptr[minIndex]++;//as now ab we need to move uss row mein aage 
         if((maxV-minV)<minRange)
         {
             minEle=minV;
             maxEle=maxV;
             minRange=maxEle-minEle;
             
         }
         
      }
      return {minEle,maxEle};
}



