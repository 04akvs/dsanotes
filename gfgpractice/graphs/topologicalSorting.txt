Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u v,
 vertex u comes before v in the ordering. 
 Topological Sorting for a graph is not possible if the graph is not a DAG.

For example, a topological sorting of the following graph is “5 4 2 3 1 0”.
 There can be more than one topological sorting for a graph. 
 For example, another topological sorting of the following graph is “4 5 2 3 1 0”.
 The first vertex in topological sorting is always a vertex with in-degree as 0 (a vertex with no incoming edges).



 In topological sorting, we use a temporary stack.
We don’t print the vertex immediately, we first recursively call topological sorting for all its adjacent vertices,
then push it to a stack. 
 Finally, print contents of the stack.
Note that a vertex is pushed to stack only when all of its adjacent vertices (and their adjacent vertices and so on) are already in the stack. 






Given a Directed Graph with V vertices and E edges, Find any Topological Sorting of that Graph.


Example 1:

Input:

Output:
1
Explanation:
The output 1 denotes that the order is
valid. So, if you have, implemented
your function correctly, then output
would be 1 for all test cases.
One possible Topological order for the
graph is 3, 2, 1, 0.
Example 2:

Input:


Output:
1
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function topoSort()  which takes the integer V denoting the number of vertices and adjacency list as input parameters and returns an array consisting of a the vertices in Topological order. As there are multiple Topological orders possible, you may return any of them.


Expected Time Complexity: O(V + E).
Expected Auxiliary Space: O(V).


Constraints:
2 ≤ V ≤ 104
1 ≤ E ≤ (N*(N-1))/2


using DFS : 
we mainatin a temporary stack wherein we push the vertex after traversing all the adjacent vertices first 


void dfs(vector<int>adj[],int src,vector<bool>&visited,stack<int>&st){
	    if(visited[src])
	    return ;
	     visited[src]=true;
	    for(int i=0;i<adj[src].size();i++){
	        if(!visited[adj[src][i]]){
	            dfs(adj,adj[src][i],visited,st);
	        }
	    }
	    st.push(src);
	}
	vector<int> topoSort(int n, vector<int> adj[]) {
	    // code here
	    vector<int>ans;
	    vector<bool>visited(n,false);
	    stack<int>st;
	    for(int i=0;i<n;i++){
	        if(!visited[i])
	        dfs(adj,i,visited,st);
	    }
	    while(!st.empty()){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    return ans;
	}


TC:O(v+e)
SC:O(v)

Topological sorting is used mainly for scheduling jobs from the given dependencies among the jobs.



Kahn's algo for topological sorting :


based on the fact that -
A DAG G has at least one vertex with in-degree 0 and one vertex with out-degree 0.
Proof: There’s a simple proof to the above fact is that a DAG does not contain a cycle which means that all paths will be of finite length. Now let S be the longest path from u(source) to v(destination). Since S is the longest path there can be no incoming edge to u and no outgoing edge from v, if this situation had occurred then S would not have been the longest path
=> indegree(u) = 0 and outdegree(v) = 0

Algorithm: Steps involved in finding the topological ordering of a DAG:
Step-1: Compute in-degree (number of incoming edges) for each of the vertex present in the DAG and initialize the count of visited nodes as 0.

Step-2: Pick all the vertices with in-degree as 0 and add them into a queue (Enqueue operation)

Step-3: Remove a vertex from the queue (Dequeue operation) and then.

Increment count of visited nodes by 1.
Decrease in-degree by 1 for all its neighboring nodes.
If in-degree of a neighboring nodes is reduced to zero, then add it to the queue.
Step 5: Repeat Step 3 until the queue is empty.


Step 5: If count of visited nodes is not equal to the number of nodes in the graph then the topological sort is not possible for the given graph.

How to find in-degree of each node?
There are 2 ways to calculate in-degree of every vertex:

Take an in-degree array which will keep track of
Traverse the array of edges and simply increase the counter of the destination node by 1.
for each node in Nodes
    indegree[node] = 0;
for each edge(src, dest) in Edges
    indegree[dest]++
Time Complexity: O(V+E)

Traverse the list for every node and then increment the in-degree of all the nodes connected to it by 1.
    for each node in Nodes
        If (list[node].size()!=0) then
        for each dest in list
            indegree[dest]++;
Time Complexity: The outer for loop will be executed V number of times and the inner for loop will be executed E number of times, Thus overall time complexity is O(V+E).

The overall time complexity of the algorithm is O(V+E)




vector<int> topoSort(int n, vector<int> adj[]) {
	    // code here
	    vector<int>ans;
	    vector<int>indegree(n,0);
	    for(int i=0;i<n;i++){
	       for(int j=0;j<adj[i].size();j++)
	       {
	           indegree[adj[i][j]]++;
	       }
	    }
	    int count=0;
	    queue<int>q;
	    for(int i=0;i<n;i++)
	    {
	        if(indegree[i]==0) {
	            q.push(i);
	            
	        }
	    }
	    while(!q.empty()){
	       int src=q.front();
	       ans.push_back(src);
	       q.pop();
	       //now mark its adjacent 
	       for(int i=0;i<adj[src].size();i++){
	           indegree[adj[src][i]]--;
	           if(indegree[adj[src][i]]==0){
	               q.push(adj[src][i]);
	           }
	       }
	    }
	    return ans;
	}


    TC:O(v+e)
    sC:O(v)


    