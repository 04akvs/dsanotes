Given a non-negative integer(without leading zeroes) represented as an array A of N digits. Your task is to add 1 to the number (increment the number by 1). The digits are stored such that the most significant digit is at the starting index of the array.

Example 1:

Input:
N = 4
A[] = {5, 6, 7, 8}
Output: 5 6 7 9
Explanation: 5678 + 1 = 5679
Example 2:

Input:
N = 3
A[] = {9, 9, 9}
Output: 1 0 0 0
Explanation: 999 + 1 = 1000
Your Task:
You don't need to read input or print anything. Your task is to complete the function addOne() which takes the array of integers a and n as parameters and returns an list of integers denoting the answer.

 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N) for the list of integers used to store the returning result. 

Constraints:
1 ≤ N ≤ 105
0 ≤ A[i] ≤ 9
There are no leading zeros in the input number. 

class Solution{
public:
    vector<int> addOne(int a[], int n) {
        // code here
        int carry=1;vector<int>v(n,0);
        for(int i=n-1;i>=0;i--)
        {
            int digit=a[i];
            a[i]=a[i]+carry;
            carry=a[i]/10;
            a[i]=a[i]%10;
            v[i]=a[i];
        }
        if(carry)
        {
          v.insert(v.begin(),1);
          
        }
        return v;
    }
};
