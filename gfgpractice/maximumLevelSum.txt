Given a Binary Tree having positive and negative nodes. Find the maximum sum of a level in the given Binary Tree.

Example 1:

Input :               
             4
          /    \
         2     -5
        / \    / \
      -1   3  -2  6

Output: 6

Explanation :
Sum of all nodes of 0'th level is 4
Sum of all nodes of 1'th level is -3
Sum of all nodes of 2'th level is 6
Hence maximum sum is 6

Example 2:

Input :          
            1
          /   \
         2     3
        / \     \
       4   5     8
                / \
               6   7  

Output :  17

Explanation: Maximum sum is at level 2.

approach : based on level order traversal (iterative method)

int maxLevelSum(Node* root) {
    // Your code here
    if(root==NULL)
            return 0;
        //basically we neeed to do level order traversal & store the sum of all nodes at that level then compare with maxumlevel sum so far if its greater then update max level sum
        queue<Node*>q;
        q.push(root);
        
        int maxlevelsum=INT_MIN;
        while(!q.empty())
        {
            int sz=q.size();//number of nodes at that level
            int levelsum=0;//sum of nodes at that level
            while(sz--)
            {
                Node* temp=q.front();
                q.pop();
                levelsum+=temp->data;
                if(temp->left)
                {
                    q.push(temp->left);
                }
                if(temp->right)
                {
                    q.push(temp->right);
                }
            }
           
            if(levelsum>maxlevelsum)
            {
                maxlevelsum=levelsum;
               
            }
        }
        return maxlevelsum;
}


TC:O(n)
sc:O(n)



recursive method:


void levelWiseSum(map<int,int>&m,Node* root,int level)
{
    if(root==NULL)
    return ;
    m[level]+=root->data;//store sum of nodes at that level 
    levelWiseSum(m,root->left,level+1);//node's left child will be a level up
    levelWiseSum(m,root->right,level+1);//node's right child will be a level up
    
}
int maxLevelSum(Node* root) {
    // Your code here
    if(root==NULL)
            return 0;
        //basically we neeed to do level order traversal & store the sum of all nodes at that level then compare with maxumlevel sum so far if its greater than store the level 
      map<int,int>m;
       levelWiseSum(m,root,0);
        int maxlevelsum=INT_MIN;
        for(auto i:m)
           {
          if(i.second>maxlevelsum)
           maxlevelsum=i.second;
           }
         return maxlevelsum;
}


TC:O(n)
SC:O(n)
