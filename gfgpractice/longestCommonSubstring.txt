Given two strings X and Y. The task is to find the length of the longest common substring.

Input:
First line of the input contains number of test cases T. Each test case consist of three lines, first of which contains 2 space separated integers N and M denoting the size of string X and Y strings respectively. The next two lines contains the string X and Y.

Output:
For each test case print the length of longest  common substring of the two strings .

Constraints:
1 <= T <= 200
1 <= N, M <= 100

Example:
Input:
2
6 6
ABCDGH
ACDGHR
3 2
ABC
AC

Output:
4
1

Example:
Testcase 1: CDGH is the longest substring present in both of the strings.


Brute force:
int lcs(string x,string y,int n,int m,int count)
{
    if(n==0 || m==0)
    return count;
    if(x[n-1]==y[m-1])
    count=lcs(x,y,n-1,m-1,count+1);
    else
    count= max(max(lcs(x,y,n-1,m,0),lcs(x,y,n,m-1,0)),count);
    return count;
}
int main() {
	//code
	int t;cin>>t;
	while(t--)
	{
	    int n,m;cin>>n>>m;
	    string x,y;cin>>x>>y;int count=0;
	    cout<<lcs(x,y,n,m,count)<<"\n";
	    }
	return 0;
}
/////////////////////////////////////
#include <bits/stdc++.h>
using namespace std;
 

int main() {
	//code
	int t;cin>>t;
	while(t--)
	{
	    int n,m;cin>>n>>m;
	    string x,y;cin>>x>>y;int count=0;
	    int t[n+1][m+1];
	    for(int i=0;i<n+1;i++)
	    {
	        for(int j=0;j<m+1;j++)
	        {
	            if(i==0 || j==0)
	            t[i][j]=0;
	            else if(x[i-1]==y[j-1])
	            {
	                t[i][j]=1+t[i-1][j-1];count=max(count,t[i][j]);
	            }
	            else
	            t[i][j]=0;
	        }
	    }
	    cout<<count<<"\n";
	    }
	return 0;
}

