Given a string str, find the length of the longest substring without repeating characters. 

For “ABDEFGABEF”, the longest substring are “BDEFGA” and “DEFGAB”, with length 6.
For “BBBB” the longest substring is “B”, with length 1.
For “GEEKSFORGEEKS”, there are two longest substrings shown in the below diagrams, with length 7

Brute force method:
what we can do is find all substrings  which O(n*n) and then check which substrings have longest lengthh w/o repeating any characters in O(n)
 


#include <bits/stdc++.h>
using namespace std;
#define imp() ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define pb push_back
#define endl "\n"
#define lli long long int 
#define ll long long 

int main()
{
   imp();
    string str;cin>>str;int maxx=-2;
    int n=str.size();int c=0;
    for(int i=0;i<n;i++)
    {
        for(int j=i;j<n;j++)
        {
        vector<bool>visited(26);//to store whether that character is already visited 
        int c=0;//to store the count of length
            for(int k=i;k<=j;k++)//the substring found
            {
                if(visited[str[k]-'a']==false)//if unvisited
                {
                    c++;//increase the length count
                    visited[str[k]-'a']=true;//mark it as visited 
                }
                else
                {
                    maxx=max(c,maxx);//find the maximum of all 
                    
                }
                
                
            }
        }
    }
    cout<<"The length of longest substring w/o reapeating characters is ";
    cout<<maxx<<"\n";
   return 0;
}

TC:O(N*N*N)
SC:O(1) as a vector of constant size used


Method 2: window sliding technique is used 
in case of a repeating character , remove the leftmost charcter and continue 
#include <bits/stdc++.h>
using namespace std;

int main() {
	//code
	int t;cin>>t;
	while(t--)
	{
	   
	string str;cin>>str;int maxx=-2;
    int n=str.size();int c=0;
    for(int i=0;i<n;i++)
    {
        vector<bool>visited(26);
        int c=0;
        for(int j=i;j<n;j++)
        {
           if(visited[str[j]-'a']==false)
           {
               c++;
               visited[str[j]-'a']=true;
           }
           else
           {
               maxx=max(maxx,c);c=0;
           }
        }
         maxx=max(maxx,c);
        
    }
     
    cout<<maxx<<"\n";
	}
	return 0;
}

TC:O(N*N)
SC:O(1)
