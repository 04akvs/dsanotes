Given an array of integers and a number K. Find the count of distinct elements in every window of size K in the array.

Example 1:

Input:
N = 7, K = 4
A[] = {1,2,1,3,4,2,3}
Output: 3 4 4 3
Explanation: Window 1 of size k = 4 is
1 2 1 3. Number of distinct elements in
this window are 3. 
Window 2 of size k = 4 is 2 1 3 4. Number
of distinct elements in this window are 4.
Window 3 of size k = 4 is 1 3 4 2. Number
of distinct elements in this window are 4.
Window 4 of size k = 4 is 3 4 2 3. Number
of distinct elements in this window are 3.
Example 2:

Input:
N = 3, K = 2
A[] = {4,1,1}
Output: 2 1
Your Task:
Your task is to complete the function countDistinct() which takes the array A[], the size of the array(N) and the window size(K) as inputs and returns an array containing the count of distinct elements in every contiguous window of size K in the array A[].

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= N <= K <= 105
1 <= A[i] <= 105 , for each valid i




brute force : is to run a nested loop for taking in  every possible window of size K


vector <int> countDistinct (int arr[], int n, int k)
{
    //code here.
    unordered_set<int>s;
    vector<int>v;
    for(int i=0;i<=n-k;i++)
    {
       for(int j=i;j<i+k;j++)
       {
           s.insert(arr[j]);
       }
       v.push_back(s.size());
       s.clear();
    }
    return v;
}



TC:O(n*k)
SC:O(1)




method 2:

vector <int> countDistinct (int arr[], int n, int k)
{
    //code here.
    unordered_map<int,int>m;
    vector<int>v;
    //push in first window first 
    queue<int>q;
    int distinct=0;
    for(int i=0;i<k;i++)
    {
        m[arr[i]]++;
        if(m[arr[i]]==1)
        distinct++;
        q.push(arr[i]);
    }
    v.push_back(distinct);
    for(int i=k;i<n;i++)
    {
       int start=q.front();
       q.pop();
       m[start]--;
       if(m[start]==0)//gone from the window 
       distinct--;
       m[arr[i]]++;
       if(m[arr[i]]==1)//unique element added to the window 
       distinct++;
       q.push(arr[i]);
       v.push_back(distinct);
    }
    return v;
}

TC:O(n)
sc:O(n)



without using inki queue:


vector <int> countDistinct (int arr[], int n, int k)
{
    //code here.
    unordered_map<int,int>m;
    vector<int>v;
    //push in first window first 
    int distinct=0;
    for(int i=0;i<k;i++)
    {
        m[arr[i]]++;
    }
    v.push_back(m.size());
    for(int i=k;i<n;i++)
    {
       m[arr[i-k]]--;
       if(m[start]==0)//gone from the window 
       m.erase(arr[i-k]);
       m[arr[i]]++;
       v.push_back(m.size());
    }
    return v;
}

TC:O(n)
SC:O(n)


