You are given an array A[] of size N. Find the total count of sub-arrays having their sum equal to 0.


Example 1:

Input:
N = 6
A[] = {0,0,5,5,0,0}
Output: 6
Explanation: The 6 subarrays are 
[0], [0], [0], [0], [0,0], and [0,0].

Example 2:

Input:
N = 10
A[] = {6,-1,-3,4,-2,2,4,6,-12,-7}
Output: 4
Explanation: The 4 subarrays are [-1 -3 4]
[-2 2], [2 4 6 -12], and [-1 -3 4 -2 2]

Your Task:
You don't need to read input or print anything. Complete the function findSubarray() that takes the array A and its size N as input parameters and returns the total number of sub-arrays with 0 sum. 
 

Expected Time Complexity : O(N)
Expected Auxilliary Space : O(N)
 

Constraints:    
1<= N <= 107
-1010 <= Ai <= 1010

Brute force approach:

using three loops for every subarray 
TC:O(n*n*n)

////////////////////

Method 2:

by cumulative sum approach


ll findSubarray(vector<ll> arr, int n ) {
    //code here
    int count=0;int result=0;
    for(int i=0;i<n;i++)
    {
        int sum=0;
        result=0;
        for(int j=i;j<n;j++)
        {
            sum+=arr[j];
            result=sum;
            if(result==0)
            count++;
        }
    }
    return count;
}

TC:O(n*n)

/////////////////////////////////////////////////////////////////

Method 3: 
using hashing 



l findSubarray(vector<ll> arr, int n ) {
    //code here
    unordered_map<int,int>m;
    ll count=0;ll sum=0;
    for(int i=0;i<n;i++)
    {
       sum+=arr[i];//keep cumulative sum 
       if(sum==0)//then 0 se sum 
       count++;
       if(m.find(sum) != m.end()) //again we reached that sum that means ki kissi index
       count += m[sum]; //add that to count to 
       m[sum]++;//increase the sum 
    }
    return count;
}


TC:O(n)
SC:O(n)

