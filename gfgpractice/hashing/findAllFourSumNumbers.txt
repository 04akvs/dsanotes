Given an array of integers and another number. Find all the unique quadruple from the given array that sums up to the given number.

Example 1:

Input:
N = 5, K = 3
A[] = {0,0,2,1,1}
Output: 0 0 1 2 $
Explanation: Sum of 0, 0, 1, 2 is equal
to K.
Example 2:

Input:
N = 7, K = 23
A[] = {10,2,3,4,5,7,8}
Output: 2 3 8 10 $2 4 7 10 $3 5 7 8 $
Explanation: Sum of 2, 3, 8, 10 = 23,
sum of 2, 4, 7, 10 = 23 and sum of 3,
5, 7, 8 = 23.
Your Task:
You don't need to read input or print anything. Your task is to complete the function fourSum() which takes the array arr[] and the integer k as its input and returns an array containing all the quadruples in a lexicographical manner. Also note that all the quadruples should be internally sorted, ie for any quadruple [q1, q2, q3, q4] the following should follow: q1 <= q2 <= q3 <= q4.  (In the output each quadruple is separate by $. The printing is done by the driver's code)

Expected Time Complexity: O(N3).
Expected Auxiliary Space: O(N2).

Constraints:
1 <= N <= 100
-1000 <= K <= 1000
-100 <= A[] <= 100




brute force : is to run four loops to check for every possible combinations of four numbers 


TC:O(n*n*n*n)



better method :

sort the array so that you can use two pointer approach for rest of the two loops instead of making them also nested

two i & j loops and then use


vector<vector<int> > fourSum(vector<int> &nums, int target) {
    // Your code goes here
        
        vector<vector<int> >answer;
        int n=nums.size();
        sort(nums.begin(),nums.end());
        for(int i=0;i<n-3;i++)
        {
            if(i>0 && nums[i]==nums[i-1])
            continue;//to avoid duplicacy
            for(int j=i+1;j<n-2;j++)
            {
                if(j > i+1 && nums[j] == nums[j-1])
                  {continue;}//to avoid duplicacy
                int k=j+1;int l=n-1;
                while(k<l)
                {
                   if( nums[i]+nums[j]+nums[k]+nums[l]==target)
                   {
                       answer.push_back({nums[i],nums[j],nums[k],nums[l]});
                       k++;l--;
                       while(k<l && nums[k]==nums[k-1])
                       k++;//to avoid duplicacy
                       while(k<l && nums[l]==nums[l+1])
                       l--;//to avoid duplicacy
                       
                      
                   } 
                   else if(nums[i]+nums[j]+nums[k]+nums[l]<target)
                   k++;//then increase k to increase our sum
                   else
                   l--;
                }
            }
        }
        return answer;
}


tC:O(n*n*n+nlogn)
thus O(n*n*n)


best method using hashing : two sum approach 






