Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]
 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lower-case English letters.


class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string,vector<string> >m;
        vector<vector<string> >answer;
        for(int i=0;i<strs.size();i++)
        {
          string s=strs[i];
            sort(s.begin(),s.end());
            m[s].push_back(strs[i]);
        }
        for(auto i:m)
        {
             vector<string>temp;
            if(i.second.size()>0)//means something there
            {
                temp=i.second;
            }
            answer.push_back(temp);
        }
        return answer;
    }
};

TC:O(mlogm *n )  n is the number of strings in vector ,m is the length of strings

sc:O(n*k)




better time complexity :






class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        map<vector<int>,vector<string> >mp;//the freq of each character should be same in anagrams thus we can take freq array 
        //lets see without sorting 
        vector<vector<string> >answer;
        for(int i=0;i<strs.size();i++)
        {
            string s=strs[i];
            vector<int>charac(26,0);
            for(int k=0;k<s.size();k++)
            {
              charac[s[k]-'a']++;  
            }
            mp[charac].push_back(strs[i]);
        }
        for(auto i:mp)
        {
             vector<string>temp;
            if(i.second.size()>0)//means something there
            {
                temp=i.second;
            }
            answer.push_back(temp);
        }
        return answer;
    }
};



TC:O(n*k)
SC:O(n)


