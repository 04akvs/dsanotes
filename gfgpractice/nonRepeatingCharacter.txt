Given a string S consisting of lowercase Latin Letters. Find the first non-repeating character in S.

Example 1:

Input:
S = hello
Output: h
Explanation: In the given string, the
first character which is non-repeating
is h, as it appears first and there is
no other 'h' in the string.
Example 2:

Input:
S = zxvczbtxyzvy
Output: c
Explanation: In the given string, 'c' is
the character which is non-repeating. 

 traverse string s 2 times. First time, store counts of every character into the hash table, second time, find the first character that appears only once.
char nonrepeatingCharacter(string S)
{
   //Your code here
   int ch[26];int n=S.size();
   memset(ch,0,sizeof(ch));
   for(int i=0;i<n;i++)
   {
       ch[S[i]-'a']++;
   }
   for(int i=0;i<n;i++)
   {
       if(ch[S[i]-'a']==1)
       {
           return S[i];
       }
       
   }
   return '$';
}

TC:O(n+n)
SC:O(1)

if the string is extremely long, we wouldn't want to traverse it twice, so instead only storing just counts of a char, we also store the index, and then traverse the hash table.

class Solution {
public:
    int firstUniqChar(string s) {
        unordered_map<char, pair<int, int>> m;
        int idx = s.size();
        for (int i = 0; i < s.size(); i++) {
            m[s[i]].first++;
            m[s[i]].second = i;
        }
        for (auto &p : m) {
            if (p.second.first == 1) idx = min(idx, p.second.second);
        }
        return idx == s.size() ? -1 : idx;
    }
};


TC:O(26+n) 