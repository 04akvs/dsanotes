Given an array A[] with N elements , you need to find the sum all sub arrays of array A. Since the sum could be very large print the sum modulo (109+7).


Example 1:

Input:
N = 3
A[] = {1, 2, 3}
Output: 20
Explanation:
All subarrays are [1], [2], [3],
[1,2], [2,3], [1,2,3].
Thus total sum is 20.
 

Example 2:

Input:
N = 2
A[] = {1, 3}
Output: 8

Your Task:  
You don't need to read input or print anything. Your task is to complete the function subarraySum() which takes the array A[] and its size N as inputs and returns the sum.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints :
1 ≤ N ≤ 105
1 ≤ A[] ≤ 109



brute force:
find all subarrays and compute their sum 


class Solution{   
public:
    long long subarraySum(long long a[], long long n)
    {
        // Your code goes here
         long long  subarray=0;
        for(long long  i=0;i<n;i++)
        {
            
            for(long long  j=0;j<n;j++)
            { 
                 long long  sum=0;
                for(long long  l=i;l<=j;l++)//for every subarray 
                 sum+=a[l];  
                subarray=(subarray+sum)%10000000007;
            }
        }
        return subarray;
    }
};

TC:O(n*n*n)




better solution to find sum of arrays :


class Solution{   
public:
    long long subarraySum(long long a[], long long n)
    {
        // Your code goes here
         long long  subarray=0;
        for(long long  i=0;i<n;i++)
        {
            int sum=0;
            for(long long  j=i;j<n;j++)
            { 
                 sum+=a[j];
                subarray=(subarray+sum)%10000000007;
            }
        }
        return subarray;
    }
};

TC:O(n*n)


efficient solution :

arr[] = [1, 2, 3], n = 3
All subarrays :  [1], [1, 2], [1, 2, 3], 
                 [2], [2, 3], [3]
here first element 'arr[0]' appears 3 times    
     second element 'arr[1]' appears 4 times  
     third element 'arr[2]' appears 3 times

Every element arr[i] appears in two types of subsets:
i)  In subarrays beginning with arr[i]. There are 
    (n-i) such subsets. For example [2] appears
    in [2] and [2, 3].
ii) In (n-i)*i subarrays where this element is not
    first element. For example [2] appears in 
    [1, 2] and [1, 2, 3].

Total of above (i) and (ii) = (n-i) + (n-i)*i 
                            = (n-i)(i+1)
                                  
For arr[] = {1, 2, 3}, sum of subarrays is:
  arr[0] * ( 0 + 1 ) * ( 3 - 0 ) + 
  arr[1] * ( 1 + 1 ) * ( 3 - 1 ) +
  arr[2] * ( 2 + 1 ) * ( 3 - 2 ) 

= 1*3 + 2*4 + 3*3 
= 20





class Solution{   
public:
    long long subarraySum(long long a[], long long n)
    {
        // Your code goes here
         long long  subarray=0;
        for(long long  i=0;i<n;i++)
        {
           subarray=(subarray+(a[i]*(n-i)*(i+1)))%1000000007; 
            
        }
        return subarray;
    }
};


TC:O(n)


SC:O(1)
