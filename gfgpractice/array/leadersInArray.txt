Given an array A of positive integers. Your task is to find the leaders in the array. An element of array is leader if it is greater than or equal to all the elements to its right side. The rightmost element is always a leader. 

 

Example 1:

Input:
n = 6
A[] = {16,17,4,3,5,2}
Output: 17 5 2
Explanation: The first leader is 17 
as it is greater than all the elements
to its right.  Similarly, the next 
leader is 5. The right most element 
is always a leader so it is also 
included.
 

Example 2:

Input:
n = 5
A[] = {1,2,3,4,0}
Output: 4 0




using stack :

class Solution{
    //Function to find the leaders in the array.
    public:
    vector<int> leaders(int arr[], int n){
        // Code here
        int max=arr[n-1];
        vector<int>leaders;
        stack<int>st;
         for(int i=n-1;i>=0;i--)
         {
             while(!st.empty() && st.top()<=arr[i])//pop out all the elements smaller to it 
             st.pop();
             if(st.empty())//means no greater element was there on its right 
             {
                 leaders.push_back(arr[i]);
             }
             st.push(arr[i]);
         }
         reverse(leaders.begin(),leaders.end());//as output should be in order of appearance 
        return leaders;
        
    }
};

TC:O(n)
SC:O(n)

//////////////////////


class Solution{
    //Function to find the leaders in the array.
    public:
    vector<int> leaders(int arr[], int n){
        // Code here
        int max=arr[n-1];//the last element will never have a element greater to it on right
        vector<int>leaders;
        leaders.push_back(max);
        for(int i=n-2;i>=0;i--)
        {
           if(arr[i]>=max)
           {
               max=arr[i];//keep updating the maximum element 
               leaders.push_back(max);
           }
        }
        reverse(leaders.begin(),leaders.end());//as we want in order of appearance 
        return leaders;
        
    }
};


TC:O(n)
SC:O(1)


//////////////////////////
