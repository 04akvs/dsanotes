Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.


class TrieNode {
public:
    // Initialize your data structure here.
    bool isLeaf;
    TrieNode *children[26];
    
    TrieNode() {
        isLeaf = false;
        
        for (int i = 0; i < 26; i++)
            children[i] = NULL;
    }
};
class Trie {
    private:
    TrieNode* root;
public:
    /** Initialize your data structure here. */
    Trie() {
       root=new TrieNode();
        
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
       
        TrieNode *pStart = root;
        
        for (int i = 0; i < word.size(); i++)
        {
           int index=word[i]-'a';
            if (pStart->children[index] == NULL)
            {
                pStart->children[index] = new TrieNode();
            }
            
            pStart= pStart->children[index];
        }
        
        pStart->isLeaf = true;
        
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* pStart=root;
        for(int i=0;i<word.size();i++)
        {
            int index=word[i]-'a';
            if(pStart->children[index]==NULL)
                return false;
            pStart=pStart->children[index];
        }
        return pStart!=NULL && pStart->isLeaf;
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        //basically search for that given 
        TrieNode* start=root;
        for(int i=0;i<prefix.size();i++)
        {
            int index=prefix[i]-'a';
            if(start->children[index]==NULL)
                return false;
            start=start->children[index];
        }
       return  true;
    }
};


TC:O(n) where n is string length ,for every operation)