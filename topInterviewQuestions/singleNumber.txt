leetcode 136:
single number 

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.


Method 1: using sorting 

Tc:O(nlogn)
sC:O(1)


////////////////////////////////////////////////////////


Method 2 : using hashmap to store the frequency of each number 

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        unordered_map<int,int>m;
        for(int i=0;i<nums.size();i++)  
        m[nums[i]]++;
        for(auto i:m)
        {
            if(i.second==1)
            {
                return i.first;
            }
        }
        return 0;
    }
};

Tc:O(n)
sc:O(distict elements in array)

////////////////////////////////////////////////////////



without using any extra space :

based on xor property 
xor of two same numbers is zero thus gives the only single number to us 

class Solution {
public:
    int singleNumber(vector<int>& nums) {
       int num=0;
        for(int i=0;i<nums.size();i++)  
            num=num^nums[i];
        return num;
    }
};

TC:O(n)
sC:O(1)
