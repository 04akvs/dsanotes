Leetcode 202:

Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false
 

Constraints:

1 <= n <= 231 - 1



Brute force solution using extra space :

class Solution {
public:
    bool isHappy(int n) {
        unordered_map<int,int>m;
        while(n>1){
            int t=n;
            int num=0;
            if(m[n]>1)
                return false;
            while(t){
                num+=(t%10)*(t%10);
                t=t/10;
            }
            n=num;
            m[n]++;
        }
        return n==1;
    }
};

optimised solution using linked list loop finding :



other thing to notice :

the only single digit number that is happy is 1 or 7 

int isHappy(int n){
        // code here
        unordered_map<int,int>m;
        while(n>9){
            int t=n;
            int num=0;
            while(t){
                num+=(t%10)*(t%10);
                t=t/10;
            }
            n=num;
            if(n==1)
            return true;
        }
        return n==7;
    }
