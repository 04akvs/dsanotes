leetcode  94:

Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
Example 4:


Input: root = [1,2]
Output: [2,1]
Example 5:


Input: root = [1,null,2]
Output: [1,2]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 

Follow up: Recursive solution is trivial, could you do it iteratively?



Recursive approach :


class Solution {
public:
    void inorder(TreeNode* root,vector<int>&in){
        if(root==NULL)
            return ;
        inorder(root->left,in);
        in.push_back(root->val);
        inorder(root->right,in);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>in;
        if(root==NULL)
            return in;
        inorder(root,in);
        return in;
    }
};


TC:O(n)
sC:O(height)


//////////////////////////////////////////////////////////////////////////

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>in;
        if(root==NULL)
            return in;
       stack<TreeNode*>st;
        TreeNode* node=root;
        while(node || !st.empty()){
            while(node!=NULL){
                st.push(node);
                node=node->left;
            }
            node=st.top();
            in.push_back(node->val);
            st.pop();
            node=node->right;
        }
        return in;
    }
};

TC:O(n)
SC:O(hieght)

