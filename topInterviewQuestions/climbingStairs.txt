Leetcode 70:


You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45



recursive approach :

class Solution {
public:
        int climb(int n){
        if(n==0)
            return 1;//only one way is to take no step
        if(n==1)
            return 1;
        if(n==2)//for 2 steps there are two ways -2 or 1 1 
            return 2;
        return climb(n-1)+climb(n-2);
        
    }
    int climbStairs(int n) {
       return climb(n);
    }
};

Memoized approach :

class Solution {
public:
    //top down approach recursion with memoization
        int climb(int n){
        if(n==0)
            return 1;//only one way is to take no step
        if(n==1)
            return 1;
        if(n==2)//for 2 steps there are two ways -2 or 1 1 
            return 2;
        if(t[n]!=-1)
           return t[n];
        return climb(n-1)+climb(n-2);
        
    }
    int climbStairs(int n) {
       return climb(n);
    }
};


Bottom up Approach :

int climbStairs(int n) {
        int t[n+1];//now let us bottom up approach building from smaller to bigger
        memset(t,-1,sizeof(t));
        //int res=climb(n,t);
        if(n==1)
        return 1;
        if(n==2)
            return 2;
        t[1]=1;t[2]=2;
        for(int i=3;i<=n;i++)
        {
            t[i]=t[i-1]+t[i-2];
        }
        return t[n];
    }

    TC:O(n)
    sc:O(n)
    