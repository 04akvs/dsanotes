Leetcode 217:

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109


Method 1: 
run two nested loops and for every element at index i, 
check whether it repeats from index i+1 to the end 

tC:O(n* n)
SC:O(1)



//////////////////////////////////////////////////////////////////////////////////////


Method 2 : sort the array and check for whether nums[i]==nums[i+1]

TC:O(nlogn)
sc:O(1)



better time complexity :
use a hashmap to store whether a number has been visited once , if its been already thrn return it as duplicate 

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        unordered_map<int,bool>mark;//or can also use unordered_set to get desired results
        for(int i=0;i<nums.size();i++)
        {
           
            if(mark[nums[i]])
                return true;
            else
                mark[nums[i]]=true;
                
        }
            return false;
    }
};
TC:O(n)
sc:O(n)

