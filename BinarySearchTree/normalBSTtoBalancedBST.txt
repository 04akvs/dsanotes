Given a Binary Search Tree, modify the given BST such that itis balanced and has minimum possible height.

Examples :

Input:
       30
      /
     20
    /
   10
Output:
     20
   /   \
 10     30

Input:
         4
        /
       3
      /
     2
    /
   1
Output:
      3            3           2
    /  \         /  \        /  \
   1    4   OR  2    4  OR  1    3   OR ..
    \          /                   \
     2        1                     4 


void inorder(Node* root,vector<int>&binary)
{
    if(root==NULL)
    return ;
    inorder(root->left,binary);
    binary.push_back(root->data);
    inorder(root->right,binary);
}
Node* buildBST(vector<int>binary,int start,int end)
{
    if(start>end)
    return NULL;
    int mid=start+(end-start)/2;
    Node* root=new Node(binary[mid]);
    root->left=buildBST(binary,start,mid-1);
    root->right=buildBST(binary,mid+1,end);
    return root;
}
Node* buildBalancedTree(Node* root)
{
	// Code here
vector<int>binary;
inorder(root,binary);//inorder traversal of BST gives sorted array 
//now we will build the bst by dividing in the middle as then it will have height balanced nodes
int n=binary.size();
return buildBST(binary,0,n-1);

}


TC:O(n)
SC:O(n)


