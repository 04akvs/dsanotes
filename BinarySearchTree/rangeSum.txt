Leetcode 938:

Given the root node of a binary search tree, return the sum of values of all nodes with a value in the range [low, high].


Example 1:


Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32



class Solution {
public:
    void inorderSum(TreeNode* root,int &sum,int L,int R)
    {
       if(root==NULL)
           return ;
        inorderSum(root->left,sum,L,R);
        if(root->val>=L && root->val<=R)
        {
            sum+=root->val;
        }
        inorderSum(root->right,sum,L,R);
    }
    int rangeSumBST(TreeNode* root, int L, int R) {
        //follow any traversal of the tree and return the sum
        int sum=0;
        inorderSum(root,sum,L,R);
        return sum;
    }
};





////////////////////////////////////////////////////////////////

Iterative solution:

TC:O(nodes)
SC:O(height)


class Solution {
public:
    int rangeSumBST(TreeNode* root, int L, int R) {
        //follow any traversal of the tree and return the sum
        int sum=0;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty())
        {
            TreeNode* root=q.front();
            q.pop();
            if(root->val>=L && root->val<=R)
            {
                sum+=root->val;
            }
            if(root->left)
                q.push(root->left);
            if(root->right)
                q.push(root->right);
        }
        return sum;
    }
};



//////////////////////////////////////////////




class Solution {
public:
   //taking advantage of the fact that it's a BST
       int rangeSumBST(TreeNode* root, int L, int R) {
        if (root ==NULL){return 0;}
        else if (root->val > R)
            return rangeSumBST(root->left, L,R);
        else if (root->val < L)
            return rangeSumBST(root->right, L,R);
        else
            return root->val+rangeSumBST(root->left,L,root->val)+rangeSumBST(root->right, root->val,R);
    }
};



iterative solution based on BST search property 

class Solution {
public:
   
    int rangeSumBST(TreeNode* root, int low, int high) {
       if(root==NULL)
           return 0;
        int sum = 0;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            TreeNode* node = q.front();
            q.pop();
            
            if(node == NULL)
                continue;
            if(node->val >= low && node->val <= high)
               {
                sum += node->val;
                q.push(node->left);
                q.push(node->right);
            }
            if(node->val>high)
            q.push(node->left);
            if(node->val<low)
            q.push(node->right);
        }
        return sum;
    }
    
};

TC:O(n)
sc:O(n)

All 4 methods will DFS traverse all nodes in worst case, and if we count in the recursion trace space cost, the complexities are as follows:

Time: O(n), space: O(h), where n is the number of total nodes, h is the height of the tree..