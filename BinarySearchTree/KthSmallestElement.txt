Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

 

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1



class Solution {
public:
    //we perform inorder traversal as in inorder traversal we get increasing order of bst therefore we can easily find the position of the k'th element
    class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        if(root==NULL)
            return 0;
        stack<TreeNode*>st;
        while(root!=NULL || !st.empty() )
        {
            while(root!=NULL)
            {
                  st.push(root);
                root=root->left;
            }
            root=st.top();
             st.pop();
             k--;
            if(k==0)
                return root->val;
            root=root->right;
            
        }
        return 0;
    }
};
TC:O(height+k) as nodes get popped out once we reach from root to leaf 


SC:O(height) as height can be proportional to number of nodes in the tree in case of skewed tree 


///
recursive approach : based on inorder traversal

class Solution {
public:
    int found=0;
    void  inorder(TreeNode* root,int &k)
    {
        if(root==NULL)
            return ;
        inorder(root->left,k);
        k--;
            if(k==0)
            {
                found=root->val;
                return ;
            }
       inorder(root->right,k);
    }
    int kthSmallest(TreeNode* root, int k) {
        int count=0;
         inorder(root,k);
        return found;
    }
};

TC:O(h+k)
The code first traverses down to the leftmost node which takes O(h) time, 
then traverses k elements in O(k) time. 
Therefore overall time complexity is O(h + (h-k)).




///optimised iterative approach:

class Solution {
  public int kthSmallest(TreeNode root, int k) {
    LinkedList<TreeNode> stack = new LinkedList<TreeNode>();

    while (true) {
      while (root != null) {
        stack.add(root);
        root = root.left;
      }
      root = stack.removeLast();
      if (--k == 0) return root.val;
      root = root.right;
    }
  }
}

TC:O(height+k)

which contains at least H+k elements, since before starting to pop out one has to go down to a leaf.
This results in 
O(logN+k) for the balanced tree and 
O(N+k) for completely unbalanced tree with all the nodes in the left subtree.