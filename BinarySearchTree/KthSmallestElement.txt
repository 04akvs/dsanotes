Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

 

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1

class Solution {
public:
    //we perform inorder traversal as in inorder traversal we get increasing order of bst therefore we can easily find the position of the k'th element
    int kthSmallest(TreeNode* root, int k) {
        if(root==NULL)
            return 0;
        stack<TreeNode*>st;int index=0;
        while(root!=NULL || !st.empty())
        {
           while(root!=NULL)
           {
               st.push(root);
               root=root->left;
           }
            root=st.top();st.pop();
            index++;
            if(index==k)
            {return root->val;
            }
            root=root->right;
            
        }
        return 0;
    }
}; TC:O(height)
