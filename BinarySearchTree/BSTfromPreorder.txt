Return the root node of a binary search tree that matches the given preorder traversal.
Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]


basic approach:

The first element of preorder traversal is always root.
 We first construct the root.
  Then we find the index of first element which is greater than root. 
  Let the index be ‘ind’. 
  The values between root and ‘ind’ will be part of left subtree, and the values between ‘ind+1’ and ‘n-1’ will be part of right subtree.
   Divide given pre[] at index “ind” and recur for left and right sub-trees. 

class Solution {
public:
    TreeNode*  bstConstruct(vector<int>preorder,int start,int end)
    {
        if( start>end)
            return NULL;
        TreeNode* root=new TreeNode(preorder[start]);
         if(start==end)
            return root;
        int ind;
        for(int i=start+1;i<=end;i++)
        {
            if(preorder[i]>root->val)
            {
                ind=i;
                break;
            }
        }
        root->left=bstConstruct(preorder,start+1,ind-1);
        root->right= bstConstruct(preorder,ind,end);
        return root;     
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
    //the first node in preorder is always the root
       
        //the first value greater than the root will be its right child
        int start=0;int end=preorder.size()-1;
       return bstConstruct(preorder,start,end);
    }
};

TC:O(n*n)



Keep in mind when no number greater than root is present 

class Solution {
public:
    int findGreater(vector<int>&pre,int start,int end){
        for(int i=start;i<=end;i++){
            if(pre[i]>pre[start])
                return i; 
        }
        return start;
    }
    TreeNode* construct(vector<int>&pre,int start,int end){
        if(start>end)
            return NULL;
        if(start==end)
            return new TreeNode(pre[start]);
        TreeNode* root=new TreeNode(pre[start]);
        //now find the index of the node that is greater than it 
        //that would be its right subtree
        int index=findGreater(pre,start,end);
        root->left=index==start?construct(pre,start+1,end):construct(pre,start+1,index-1);
        root->right=index==start?NULL:construct(pre,index,end);
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& pre) {
        return construct(pre,0,pre.size()-1);
    }
};

TC:O(n*n) worst case in case of decreasing order of array 


Method :solution based on basic BST property TC:O(n*h) where h is the height of the tree
class Solution {
public:
     TreeNode* bstFromPreorder(vector<int>& preorder) {
        TreeNode* root=new TreeNode(preorder[0]);
        for(int i=1;i<preorder.size();i++){
            root=constructBST(root,preorder[i]);
        }
        //cout<<root->val;
        return root;
    }
    TreeNode* constructBST(TreeNode* root,int val){
        if(root==NULL){
            
            return new TreeNode(val);
        }
        if(val<root->val)
            root->left=constructBST(root->left,val); 
        if(val>root->val)
            root->right=constructBST(root->right,val);
        return root;
    }
};

TC:O(n*h)

//////////////////////////////////////////////////////////////



Optimised approach:

Method 2:recursive solution TC:O(n)

based on BST property of lower and uper bound for every node 
construct bst from preorder 


Node* construct(int pre[],int& start,int size,int minn,int maxx){
    if(start>=size)
    return NULL;
    if(pre[start]>=minn && pre[start]<=maxx){
       Node* root=newNode(pre[start]);
       start++;
    root->left=construct(pre,start,size,minn,root->data-1);
    root->right=construct(pre,start,size,root->data+1,maxx);
    return root;
    }
    else
    return NULL;
}
Node* constructTree(int pre[], int size)
{
    //code here
    int start=0;
    Node* root=construct(pre,start,size,INT_MIN,INT_MAX);
    return root;
    
}

TC:O(n)
sc:O(h)
///////////////////////////////////////////////////////////////////////////////////////////

using only upper bound 


class Solution {
public:
    //recursive approach 
    int i=0;
     TreeNode* bstFromPreorder(vector<int>& preorder) {
      return constructBST(preorder,INT_MAX);//it is the bound for the right subtree
    }
    TreeNode* constructBST(vector<int>& preorder,int bound){
          if(i>=preorder.size() || preorder[i]>bound)
              return NULL;
        TreeNode* root=new TreeNode(preorder[i]);
        i++;//now for the next node
        root->left=constructBST(preorder,root->val);
        root->right=constructBST(preorder,bound);
        return root;
        
    }
};

TC:O(n)
sc:O(h)