Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true

Method 1: recursive approach is that for 
every right node there's a lower limit >root->data && for every left node there is a upper limit i.e lower than root->data
thus we can check for these conditions 
class Solution {
public:
    bool check(TreeNode* root,TreeNode* min,TreeNode* max)
    {
        if(root==NULL)
            return true;
        if((max && root->val>=max->val) || (min && root->val<=min->val))
            return false;
        return check(root->left,min,root) && check(root->right,root,max);
    }
    bool isValidBST(TreeNode* root) {
        if(root==NULL)
            return true;
        TreeNode* min=NULL;TreeNode* max=NULL;
        return check(root,NULL,NULL);
    }
};