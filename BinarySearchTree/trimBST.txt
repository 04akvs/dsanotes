

Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.

Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.

 

Example 1:


Input: root = [1,0,2], low = 1, high = 2
Output: [1,null,2]
Example 2:


Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3
Output: [3,2,null,1]
Example 3:

Input: root = [1], low = 1, high = 2
Output: [1]
Example 4:

Input: root = [1,null,2], low = 1, high = 3
Output: [1,null,2]
Example 5:

Input: root = [1,null,2], low = 2, high = 4
Output: [2]




class Solution {
public:

    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if(root==NULL)
            return root;
        //we only want nodes that lie in a given range 
        if(root->val>=low && root->val<=high)
        {
            //then we need to keep this node and 
            //attach the trimmed or untrimmed left & right subtrees if any 
            root->left=trimBST(root->left,low,high);
            root->right=trimBST(root->right,low,high);
        }
        else if(root->val<low)//then we do not need this node as well as its left subtree as that would also contain lower values 
        {
            return trimBST(root->right,low,high);
        }
        else if(root->val>high)//then we do not need this node as well as its right subtree as that would also contain higher values 
        {
            return trimBST(root->left,low,high);
        }
        return root;
    }
};






Time Complexity: O(N), where 
N is the total number of nodes in the given tree. We visit each node at most once.

Space Complexity:O(N). Even though we don't explicitly use any additional memory,
 the call stack of our recursion could be as large as the number of nodes in the worst case.