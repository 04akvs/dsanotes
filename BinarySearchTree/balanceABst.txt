Leetcode 1382:

Given a binary search tree, return a balanced binary search tree with the same node values.

A binary search tree is balanced if and only if the depth of the two subtrees of every node never differ by more than 1.

If there is more than one answer, return any of them.

 

Example 1:



Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2,null,null] is also correct.
 

Constraints:

The number of nodes in the tree is between 1 and 10^4.
The tree nodes will have distinct values between 1 and 10^5.


Traverse given BST in inorder and store result in an array. This step takes O(n) time. Note that this array would be sorted as inorder traversal of BST always produces sorted sequence.
Build a balanced BST from the above created sorted array using the recursive approach 


class Solution {
public:
    void inorder(TreeNode* root,vector<int>&in){
        if(root==NULL)
            return ;
        inorder(root->left,in);
        in.push_back(root->val);
        inorder(root->right,in);
    }
    TreeNode* construct(vector<int>&in,int start,int end){
        if(start>end)
            return NULL;
        int mid=(start+end)/2;
        TreeNode* root=new TreeNode(in[mid]);
        root->left=construct(in,start,mid-1);
        root->right=construct(in,mid+1,end);
        return root;
        
    }
    TreeNode* balanceBST(TreeNode* root) {
        vector<int>in;
        if(root==NULL)
            return NULL;
        inorder(root,in);
        return construct(in,0,in.size()-1);
    }
};

TC:O(n)
SC:O(n)
