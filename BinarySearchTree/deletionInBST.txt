class Solution {
public:
    //first step search that node 
    //second step delete
    //deletion has three cases - no child,one child, two children
    //inorder successor is the min value in right subtree i.e the leftmost 
    TreeNode* inSuccess(TreeNode* found)
    {
        TreeNode* curr=found;
        while(curr->left!=NULL)
            curr=curr->left;
        return curr;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
       if(root==NULL)
           return root;
        if(key>root->val)
            root->right=deleteNode(root->right,key);
        else if(key<root->val)
            root->left=deleteNode(root->left,key);
        else 
        {
            if(root->left==NULL && root->right==NULL)
            {
                delete root;
                return NULL;
            }
            else if(root->left==NULL)
            {
                TreeNode* temp=root->right;
                delete root;
                return temp;
            }
            else if(root->right==NULL)
            {
               TreeNode* temp=root->left;
                delete root;
                return temp; 
            }
            else
            {
              TreeNode* succ=inSuccess(root->right);
                root->val=succ->val;
                root->right=deleteNode(root->right,succ->val);
            }
            return root;
        }
       return root; 
    }
};

