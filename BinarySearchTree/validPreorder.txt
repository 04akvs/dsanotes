interviewbit solution:


Given an array of numbers, return true if given array can represent preorder traversal of a Binary Search Tree, else return false. 
Expected time complexity is O(n).

Input:  pre[] = {2, 4, 3}
Output: true
Given array can represent preorder traversal
of below tree
    2
     \
      4
     /
    3

Input:  pre[] = {2, 4, 1}
Output: false
Given array cannot represent preorder traversal
of a Binary Search Tree.

Input:  pre[] = {40, 30, 35, 80, 100}
Output: true
Given array can represent preorder traversal
of below tree
     40
   /   \
 30    80 
  \      \
  35     100 


Input:  pre[] = {40, 30, 35, 20, 80, 100}
Output: false
Given array cannot represent preorder traversal
of a Binary Search Tree.



approach 1:

A Simple Solution is to do following for every node pre[i] starting from first one. 

1) Find the first greater value on right side of current node. 
   Let the index of this node be j. Return true if following 
   conditions hold. Else return false
    (i)  All values after the above found greater value are 
         greater than current node.
    (ii) Recursive calls for the subarrays pre[i+1..j-1] and 
         pre[j+1..n-1] also return true. 
Time Complexity of the above solution is O(n2)


approach 2:

i tried to make tree from the given perorder traversal 
and check whether ot was possible to make

class Node{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int d){
        data=d;
        left=NULL;
        right=NULL;
    }
};
Node* construct(vector<int>&arr,int& index,int minn,int maxx){
    if(index==arr.size())
    return NULL;
      int val=arr[index];
    index++;
    Node* root=new Node(val);
    if(val<minn || val>maxx)
    return NULL;
    root->left=construct(arr,index,minn,root->data-1);
    root->right=construct(arr,index,root->data+1,maxx);
    return root;
    
}
int Solution::solve(vector<int> &arr) {
    int minn=INT_MIN;int maxx=INT_MAX;int index=0;
   Node* root=construct(arr,index,minn,maxx);
   return index==arr.size();
}

TC:O(n)
SC:O(height)



Method 2: using stack 


1) Create an empty stack.
2) Initialize root as INT_MIN.
3) Do following for every element pre[i]
     a) If pre[i] is smaller than current root, return false.
     b) Keep removing elements from stack while pre[i] is greater
        then stack top. Make the last removed item as new root (to
        be compared next).
        At this point, pre[i] is greater than the removed root
        (That is why if we see a smaller element in step a), we 
        return false)
     c) push pre[i] to stack (All elements in stack are in decreasing
        order)  


int Solution::solve(vector<int> &pre) {
    stack<int> s;
 
    // Initialize current root as minimum possible
    // value
    int root = INT_MIN;
 
    // Traverse given array
    for (int i=0; i<pre.size(); i++)
    {
        // If we find a node who is on right side
        // and smaller than root, return false
        if (pre[i] < root)
            return false;
 
        // If pre[i] is in right subtree of stack top,
        // Keep removing items smaller than pre[i]
        // and make the last removed item as new
        // root.
        while (!s.empty() && s.top()<pre[i])
        {
            root = s.top();
            s.pop();
        }
 
        // At this point either stack is empty or
        // pre[i] is smaller than root, push pre[i]
        s.push(pre[i]);
    }
    return true;
}


TC:O(n)
SC:O(n)
