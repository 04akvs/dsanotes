Leetcode 560:

Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107




brute force method is to find all subarrays and then check wether its sum equals to k or not 


class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int subarray=0;int n=nums.size();
        for(int i=0;i<n;i++)
        {
            
            for(int j=0;j<n;j++)
            { 
                int sum=0;
                for(int l=i;l<=j;l++)//for every subarray 
                 sum+=nums[l];  
                if(sum==k)
                subarray++;
            }
        }
        return subarray;
    }
};

TC:O(n*n*n)
obviously will cause TLE for larger values 

SC:O(1)



better method :


class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int subarray=0;int n=nums.size();
        int count=0;
        for(int i=0;i<n;i++)
        {
            int sum=0;
            for(int j=i;j<n;j++)
            { 
                 sum+=nums[j];//cumulative approach 
                cout<<sum<<" ";
                if(sum==k)
                    count++;
            }
        }
        return count;
    }
};

TC:O(n*n)

which again causes TLE for higher values




efficient approach :


using a hashmap to store sum 


//Link- https://www.youtube.com/watch?v=20v8zSo2v18

if we know sum[0,j] and sum[0,i] then sum of subarray sum[i,j]=sum[0,j]-sum[0,i]
k=prefix_sum-sum[0,i]
therefore check for every prefix sum whether 
m[prefix_sum-k] exists 

class Solution {
public:
    
    int subarraySum(vector<int>& arr, int sum) { 
        unordered_map<int,int>mp;
    	int pre_sum=0;
    	int count=0;
        mp[0]++;//when we have nothing then we have 0 sum
    	for(int i=0;i<arr.size();i++){
    	    pre_sum+=arr[i];
    	    if(mp.find(pre_sum-sum)!=mp.end())
    	    count+=mp[pre_sum-sum];
    	    mp[pre_sum]++;
    	}
    	return count;
    }
};
TC:O(n)
SC:O(n)


