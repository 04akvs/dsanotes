gfg link :
https://practice.geeksforgeeks.org/problems/find-pair-given-difference1559/1#


Given an array Arr[] of size L and a number N, you need to write a program to find if there exists a pair of elements in the array whose difference is N.

Example 1:

Input:
L = 6, N = 78
arr[] = {5, 20, 3, 2, 5, 80}
Output: 1
Explanation: (2, 80) have difference of 78.
Example 2:

Input:
L = 5, N = 45
arr[] = {90, 70, 20, 80, 50}
Output: -1
Explanation: There is no pair with difference of 45.
Your Task:
You need not take input or print anything. Your task is to complete the function findPair() which takes array arr, size of the array L and N as input parameters and returns True if required pair exists, else return False.

Expected Time Complexity: O(L* Log(L)).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ L ≤ 104
1 ≤ Arr[i], N ≤ 105

Company Tags
 Amazon  Visa
Topic Tags
 Binary Search  Sorting


brute force:
O(n*n) approach 


using hashmap :

 bool findPair(int arr[], int size, int n){
    //abs(x-y)=n
    //for a given x find y exists such that x-n=y
    unordered_map<int,int>mp;
    for(int i=0;i<size;i++){
        if(mp.find(-(n-arr[i]))!=mp.end() || mp.find(n+arr[i])!=mp.end())
        {
            return true;
        }
        mp[arr[i]]++;
    }
    return false;
}

TC:O(n)
SC:O(n)

///////////////////////////////////////////////////////////////////////////////////////////

two pointer approach without using any extra space :


bool findPair(int arr[], int size, int n){
    //x-y=n
    //for a given x find y exists such that x-n=y
  sort(arr,arr+size);
  int i=0;int j=1;
  while(i<size && j<size){
      if(arr[j]-arr[i]==n)
      return true;
      else if(arr[j]-arr[i]>n)//difference is more than increase the smaller number 
      i++;
      else//if difference is lesser increase the bigger number 
      j++;
  }
  return false;
}
TC:O(n)
SC:O(1)

