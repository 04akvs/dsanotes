Given two sorted arrays arr1[] and arr2[] of sizes n and m in non-decreasing order. 
Merge them in sorted order without using any extra space. 
Modify arr1 so that it contains the first N elements and modify arr2 so that it contains the last M elements. 
 

Example 1:

Input: 
n = 4, arr1[] = [1 3 5 7] 
m = 5, arr2[] = [0 2 6 8 9]
Output: 
arr1[] = [0 1 2 3]
arr2[] = [5 6 7 8 9]
Explanation:
After merging the two 
non-decreasing arrays, we get, 
0 1 2 3 5 6 7 8 9.
Example 2:

Input: 
n = 2, arr1[] = [10, 12] 
m = 3, arr2[] = [5 18 20]
Output: 
arr1[] = [5 10]
arr2[] = [12 18 20]
Explanation:
After merging two sorted arrays 
we get 5 10 12 18 20.


Your Task:
You don't need to read input or print anything. You only need to complete the function merge() that takes arr1, arr2, n and m as input parameters and modifies them in-place so that they look like the sorted merged array when concatenated.
 

Expected Time Complexity:  O((n+m) log(n+m))
Expected Auxilliary Space: O(1)
 

Constraints:
1 <= n, m <= 5*104
0 <= arr1i, arr2i <= 107


 Amdocs  Brocade  Goldman Sachs  Juniper Networks  Linkedin  Microsoft  Quikr  Snapdeal  Synopsys  Zoho


 Brute force method that I can think of is-


 take an extra array of size n+m and put elements of both the array into it 
 sort this extra array and then put elements from it one by one into arr1 & arr2 accordingly 


 void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            // code here 
            long long arr[n+m];
            for(int i=0;i<n;i++){
                arr[i]=arr1[i];
            }
             for(int i=n;i<n+m;i++){
                arr[i]=arr2[i-n];
            }
            sort(arr,arr+n+m);
            for(int i=0;i<n;i++)
            arr1[i]=arr[i];
            for(int i=n;i<m+n;i++)
            arr2[i-n]=arr[i];
            
        } 


        TC:O((n+m)log(n+m))
        SC:O(n+m)




//////////////////////////////////////////////////////////////

1 3 5 7 =arr1
0 2 6 8 9=arr2

we start from last element of array 1 which is its largest element we check whether the first (smallest element of array2 ) is smaller than it 
if so then it means , that need to be in array 1 so swap it and i-- & j++

if at any point we get arr1[i]<=arr2[j] then for sure all numbers on left will also be smaller than arr2[j] then we can break 




void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            // code here 
            int i=n-1;int j=0;
            while(i>=0 && j<m){
                if(arr1[i]>arr2[j]){//bigger in here then bring it in lower part
                swap(arr1[i],arr2[j]);
                i--;j++;
                }
                else
                i--;
                
            }
            sort(arr1,arr1+n);//has first n smaller numbers but aren't sorted so sort
            sort(arr2,arr2+m);
            
        } 

        TC:O(nlogn+mlogm )

SC:O(1)



