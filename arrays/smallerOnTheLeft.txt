Given an array arr[] of N positive integers. The task is to find the greatest smaller on left of every element in the array.

Input:
First line of input contains number of testcases T. For each testcase, first line of input contains size of array N and next line contains array elements.

Output:
For each testcase, print the array which contains greatest smaller element on left of every corresponding element in the array. For the element whose smaller on left doesn't exists, consider -1 as greatest smaller.

Constraints:
1 <= T <= 100
1 <= N <= 106
1 <= arr[i] <= 108

Example:
Input:
1
5
2 3 4 5 1

Output:
-1 2 3 4 -1

Explanation:
Testcase 1: Smallest element on left of 3 is 2, 4 is 3 and 5 is 1. 
Since 2 is the first element and no element on left is present, 
so it's greatest smaller element will be -1 and that for 1, no greatest smaller element is present on left,
 so it's greatest smaller element is -1.


out of all the smaller elements than the number on its left side , print the greatest one among it 



#include <bits/stdc++.h>
using namespace std;

int main() {
	//code
	int t;cin>>t;
	while(t--)
	{
	    int n;cin>>n;
	    int arr[n];
	    for(int i=0;i<n;i++)
	    {
	        cin>>arr[i];
	    }
	    for(int i=0;i<n;i++)
	    {
	        bool flag=false;
	        set<int,greater<int> >s;//will store elements in descending order so that top element is the greatest one 
	        for(int j=i-1;j>=0;j--)
	        {
	           if(arr[j]<arr[i])//insert smaller elements on the set 
	           {
	              s.insert(arr[j]);
	           }
	        }
	        if(s.size()==0)//empty set 
	        cout<<-1<<" ";
	        else
	        cout<<*(s.begin())<<" ";
	    }
	    cout<<"\n";
	}
	return 0;
}


TC:O((n*n)+klogk)



#include <bits/stdc++.h>
using namespace std;

int main() {
	//code
	int t;cin>>t;
	while(t--)
	{
	    int n;cin>>n;
	    int arr[n];
	    for(int i=0;i<n;i++)
	    {
	        cin>>arr[i];
	    }
	   set<int>s;
	    for(int i=0;i<n;i++)
	    {
	        
	       auto itr=s.lower_bound(arr[i]);
	       if(itr!=s.begin())
	        {
	            --itr;
	           cout<<*(itr)<<" ";
	        }
	       else
	       cout<<-1<<" ";
	       s.insert(arr[i]);
	    }
	    cout<<"\n";
	}
	return 0;
}


nlogn
