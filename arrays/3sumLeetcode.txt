Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Notice that the solution set must not contain duplicate triplets.
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

///////////////////////----------------------///////////////////
Brute force approach  : TC:O(N3) SC:O(N2) 
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int> >answer;
        if(nums.size()<3)
            return answer;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-2;i++)
        {
        if(i>0 && nums[i]==nums[i-1])
            continue;//to skip having repeated triplets
         for(int j=i+1;j<nums.size()-1;j++)
         {
             for(int k=j+1;k<nums.size();k++)
             {
                 if(nums[i]+nums[j]+nums[k]==0)
                 {
                     vector<int>temp;
                     temp.push_back(nums[i]);
                     temp.push_back(nums[j]);
                     temp.push_back(nums[k]);
                     answer.push_back(temp);

                 }
                 
             }
        }
        }
        return answer;
    }
};
/////////////////////------------------------//////////////////////////////
TWO POINTER TECHNIQUE  : TC:O(N*N)

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int> >answer;
        if(nums.size()<3)
            return answer;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-2;i++)
        {
            if(nums[i]>0)
                continue;
        if(i>0 && nums[i]==nums[i-1])
            continue;//to skip having repeated digits
            int left=i+1;int right=nums.size()-1;
            while(left<right)
            {
                if(nums[left]+nums[right]+nums[i]==0)
                {
                    
                    answer.push_back(vector{nums[left],nums[right],nums[i]});
                    while(left<right && nums[left]==nums[left+1])
                    left++;//to skip for duplicate elements
                    while(left<right && nums[right]==nums[right-1])
                        right--;//to skip for duplicate elements
                    left++;
                    right--;
                }
                else if(nums[left]+nums[right]+nums[i]<0)
                {
                    left++;
                }
                else if(nums[left]+nums[right]+nums[i]>0)
                {
                    right--;
                }
     
            }
         
        }
        return answer;
    }
};