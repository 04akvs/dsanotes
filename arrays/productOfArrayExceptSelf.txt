Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Constraint: It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.

Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)



class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int>result;int pro=1;int n=nums.size();
        for(int i=0;i<n;i++)
        {
            pro=1;
            for(int j=0;j<n;j++)
            {
                if(j!=i)
                {
                    pro=pro*nums[j];
                }
            }
            result.push_back(pro);
        }
        return result;
    }
};

TC:O(n*n)
SC:O(1)



//////////////////////////////////////

what we can analyze  that 
product of array except self is =product of numbers  on its left *product of numbers on its right

so we can maintain two arrays left and right : left [i] stores the product of elements on the left of nums[i]
                                               right[i] stores the product of elements on the right of nums[i]

        example:  nums=[1,2,3,4]
                  left[]=[1,1,2,6]
                  right[]=[24,12,4,1]
                  result[]=[24,12,8,6]


class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
       int n=nums.size();
        vector<int>result(n,0);int pro=1;
    vector<int>left(n,0);vector<int>right(n,0);
    left[0]=1;
    right[n-1]=1;
        for(int i=1;i<n;i++)
        {
          left[i]=left[i-1]*nums[i-1];  
        }
        for(int i=n-2;i>=0;i--)
        {
          right[i]=right[i+1]*nums[i+1];  
        }
        for(int i=0;i<n;i++)
        {
          result[i]=left[i]*right[i];  
        }
        return result;
    }
    
};


TC:O(n)
SC:O(n)


////////////////////////////////////////



optimal approach in O(1) space complexity 



