Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Constraint: It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.

Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)



class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int>result;int pro=1;int n=nums.size();
        for(int i=0;i<n;i++)
        {
            pro=1;
            for(int j=0;j<n;j++)
            {
                if(j!=i)
                {
                    pro=pro*nums[j];
                }
            }
            result.push_back(pro);
        }
        return result;
    }
};

TC:O(n*n)
SC:O(1)
