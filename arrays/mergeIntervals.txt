Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if(intervals.size()<=1)
            return intervals;
        sort(intervals.begin(),intervals.end());
        vector<vector<int>>finalIntervals;
       vector<int>temp=intervals[0];
        for(auto i:intervals)
        {
        if(i[0]<=temp[1])
        {
            temp[1]=max(temp[1],i[1]);
        }
            else
            {
                finalIntervals.push_back(temp);
                temp=i;
            }
        }
        finalIntervals.push_back(temp);
        return finalIntervals;
    }
};
Time complexity :O(n*log n) +O(n)
