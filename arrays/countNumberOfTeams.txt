There are n soldiers standing in a line. Each soldier is assigned a unique rating value.

You have to form a team of 3 soldiers amongst them under the following rules:

Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).

 

Example 1:

Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 
Example 2:

Input: rating = [2,1,3]
Output: 0
Explanation: We can't form any team given the conditions.
Example 3:

Input: rating = [1,2,3,4]
Output: 4

method 1: is to check triplets one by one i.e check all the possibilities one by one 

using three loops 

class Solution {
public:
    int numTeams(vector<int>& arr) {
        if(arr.size()<3)
            return 0;
        int n=arr.size();
        int teams=0;
        for(int i=0;i<n-2;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                for(int k=j+1;k<n;k++)
                {
                    if(arr[i]>arr[j] && arr[i]>arr[k] && arr[j]>arr[k])
                    {
                        teams++;
                    }
                    else if(arr[i]<arr[j] && arr[i]<arr[k] && arr[j]<arr[k])
                        teams++;
                }
            }
        }
        return teams;
     
    }
};



TC:O(n*n*n)

so definitely we need to think of a better approach:


