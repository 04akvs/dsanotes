Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
Example 3:

Input: nums = [1,1]
Output: 1
Example 4:

Input: nums = [1,1,2]
Output: 1
 

Constraints:

2 <= n <= 3 * 104
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
 

Follow up:

How can we prove that at least one duplicate number must exist in nums?
Can you solve the problem without modifying the array nums?
Can you solve the problem using only constant, O(1) extra space?
Can you solve the problem with runtime complexity less than O(n2)?



Brute force-


is t orun two nested loops and check 


int find(vector<int>&nums){
    int n=nums.size();
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++)
        {
            if(arr[i]==arr[j])
            return arr[i];
        }
    }
    return 0;
}
TC:O(n*n)

//////////////////////////////////////////////////////////////////////////

Another solution :


is to sort the array and check whether arr[i]==arr[i+1]


TC:O(nlogn)


////////////////////////////////////////////////////////////
Efficient in runtime:

ehat I can think of initially is to maintain a freq array of n+1 elements which will store the freq of each element 
then traverse this array to check which element has freq>1

that will be our duplicate element 


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n=nums.size();
        vector<int>count(n+1,0);
        for(int i=0;i<n;i++)
            count[nums[i]]++;
        for(int i=1;i<=n;i++)
            if(count[i]>1)
                return i;
        return 0;
    }
};

TC:O(n)
SC:O(n)



//////////////////////////////////////////////////////////////////




O(1)  space solution :




 //linked list cycle detection method 

class Solution {
public:
   
    int findDuplicate(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return 0;
        int slow=nums[0];
        int fast=nums[nums[0]];
        while(slow!=fast){
            slow=nums[slow];
            fast=nums[nums[fast]];
        }
        slow=0;
        while(slow!=fast){
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
};

TC:O(n)

