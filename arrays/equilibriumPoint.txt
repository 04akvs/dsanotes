GFG link :
https://practice.geeksforgeeks.org/problems/equilibrium-point-1587115620/1#

Given an array A of n positive numbers. The task is to find the first Equilibium Point in the array. 
Equilibrium Point in an array is a position such that the sum of elements before it is equal to the sum of elements after it.

Example 1:

Input:
n = 1
A[] = {1}
Output: 1
Explanation: Since its the only 
element hence its the only equilibrium 
point. 
Example 2:

Input:
n = 5
A[] = {1,3,5,2,2}
Output: 3
Explanation: For second test case 
equilibrium point is at position 3 
as elements before it (1+3) = 
elements after it (2+2).
 

Your Task:
The task is to complete the function equilibriumPoint() which takes the array and n as input parameters and returns the point of equilibrium. Return -1 if no such point exists.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= n <= 106
1 <= A[i] <= 108

Company Tags
 Adobe  Amazon



 Brute force approach :

 it is that point from which sum on both sides is equal 
 left side==right side
 thus we can have two arrays to store prefix sum from left and right 

int equilibriumPoint(long long arr[], int n) {
    
        // Your code here
        long long left[n];
        long long right[n];
        left[0]=arr[0];
        right[n-1]=arr[n-1];
       for(int i=1;i<n;i++)
       left[i]=left[i-1]+arr[i];
       for(int i=n-2;i>=0;i--)
       right[i]=right[i+1]+arr[i];
       for(int i=0;i<n;i++){
           if(left[i]==right[i])
           return i+1;
       }
       return -1;
    }
    TC:O(n)
    SC:O(n)


////////////////////////////////////////////////////////////////////

optimised approach :

without using extra space :

sum[0,i]=sum[i+2,n]
sum[i+2]=sum[0,n]-arr[i+2-1]-sum[0,i]

int equilibriumPoint(long long arr[], int n) {
    
        // Your code here
        if(n==1)
        return 1;
        int total=0;int sum=0;
        for(int i=0;i<n;i++)
        total+=arr[i];
       for(int i=0;i<n-1;i++){
           sum+=arr[i];
           if(sum==total-sum-arr[i+1])
           return i+2;
       }
       return -1;
    }

    TC:O(n)
    SC:O(1)
