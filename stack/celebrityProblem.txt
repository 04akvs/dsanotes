A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.
Note: Follow 0 based indexing.
 

Example 1:

Input:
N = 3
M[][] = {{0 1 0},
         {0 0 0}, 
         {0 1 0}}
Output: 1

the intitial solution that is coming to my mind is by using graph approach :
lets say M[i][j]==1 when there is an edge between i & j directed from i to j
since everyone knows the celebrity then indegree of celebrity should be n-1 and outdegree of celebrity should be zero as he doesnt know anyone 


class Solution {
    public:
    int celebrity(vector<vector<int> >& M, int n) {
        // code here 
         int people[n]={0};
         for(int i=0;i<M.size();i++)
         {
             for(int j=0;j<M[i].size();j++)
             {
                 if(M[i][j]==1)
                 {
                     people[j]++;
                 }
             }
         }
         int celebrity=-1;
         for(int i=0;i<n;i++)
         {
             
             if(people[i]==n-1)//if everyone knows i (as n people thus for i to be celebrity its value should be equal to n-1)
             celebrity=i;
         }
         return celebrity;
    }
};


TC:O(n*n)
SC:O(n)


