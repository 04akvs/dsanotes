We are given a linked list with head as the first node.  Let's number the nodes in the list: node_1, node_2, node_3, ... etc.

Each node may have a next larger value: for node_i, next_larger(node_i) is the node_j.val such that j > i, node_j.val > node_i.val, and j is the smallest possible choice.  If such a j does not exist, the next larger value is 0.

Return an array of integers answer, where answer[i] = next_larger(node_{i+1}).

Note that in the example inputs (not outputs) below, arrays such as [2,1,5] represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5.

 

Example 1:

Input: [2,1,5]
Output: [5,5,0]
Example 2:

Input: [2,7,4,3,5]
Output: [7,0,5,5,0]
Example 3:

Input: [1,7,5,1,9,2,5,1]
Output: [7,9,9,9,0,5,0,0]
 

Note:

1 <= node.val <= 10^9 for each node in the linked list.
The given list has length in the range [0, 10000].

same approach like next greater element but before that we need to reverse the linked list 


class Solution {
public:
    ListNode* reverse(ListNode* head)
    {
        ListNode* prev=NULL;ListNode* curr=NULL;
        while(head!=NULL)
        {
            curr=head->next;
            head->next=prev;
            prev=head;
            head=curr;
        }
        return prev;
    }
    vector<int> nextLargerNodes(ListNode* head) {
            vector<int>answer;
        answer.push_back(0);
        if( head->next==NULL)
        {
            return answer;
        }
       ListNode* revHead=reverse(head);
        ListNode* temp=revHead;
        stack<int>st;
        st.push(temp->val);
        temp=temp->next;
        while(temp!=NULL)
        {
            while(!st.empty() && st.top()<=temp->val)
                    st.pop();
                if(st.empty())
                    answer.push_back(0);
                else
                    answer.push_back(st.top());
            st.push(temp->val);
            temp=temp->next;
             
        }
        std::reverse(answer.begin(),answer.end());
         return answer;
    }
};



TC:O(n)
SC:O(n)
