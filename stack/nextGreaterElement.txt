
gfg question :



Given an array arr[ ] of size N having distinct elements, the task is to find the next greater element for each element of the array in order of their appearance in the array.
Next greater element of an element in the array is the nearest element on the right which is greater than the current element.
If there does not exist next greater of current element, then next greater element for current element is -1. For example, next greater of the last element is always -1.

Example 1:

Input: 
N = 4, arr[] = [1 3 2 4]
Output:
3 4 4 -1
Explanation:
In the array, the next larger element 
to 1 is 3 , 3 is 4 , 2 is 4 and for 4 ? 
since it doesn't exist, it is -1.




vector <long long> nextLargerElement(long long arr[], int n){
    // Your code here
    vector<long long >v;
    for(int i=0;i<n-1;i++)//for every element we can run a loop to go to its right 
    {
         long long maxx=INT_MIN;
        for(int j=i+1;j<n;j++)//then check whether some element is greater than it or not 
        {
          if(arr[j]>arr[i])
          {
              maxx=arr[j];//if yes then that is the max 
              break;
          }
        }
        if(maxx==INT_MIN)
        v.push_back(-1);
        else
        v.push_back(maxx);
    }
    //for the last element push -1 as no element is there on its right 
    v.push_back(-1);
    return v;
}


TC:O(n*n)
sc:O(1)



method 2: of improved time complexity 


we can think of using a stack as we need  to access the larger elements we encountered so far from right direction 


vector <long long> nextLargerElement(long long arr[], int n){
    // Your code here
    vector<long long >v;
    v.push_back(-1);
    stack<long long >st;
    st.push(arr[n-1]);//the first  accessible element that has the chance to be greater than arr[n-2] is arr[n-1] thus push it into stack 
    for(int i=n-2;i>=0;i--)
    {
        if(!st.empty() && arr[i]<st.top())// then that means top () is >arr[i] thus it is its NGE
        {
            v.push_back(st.top());
            st.push(arr[i]);
        }
        else if(!st.empty() && arr[i]>=st.top()) 
        {
           while(!st.empty() && arr[i]>=st.top())//pop out elements until we find a greater element to it on right 
           {
               st.pop();
           }
           if(!st.empty())//if our stack gets empty then that means arr[i] does npt have any greater element to its right 
           v.push_back(st.top());
           else
           v.push_back(-1);
           st.push(arr[i]);
           
        }
    }
    reverse(v.begin(),v.end());//if we would have used array we shouldn't have been required to reverse it as in that array simply place that at the required index
    return v;
}


TC:O(n)
SC:O(n)


