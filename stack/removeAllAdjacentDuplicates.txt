Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.

We repeatedly make duplicate removals on S until we no longer can.

Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.

 

Example 1:

Input: "abbaca"
Output: "ca"
Explanation: 
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".


class Solution {
public:
    string removeDuplicates(string str) {
        stack<char>st;
        st.push(str[0]);
        for(int i=1;i<str.size();i++)
        {
            if(!st.empty() && str[i]==st.top())//if it'll match with its previous element then its definitely a adjacent duplicate thus pop its ocuurence 
                st.pop();
            else
                st.push(str[i]);//else its occuring singly therefore insert it 
        }
        string res="";
        while(!st.empty())
        {
            char s=st.top();
            res=s+res;//to get original string since stack gives us reversed output 
            st.pop();
        }
        return res;
    }
};


TC:O(n)
SC:O(n)



can be done without using stack too in   O(1) space 


string res="";int k=0;
        for(int i=0;i<str.size();i++)
        {
            if(res=="" || res[k-1]!=str[i])
            {
                res+=str[i];k++;
            }
            else
            {res.pop_back();k--;//if adjacent duplicate then pop the occurence out 
            }
        }
        return res;
        