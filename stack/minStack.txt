 Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2



method 1: we can take an extra stack whose top will always store the minimum element of the original stack 

class MinStack {
public:
    /** initialize your data structure here. */
    stack<int>s1,s2;
    
    void push(int x) {
       s1.push(x);
        if(s2.empty() || x<=getMin())
            s2.push(x);
    }
    
    void pop() {
          if (s1.top() == getMin())  s2.pop();
	    s1.pop();     
    }
    
    int top() {
        return s1.top();
    }
    
    int getMin() {
        return s2.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(x);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */

 TC:O(1)

 sC:O(n)

 //////////////////////////////




 using a single stack:





 class MinStack {
public:
    /** initialize your data structure here. */
  stack<pair<int, int>> stk;
    
    MinStack() {
        
    }
    
    void push(int val) {
        int minVal = INT_MAX;
        if(stk.empty()){
            minVal = val;
        } else {
            minVal = min(stk.top().second, val);
        }
        
        stk.push({val, minVal});
    }
    
    void pop() {
        stk.pop();
    }
    
    int top() {
        return stk.top().first;
    }
    
    int getMin() {
        return stk.top().second;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(x);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */

 When popping it will remove both top and minimum element. How will we be able to get the minimum in that case?
minVal finds the min of the stack every time you push an element. It won't matter.
If an element modifies the minVal, and you remove that element in the future, the minVal goes back to what it was.
If the addition of an element didn't change minVal, it won't change it if that element is removed from stack.

minVal is always calculated for the addition of every element and is not tied to any specific element. 




///////////////////////////////////////////////////////////////////////////////////////////


using O(1)

space :

but can give overflow

class MinStack {
public:
    /** initialize your data structure here. */
    int min=0;
    stack<int>st;
    MinStack() {
        
    }
    void push(int val) {
        if(st.empty())
        {
            st.push(val);
            min=val;
        }
        else if(val>=min)
        {
            st.push(val);
        }
        else{
            //update our min
            st.push(2*val-min);
             min=val;
        }
    }
    
    void pop() {
        if(st.top()>=min)
            st.pop();
        else{
            min=2*min-st.top();//top is going to be removed so get our previous min 
            st.pop();
        }
    }
    int top() {
        return st.top();
    }
    
    int getMin() {
        return min;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */