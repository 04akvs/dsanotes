 Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, 
 find the area of largest rectangle in the histogram.

 


Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].

output=10;
 
Brute force approach that we would think of first is that :
find the minimum height column between every possible subarrays and then calculate area 
area=minHeight*(distance between those two columns or boundaries)
=minHeight*(i-j+1)
TC:O(N*N*N)
int main() {
	//code

	    int n;cin>>n;int arr[n];
	    for(int i=0;i<n;i++)
	    cin>>arr[i];
	    //we find the minimum height between the two boundaries and that would be our height of the rectangle and the width would be 
	    //the number of columns between these two
	    int area=0;
	    for(int i=0;i<n;i++)
	    {
	        
	        for(int j=0;j<n;j++)
	        {
	            int minHeight=min(arr[i],arr[j]);
	            for(int k=i;k<=j;k++)
	            {
	                minHeight=min(minHeight,arr[k]);
	            }
	            area=max(minHeight*(j-i+1),area);
	        }
	    }
	    cout<<area<<"\n";
	return 0;
}
////////////////----------------////////////////
O(N*N) appoach id that keep on moving and calculating the area simultaneously with the minHeight 
int area=0;
	    for(int i=0;i<n;i++)
	    {
	        int minn=arr[i];
	        for(int j=i;j<n;j++)
	        {
	            minn=min(arr[j],minn);
	        area=max(minn*(j-i+1),area);
	    }
	    }
	    cout<<area<<"\n";
        int main() {
	//code//////////////////////////////////////////



Approach based on NExt smaller element on left and right 

	 class Solution {
public:
    //the building will stop expanding on the left and right when the height of next adjacent building is smaller than the current building 
    //thus for every index find the next smaller height on left & right
    int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();
        vector<int>left(n,0);
        vector<int>right(n,0);
        stack<int>st;
        for(int i=0;i<n;i++){
                while(!st.empty() && heights[st.top()]>=heights[i])
                    st.pop();
                if(st.empty())//no smaller on the left 
                    left[i]=-1;
                else
                    left[i]=st.top();
            st.push(i);
    }
        
        stack<int>stk;
        for(int i=n-1;i>=0;i--){
                while(!stk.empty() && heights[i]<=heights[stk.top()])
                    stk.pop();
                if(stk.empty())//no smaller on the left 
                    right[i]=n;
                else
                    right[i]=stk.top();
            stk.push(i);
        }
        int maxArea=0;
        for(int i=0;i<n;i++){
            //cout<<((right[i]-left[i])-1)*heights[i]<<" ";
            maxArea=max(maxArea,((right[i]-left[i])-1)*heights[i]);
        }
        return maxArea;
        
    }
};



////////////////////////////////////////////////////////////////

Space optimised approach :



    Stack based approach O(N)
	class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        //we can have the boundaries and find the minimum height b/w them so the area would be height*distance b/w the boundaries
        int n=heights.size();
        if(n==0)
            return 0;
        if(n==1)
            return heights[0];
        heights.push_back(0);
    stack<int> st;
    int maxArea = 0;
    for(int i=0;i<heights.size();i++)
    {
        while(!st.empty() && heights[i]<heights[st.top()])
        {
            int x = st.top();
            st.pop();
            int index = st.size() == 0 ? -1 : st.top();
            maxArea= max(maxArea,heights[x]*(i-index-1));
        }
        st.push(i);
    }
     return maxArea;

    }
};