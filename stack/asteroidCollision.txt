We are given an array asteroids of integers representing asteroids in a row.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.

 

Example 1:

Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.
Example 2:

Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.
Example 3:

Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.
Example 4:

Input: asteroids = [-2,-1,1,2]
Output: [-2,-1,1,2]
Explanation: The -2 and -1 are moving left, while the 1 and 2 are moving right. Asteroids moving the same direction never meet, so no asteroids will meet each other.




class Solution {
public:
    vector<int> asteroidCollision(vector<int>& asteroids) {
        ///keep in mind that asteroids moving in the same direction never meet 
        stack<int>st;vector<int>v;
        for(int i=0;i<asteroids.size();i++)
        {
            if(asteroids[i]>0)
            {
                st.push(asteroids[i]);
            }
            else
            {
                if(!st.empty() && st.top()>0)//then negative will crash with positive one 
                {
                    int prev=st.top();
                    st.push(asteroids[i]);//the negative direction one 
                    while(!st.empty() && (prev>0 && st.top()<0))
                    {
                        int asteroid=st.top();st.pop();
                        if(abs(asteroid)>st.top())
                        {
                            st.pop();//smaller one out 
                            if(!st.empty())
                             prev=st.top();
                            else
                                prev=0;
                            st.push(asteroid);//push the left asteriod after collision 
                        }
                        else if(abs(asteroid)==st.top())//both will burst 
                        {
                            st.pop();
                            if(!st.empty())
                             prev=st.top();
                            else
                                prev=0;
                        }
                        
                    }
                }
                else
                    st.push(asteroids[i]);//if just negatives with no positives to collide to
            }
        }
        while(!st.empty())
        {
            
            v.push_back(st.top());st.pop();
        }
        reverse(v.begin(),v.end());
        return v;
    }
};





TC:O(n)

SC:O(n)


