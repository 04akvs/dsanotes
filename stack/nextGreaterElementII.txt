
Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.

Example 1:

Input: [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number; 
The second 1's next greater number needs to search circularly, which is also 2.
Note: The length of given array won't exceed 10000.





class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        int n=nums.size();
        vector<int>x;
        if(nums.size()==0)
            return x;
        for(int i=0;i<n;i++)
        {
            nums.push_back(nums[i]);//since its a circular array it would be better if we form a new array 
            //so that we can access the elements on the left of any element too 
         }
        //rest is same as NGE
        stack<int>st;
        int newSize=nums.size();st.push(nums[newSize-1]);
        vector<int>v(newSize,-1);
        for(int i=newSize-2;i>=0;i--)
        {
            while(!st.empty() && nums[i]>=st.top())
            {
                //then pop until we get NGE
               st.pop();
            }
            if(st.empty())//that means there was no NGE 
            {
                v[i]=-1;
            }
            else
                v[i]=st.top();
            st.push(nums[i]);
        }
        vector<int>answer;
        for(int i=0;i<n;i++)
        {
           answer.push_back(v[i]);
        }
        return answer;
    }
};


