
Leetcode 85:
https://leetcode.com/problems/maximal-rectangle/


Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = []
Output: 0
Example 3:

Input: matrix = [["0"]]
Output: 0
Example 4:

Input: matrix = [["1"]]
Output: 1
Example 5:

Input: matrix = [["0","0"]]
Output: 0
 

Constraints:

rows == matrix.length
cols == matrix[i].length
0 <= row, cols <= 200
matrix[i][j] is '0' or '1'.




Based on largest area histogram approach :

break the n*m 2D matrix into n histograms and find the max area of each 

class Solution {
public:
    int MAH(int a[], int n)
{
    int i, ans=0;
    stack<int> s;
    vector<int> nsl(n),nsr(n);
    //finding nearest smaller to left
    for(i=0;i<n;i++)
    {
            while (!s.empty() && a[s.top()]>=a[i])
                s.pop();
            if(s.empty())
                nsl[i]=-1;
            else
                nsl[i]=s.top();
        
        s.push(i);
    }
 
    while(!s.empty())
        s.pop();
 
    // finding nearest smaller element to right
    for(i=n-1;i>=0;i--)
    {
            while (!s.empty() && a[s.top()]>=a[i])
                s.pop();
            if(s.empty())
                nsr[i]=n;
            else
                nsr[i]=s.top();
        s.push(i);
    }
 
    for(i=0;i<n;i++)
        ans=max(ans, a[i]*(nsr[i]-nsl[i]-1));
    return ans;
}
    int maximalRectangle(vector<vector<char>>& a) {
        if(a.size()==0)
            return 0;
        int n=a.size();int m=a[0].size();
        int temp[m];int ans=0;memset(temp,0,sizeof(temp));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
                a[i][j]!='0'?(temp[j]+=(a[i][j]-'0')):(temp[j]=0);
 
            ans=max(ans, MAH(temp,m));
        }
    return ans;
    }
};

TC:O(n*m)
