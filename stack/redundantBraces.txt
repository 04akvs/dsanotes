
interviewbit link-https://www.interviewbit.com/problems/redundant-braces/


Given a string A denoting an expression. It contains the following operators ’+’, ‘-‘, ‘*’, ‘/’.

Chech whether A has redundant braces or not.

Return 1 if A has redundant braces, else return 0.

Note: A will be always a valid expression.



Input Format

The only argument given is string A.
Output Format

Return 1 if string has redundant braces, else return 0.
For Example

Input 1:
    A = "((a + b))"
Output 1:
    1
    Explanation 1:
        ((a + b)) has redundant braces so answer will be 1.

Input 2:
    A = "(a + (a + b))"
Output 2:
    0
    Explanation 2:
        (a + (a + b)) doesn't have have any redundant braces so answer will be 0.



int Solution::braces(string A) {
    //between any opening and closing bracket there should be a operator present 
    stack<int>st;
    stack<int>op;
    for(int i=0;i<A.size();i++){
        if(A[i]=='('){
            st.push(i);
        }
        else if(A[i]==')'){
            if(op.empty())
            return 1;
            else {
                int index=st.top();
                bool present=false;//whether a operator is present between them or not 
                while(!op.empty() && op.top()>=index){
                    op.pop();
                    present=true;
                }
                if(!present)
                return 1;
                st.pop();
            }
        }
        else if(A[i]=='+' || A[i]=='*' || A[i]=='/' || A[i]=='-')
        op.push(i);
    }
    return 0;//no redundant bracket 
}


