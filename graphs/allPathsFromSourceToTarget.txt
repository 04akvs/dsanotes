Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1, and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

 

Example 1:


Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.


method 1:
DFS approach:
class Solution{
    public:
    void dfs(vector<vector<int>>graph,vector<vector<int>>&paths,vector<int>path,int src,int dest)
    {
        path.push_back(src);
        if(src==dest)
        {
            paths.push_back(path);
            return ;
        }
        for(auto node:graph[src])
        {
            dfs(graph,paths,path,node,dest);
         }
     }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph)
    {
        int nodes=graph.size();
        vector<vector<int> >paths;
        vector<int>path;
        if(nodes==0)
            return paths;
        dfs(graph,paths,path,0,nodes-1);
        return paths;
        
    }
};


