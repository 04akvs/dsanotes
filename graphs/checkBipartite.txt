Given an adjacency matrix representation of a graph g having 0 based index your task is to complete the function isBipartite which returns true if the graph is a bipartite graph else returns false.

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains an integer v denoting the no of vertices of the graph then in the next line are v*v space separated values of the adjacency matrix representation of the graph g.

Output:
For each test case in a new line output will be 1 if the graph is bipartite else 0.

Constraints:
1<=T<=100
1<=v<=15
0<=g[][]<=1

Example(To be used only for expected output):
Input:
2
4
0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0
3
0 1 0 0 0 1 1 0 0
Output:
1
0

Following is a simple algorithm to find out whether a given graph is Birpartite or not using Breadth First Search (BFS). 
1. Assign RED color to the source vertex (putting into set U). 
2. Color all the neighbors with BLUE color (putting into set V). 
3. Color all neighborâ€™s neighbor with RED color (putting into set U). 
4. This way, assign color to all vertices such that it satisfies all the constraints of m way coloring problem where m = 2. 
5. While assigning colors, if we find a neighbor which is colored with same color as current vertex, then the graph cannot be colored with 2 vertices (or graph is not Bipartite) 

bool isBipartite(int G[][MAX],int V)
{
     //Your code here
     vector<int>color(V,-1);
    queue<int>q;
    q.push(0);color[0]=1;
    
    for(int j=0;j<V;j++)//for every vertex in case of graph having more than one connected components 
    {
        if(color[j]==-1)
          {
              color[j]=1;
              q.push(j);
          }
    while(!q.empty())
    {
       int src=q.front();
       q.pop();
       if(G[src][src]==1)//as a graph having self loop can never be bipartite 
       return false;
       //now color its neightbors
       for(int i=0;i<V;i++)
       {
          if(G[src][i]==1 && color[i]==-1)
          {
              color[i]=1-color[src];
              q.push(i);
          }
          else if(G[src][i]==1 && color[i]==color[src])
          return false;
       }
    }
    }
    return true;
}


Time complexity is : O(V^2) where V is number of vertices. 
If graph is represented using adjacency list, then the complexity becomes O(V+E).



//////////////////////////////

Method 2 :DFS based solution 

// C++ program to find out whether a given graph is Bipartite or not. 
// Using recursion. 
#include <iostream> 
  
using namespace std; 
#define V 4 
  
  
bool colorGraph(int G[][V],int color[],int pos, int c){ 
      
    if(color[pos] != -1 && color[pos] !=c) 
        return false; 
          
    // color this pos as c and all its neighbours and 1-c 
    color[pos] = c; 
    bool ans = true; 
    for(int i=0;i<V;i++){ 
        if(G[pos][i]){ 
            if(color[i] == -1) 
                ans &= colorGraph(G,color,i,1-c); 
                  
            if(color[i] !=-1 && color[i] != 1-c) 
                return false; 
        } 
        if (!ans) 
            return false; 
    } 
      
    return true; 
} 
  
bool isBipartite(int G[][V]){ 
    int color[V]; 
    for(int i=0;i<V;i++) 
        color[i] = -1; 
          
    //start is vertex 0; 
    int pos = 0; 
    // two colors 1 and 0 
    return colorGraph(G,color,pos,1); 
      
} 
  
int main() 
{ 
    int G[][V] = {{0, 1, 0, 1}, 
        {1, 0, 1, 0}, 
        {0, 1, 0, 1}, 
        {1, 0, 1, 0} 
    }; 
  
    isBipartite(G) ? cout<< "Yes" : cout << "No"; 
    return 0; 
}  