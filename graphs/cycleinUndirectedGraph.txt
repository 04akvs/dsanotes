Given a Undirected Graph. Check whether it contains a cycle or not. 


Method 1: DFS based approachwe have to check if there exists a back edge or not 

if any node's neighbour - is already visited and that is not the parent of the node , then obviously there must have been a cycle present which allowed that node to be visited fromm some other node 


bool cyclereal(int i,vector<bool> &mark,int parent,vector<int>graph[])
    {
       
        mark[i]=true;//that node is marked as visited
       
        for(int j=0;j<graph[i].size();j++)
        {
            if(mark[graph[i][j]]==false)
            {
                if(cyclereal(graph[i][j],mark,i,graph)==true)
                    return true;
            }
            else  if(mark[graph[i][j]]==true && graph[i][j]!=parent)
                return true;
        }
        return false;
        
        
    }
bool isCyclic(vector<int> g[], int v)
{
   // Your code here
    vector<bool> mark(v);
     
        for(int i=0;i<v;i++)
        {
            mark[i]=false;
        }
        for(int i=0;i<v;i++)
        {
            if(mark[i]==false)
                if(cyclereal(i,mark,-1,g))//parent of source node is not present thus -1
            return true;
        }
            return false;
    }
   
   

   TC:O(v+e)
   SC:O(v)


   Method 2: bfs based approach

   bool isCyclicConntected(vector<int> adj[], int s, 
                        int V, vector<bool>& visited) 
{ 
    // Set parent vertex for every vertex as -1. 
    vector<int> parent(V, -1); 
  
    // Create a queue for BFS 
    queue<int> q; 
  
    // Mark the current node as visited and enqueue it 
    visited[s] = true; 
    q.push(s); 
  
    while (!q.empty()) { 
  
        // Dequeue a vertex from queue and print it 
        int u = q.front(); 
        q.pop(); 
  
        // Get all adjacent vertices of the dequeued 
        // vertex u. If a adjacent has not been visited, 
        // then mark it visited and enqueue it. We also 
        // mark parent so that parent is not considered 
        // for cycle. 
        for (auto v : adj[u]) { 
            if (!visited[v]) { 
                visited[v] = true; 
                q.push(v); 
                parent[v] = u; 
            } 
            else if (parent[u] != v) //if that neighbour is already visited and its not its parent
                return true; //then cycle is present
        } 
    } 
    return false; 
} 
  
bool isCyclic(vector<int> adj[], int V) 
{ 
    // Mark all the vertices as not visited 
    vector<bool> visited(V, false); 
  
    for (int i = 0; i < V; i++) //if the graph is disconnected
        if (!visited[i] && isCyclicConntected(adj, i, 
                                         V, visited)) 
            return true; 
    return false; 
} 
TC:O(v+e)
