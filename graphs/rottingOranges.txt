
Leetcode 994:

https://leetcode.com/problems/rotting-oranges/



You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.


Method 1: BFS based approach 

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>>q;
        int m=grid.size();int n=grid[0].size();
        bool rotten=false;bool fresh=false;
        //let's put all oranges in direct contact with rotten oranges first into the basket
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2)//rotten
                {
                    rotten=true;
                    q.push({i+1,j});q.push({i-1,j});
                    q.push({i,j+1});q.push({i,j-1});
                }
                if(grid[i][j]==1)
                    fresh=true;
            }
        }
        //edge cases 1.when no rotten oranges and no fresh then no time elapsed
        //2.when no rotten oranges but fresh oranges remaining 
        if(!rotten && !fresh)return 0;
        if(!rotten && fresh)return -1;
        vector<vector<bool>>visited(m,vector<bool>(n,false));
        int time=0;//starting time is 0 when we see basket 
        while(!q.empty()){
            time++;
            int sz=q.size();//for like level order traversal 
            for(int k=0;k<sz;k++){
                int i=q.front().first;
                int j=q.front().second;
                q.pop();
                if(i>=0 && j>=0 && i<m && j<n && !visited[i][j] && grid[i][j]==1){//now this fresh orange will get rotten and thus needs to be placed in the queue as it will now make adjacent oranges rotten 
                    visited[i][j]=true;
                    grid[i][j]=2;//convert it to rotten 
                    q.push({i+1,j});q.push({i-1,j});
                    q.push({i,j-1});q.push({i,j+1});
                }
            }
        }
        //now check whether all oranges get rotten
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1)//rotten
                {
                   return -1;
                }
            }
        }
        return time-1;
        
    }
};

TC:O(n*m)
sc:O(n*m)