
Leetcode 1162:
https://leetcode.com/problems/as-far-from-land-as-possible/




Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return -1.

The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.

 

Example 1:


Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.
Example 2:


Input: grid = [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 100
grid[i][j] is 0 or 1



Method 1: BFS based approach 
class Solution {
public:
    
     //do BFS starting from all land cells in the same time.
    int maxDistance(vector<vector<int>>& grid) {
        int m=grid.size();int n=grid[0].size();
        queue<pair<int,int>>q;
        vector<vector<bool>>visited(m,vector<bool>(n,false));
        //consider all 1's as source nodes 
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    q.push({i+1,j});q.push({i-1,j});q.push({i,j-1});q.push({i,j+1});
                }
            }
        }
        int level=0;int maxDist=0;
        while(!q.empty()){
            int sz=q.size();
            level++;
            for(int k=0;k<sz;k++){
                int i=q.front().first;
                int j=q.front().second;
                q.pop();
                if(i>=0 && j>=0 && j<n && i<m && !visited[i][j] && grid[i][j]==0){
                    visited[i][j]=true;
                    maxDist=max(maxDist,level);
                    q.push({i+1,j});q.push({i-1,j});q.push({i,j-1});q.push({i,j+1});
                }
            }
        }
        return maxDist==0?-1:maxDist;
        
    }
};

TC:O(n*m)

