Leetcode 785:


Given an undirected graph, return true if and only if it is bipartite.

Recall that a graph is bipartite if we can split its set of nodes into two independent subsets A and B, such that every edge in the graph has one node in A and another node in B.

The graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists. Each node is an integer between 0 and graph.length - 1. There are no self edges or parallel edges: graph[i] does not contain i, and it doesn't contain any element twice.

 

Example 1:


Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true
Explanation: We can divide the vertices into two groups: {0, 2} and {1, 3}.

Example 2:


Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: We cannot find a way to divide the set of nodes into two independent subsets.
 

Constraints:

1 <= graph.length <= 100
0 <= graph[i].length < 100
0 <= graph[i][j] <= graph.length - 1
graph[i][j] != i
All the values of graph[i] are unique.
The graph is guaranteed to be undirected. 








class Solution {
public:
    //graph coloring bipartite DFS
   bool bfs(vector<vector<int>>& graph, vector<int>& color, int node, int clr){
        queue<int>q;
        q.push(node);
       color[node]=clr;
       while(!q.empty()){
           int src=q.front();
           q.pop();
           //now color its adjacent nodes
           for(int i=0;i<graph[src].size();i++){
               if(color[graph[src][i]]==-1){
                   color[graph[src][i]]=1-color[src];
                   q.push(graph[src][i]);
               }else if(color[graph[src][i]]==color[src])
                   return false;
           }
       }
       return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> color(graph.size(),-1); //unvisited
        int clr=0;
        for(int i=0;i<graph.size();i++){    // for loop since some nodes in graph can be disconnected
            if(color[i]==-1){
                if(!bfs(graph,color,i,clr))
                    return false;
            }
            
        }
        return true;
    }
};

TC:O(v+e)



DFS solution :



class Solution {
public:
    //graph coloring bipartite DFS
   bool dfs(vector<vector<int>>& graph, vector<int>& color, int node, int clr)     {
           color[node]=clr;
       for(int i=0;i<graph[node].size();i++){
           if(color[graph[node][i]]==-1){//unvisited
               if(!dfs(graph,color,graph[node][i],1-clr))
                   return false;//not bipartite
           }else if(color[graph[node][i]]==color[node])
               return false;//not bipartite
       }
       return true;//bipartite
    }
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> color(graph.size(),-1); //unvisited
        for(int i=0;i<graph.size();i++){    // for loop since some nodes in graph can be disconnected
            if(color[i]==-1){//uncolored      
                if(!dfs(graph,color,i,0)){//means cycle 
                    return false;
                }
            }
        }
        return true;
    }
};


TC:O(v+e)

