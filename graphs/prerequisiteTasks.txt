There are a total of N tasks, labeled from 0 to N-1. Some tasks may have prerequisites, for example to do task 0 you have to first complete task 1, which is expressed as a pair: [0, 1]
Given the total number of tasks N and a list of prerequisite pairs P, find if it is possible to finish all tasks.


Example 1:

Input: 
N = 4, P = 3
prerequisites = {{1,0},{2,1},{3,2}}
Output:
Yes
Explanation:
To do task 1 you should have completed
task 0, and to do task 2 you should 
have finished task 1, and to do task 3 you 
should have finished task 2. So it is possible.
Example 2:

Input:
N = 2, P = 2
prerequisites = {{1,0},{0,1}}
Output:
No
Explanation:
To do task 1 you should have completed
task 0, and to do task 0 you should
have finished task 1. So it is impossible.

Your task:
You don’t need to read input or print anything. Your task is to complete the function isPossible() which takes the integer N denoting the number of tasks, P denoting the number of prerequisite pairs and prerequisite as input parameters and returns true if it is possible to finish all tasks otherwise returns false. 


Expected Time Complexity: O(N + P)
Expected Auxiliary Space: O(N + P)


Constraints:
1 ≤ N ≤ 104
1 ≤ P ≤ 105





we need to find a linear ordering of tasks such that a schedule can be followed 

topological sorting can only be applied on a directed acyclic graph thus if cycle hogi toh no schedule can be formed 

bool isPossible(int n, vector<pair<int,int>>&pre) {
	    // Code here
	    vector<int>indegree(n);
	    vector<int>schedule;
	    queue<int>q;
	    vector<int>graph[n];
	    for(int i=0;i<pre.size();i++){
	        graph[pre[i].first].push_back(pre[i].second);
	        indegree[pre[i].second]++;
	    }
	    for(int i=0;i<n;i++){
	        if(indegree[i]==0){
	            q.push(i);
	        }
	    }
	    //now we'll do that first and go to task 
	    while(!q.empty()){
	        int src=q.front();
	        q.pop();
	        schedule.push_back(src);
	        //now it is going to be done so remove it decreasing the indegree of adjacent nodes 
	        for(int i=0;i<graph[src].size();i++){
	            indegree[graph[src][i]]--;
	            if(indegree[graph[src][i]]==0){
	                q.push(graph[src][i]);
	            }
	        }
	    }
	    return schedule.size()==n; 
	}


