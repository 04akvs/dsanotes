In a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.


Example 1:

Input: N = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: N = 3, trust = [[1,3],[2,3]]
Output: 3
Example 3:

Input: N = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1


class Solution {
public:
    int findJudge(int n, vector<vector<int>>& trust) {
        vector<int>graph[n+1];
        unordered_map<int,int>m;int townJudge=-1;
        for(int i=0;i<trust.size();i++)
        {
            int src=trust[i][0];
            int dest=trust[i][1];
            m[dest]++;
            graph[src].push_back(dest);
        }
        for(int i=1;i<=n;i++)
        {
            //any vertex whose outgoing edges is zero and 
            //the number of incoming edges is equal to n-1
            if(graph[i].size()==0 && m[i]==n-1)
            {
                townJudge=i;
            }
        }
        return townJudge;
    }
};



