Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.

Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.

Notice that you can return the vertices in any order.

 

Example 1:



Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]
Output: [0,3]
Explanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].


Necesssary condition: All nodes with no in-degree must in the final result,
because they can not be reached from
All other nodes can be reached from any other nodes.

Sufficient condition: All other nodes can be reached from some other nodes.

class Solution {
public:
    vector<int> findSmallestSetOfVertices(int n, vector<vector<int>>& edges) {
       int incoming[100001]={0};
        int outgoing[100001]={0};
        vector<int>result;
        if(n==0)
            return result;
        for(int i=0;i<edges.size();i++)
        {
            
                incoming[edges[i][1]]++;
        }
        for(int i=0;i<n;i++)
        {
            if(incoming[i]==0)
                result.push_back(i);
         }
        return result;
    }
};

TC:O(E) E=the number of edges
SC:O(N)  N=the number of nodes