You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.

 

Example 1:


Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2
Example 2:

Input: times = [[1,2,1]], n = 2, k = 1
Output: 1
Example 3:

Input: times = [[1,2,1]], n = 2, k = 2
Output: -1
 

Constraints:

1 <= k <= n <= 100
1 <= times.length <= 6000
times[i].length == 3
1 <= ui, vi <= n
ui != vi
0 <= wi <= 100
All the pairs (ui, vi) are unique. (i.e., no multiple edges.)



basically what i can analyse is that its a single source shortest path algo 


Method 1: using bellman ford algo 


class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        int src=k;//src node
        //we have to find the dist/time taken from source node to every other node 
        //thsu maximum taken will be time taken to receive the signal
        //we can use bellman ford approach to find the shortest path form a single source to all other nodes 
        vector<int>dist(n+1,100000);//initialize distances of other nodes as INF from source
        dist[src]=0;dist[0]=0;
        int e=times.size();
        for(int i=0;i<n-1;i++)//relax it for vertices-1 tiems
        {
          for(int j=0;j<e;j++)
          {
            int u=times[j][0];
             int v=times[j][1];
              int timee=times[j][2];
              if(dist[v]>dist[u]+timee)//if distance is more than update it to a path having a smaller distance 
                  dist[v]=dist[u]+timee;
          }
        }
        int maxTime=INT_MIN;
        for(int i=0;i<n+1;i++)
        {
            maxTime=max(maxTime,dist[i]);//find the maximum time 
        }
        return maxTime==100000?-1:maxTime;
    }
};

TC:O(V*E)

SC:O(V)


Method 2:all pairs shortest path 

FLoyd Warshall algo

class Solution {
public:
    

class Solution {
public:
    //if I use floyd warshall algo 
    //all pairs shortest path 
    //TC:O(v*v*v)
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        //relax the vertices n-1 times
                  int dist[n+1][n+1];
        for(int i=0;i<n+1;i++){
            for(int j=0;j<n+1;j++){
                if(i==j)dist[i][j]=0;
                else dist[i][j]=100000;//initially assume very far 
            }
        }
            for(int j=0;j<times.size();j++){
                int u=times[j][0];
                int v=times[j][1];
                int wt=times[j][2];
                dist[u][v]=wt; 
            }
        for(int k=1;k<=n;k++){
            for(int i=1;i<=n;i++){
                for(int j=1;j<=n;j++){
                   dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]); 
                }
            }
        }
        //maximum time taken will be our answer 
        int maxtime=-1;
        for(int i=1;i<n+1;i++){
            maxtime=max(maxtime,dist[k][i]);
        }
        return maxtime==100000?-1:maxtime;
    }
};



TC:O(V*V*V)

SC:O(V*V)

///////////////////////////////////////////////////////////////////////////////

Method 3:  Dijkstra's algo 


Without using priority_queue


class Solution {
public:
  //we can also use dijkstra's algo to find the single source shortest path
    int minDist(vector<bool>&spset,vector<int>&dist,int v){
        int minIndex=-1;int minn=INT_MAX;
        for(int i=1;i<v;i++){
            if(!spset[i] && dist[i]<=minn){
                minn=dist[i];
                minIndex=i;
            }
        }
        return minIndex;
    }
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        //relax the vertices n-1 times
          vector<bool>spset(n+1,false);//no node in set 
          vector<int>dist(n+1,100000);
          dist[k]=0;//source node
        int graph[n+1][n+1];
         for(int i=0;i<n+1;i++){
            for(int j=0;j<n+1;j++){
                if(i==j)graph[i][j]=0;
                else graph[i][j]=100000;//initially assume very far 
            }
        }
            for(int j=0;j<times.size();j++){
                int u=times[j][0];
                int v=times[j][1];
                int wt=times[j][2];
                graph[u][v]=wt; 
            }
          for(int i=0;i<n-1;i++){//relax it n-1 items 
              int minIndex=minDist(spset,dist,n+1);//find the node at minDistance from it 
              spset[minIndex]=true;
              //now relax its adjacent vertices 
              for(int j=1;j<n+1;j++){
                  if(!spset[j] && dist[j]>dist[minIndex]+graph[minIndex][j] )
                      dist[j]=dist[minIndex]+graph[minIndex][j];
              }
          }
        //maximum time taken will be our answer 
        int maxtime=-1;
        for(int i=1;i<n+1;i++){
            maxtime=max(maxtime,dist[i]);
        }
        return maxtime==100000?-1:maxtime;
    }
};

SC:O(n)
TC:O(n*n)


with priority_queue:

class Solution {
public:
    //using dijkstra algo with priority queue 
    typedef pair<int,int> pp;
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        int res=0;
        vector<pp> adj[n+1];
        for(auto x:times)
        {
            adj[x[0]].push_back(make_pair(x[1],x[2]));
        }
        vector<int> dis(n+1,INT_MAX);
        dis[k]=0;
        priority_queue<pp,vector<pp>,greater<pp>> pq;
        pq.push(make_pair(dis[k],k));
        while(!pq.empty())
        {
            pp tmp=pq.top();
            pq.pop();
            int node=tmp.second;
            for(auto ch:adj[node])
            {
                int chnode=ch.first;
                int chwt=ch.second;
                if(dis[chnode]>dis[node]+chwt)
                {
                    dis[chnode]=dis[node]+chwt;
                    pq.push(make_pair(dis[chnode],chnode));
                }
            }
        }
        for(int i=1;i<=n;i++)
        {
            if(dis[i]==INT_MAX)
                return -1;
            res=max(res,dis[i]);
        }
        return res;
    }
};