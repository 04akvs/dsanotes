In an N by N square grid, each cell is either empty (0) or blocked (1).

A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:

Adjacent cells C_i and C_{i+1} are connected 8-directionally (ie., they are different and share an edge or corner)
C_1 is at location (0, 0) (ie. has value grid[0][0])
C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])
If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).
Return the length of the shortest such clear path from top-left to bottom-right.  If such a path does not exist, return -1.

 

Example 1:

Input: [[0,1],[1,0]]


Output: 2

Example 2:

Input: [[0,0,0],[1,1,0],[1,1,0]]


Output: 4

 

Note:

1 <= grid.length == grid[0].length <= 100
grid[r][c] is 0 or 1




Method 1 : bfs based approach 
 
it is used to find only the first possible path (thus finds the shortest path instead of checking all possibilities )

Time complexity is O(N*N) because in the worst-case scenario, the BFS has to visit all the cells in the grid when there is no obstacles. The visitedMap makes sure that the algorithm is not visiting a node (being added back to the queue) for a second time.
Space complexity is O(N^2) because of the visited matrix.



class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& mat) {
        int m=mat.size();int n=mat[0].size();
        vector<vector<bool>>visited(m,vector<bool>(n,false));
        queue<pair<int,int>>q;
        //start  top right 0 as source node  at level=0
        //push its adjacent nodes in the queue
        //such that we can find the shortest path 
        if(mat[0][0]==1 || mat[m-1][n-1]==1)
            return -1;
        if(m==1 && n==1 && mat[0][0]==0)
            return 1;
        int dx[]={-1,-1,0,+1,+1,+1,0,-1};
        int dy[]={0,+1,+1,+1,0,-1,-1,-1};
        for(int i=0;i<8;i++){
            q.push({dx[i],dy[i]});
        }
        int level=0;//initial level is zero 
        bool reached=false;
        while(!q.empty()){
            int sz=q.size();
             level++;
            for(int k=0;k<sz;k++){
                int i=q.front().first;
                int j=q.front().second;
                q.pop();
               if(i>=0 && j>=0 && i<m && j<n && !visited[i][j] && mat[i][j]==0){
                   mat[i][j]=level;
                   visited[i][j]=true;
                   if(i==m-1 && j==n-1)
                {
                    reached=true;
                      break;
                }
                   for(int l=0;l<8;l++){
                      q.push({i+dx[l],j+dy[l]});
                      }
               }
            }
            if(reached)
                break;
        }
        return reached?level+1:-1;
    }
};

TC:O(n*n)
