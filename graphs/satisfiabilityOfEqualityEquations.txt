leetcode 990-
https://leetcode.com/problems/satisfiability-of-equality-equations/



Given an array equations of strings that represent relationships between variables, each string equations[i] has length 4 and takes one of two different forms: "a==b" or "a!=b".  Here, a and b are lowercase letters (not necessarily different) that represent one-letter variable names.

Return true if and only if it is possible to assign integers to variable names so as to satisfy all the given equations.

 

Example 1:

Input: ["a==b","b!=a"]
Output: false
Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.  There is no way to assign the variables to satisfy both equations.
Example 2:

Input: ["b==a","a==b"]
Output: true
Explanation: We could assign a = 1 and b = 1 to satisfy both equations.
Example 3:

Input: ["a==b","b==c","a==c"]
Output: true
Example 4:

Input: ["a==b","b!=c","c==a"]
Output: false
Example 5:

Input: ["c==c","b==d","x!=z"]
Output: true
 

Note:

1 <= equations.length <= 500
equations[i].length == 4
equations[i][0] and equations[i][3] are lowercase letters
equations[i][1] is either '=' or '!'
equations[i][2] is '='



 just traverse the graph twice, first time for connecting the commponents having equal sign '=' and second time for '!'

class Solution {
public:
    int find(vector<int>&parent,int x){
        if(parent[x]==x)
            return x;
        return parent[x]=find(parent,parent[x]);
    }
    bool equationsPossible(vector<string>& equations) {
        int num=1;
        vector<int>parent(26,0);
        for(int i=0;i<26;i++)
            parent[i]=i;
        for(int i=0;i<equations.size();i++){
                char u=equations[i][0];
                char v=equations[i][3];
                char sign1=equations[i][1];
                char sign2=equations[i][2];
                if(sign1==sign2)
                {
                int x = find(parent,u-'a');
                int y = find(parent,v-'a');
                if (x != y)
                    parent[y] = x;
               }
        }
         for(int i=0;i<equations.size();i++){
                char u=equations[i][0];
                char v=equations[i][3];
                char sign1=equations[i][1];
                char sign2=equations[i][2];
                if(sign1!=sign2){
                int x = find(parent,u-'a');
                int y = find(parent,v-'a');
                if (x == y)
                    return false;
             }
            }
       
        return true;
        
    }
};
TC:O(n)


