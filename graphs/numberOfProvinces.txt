
Leetcode 547-
https://leetcode.com/problems/number-of-provinces/


There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:


Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2
Example 2:


Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
 

Constraints:

1 <= n <= 200
n == isConnected.length
n == isConnected[i].length
isConnected[i][j] is 1 or 0.
isConnected[i][i] == 1
isConnected[i][j] == isConnected[j][i]

DFS based approach :



//i think its a question of connected components 
    //find number of connected components 
class Solution {
public:
    //i think its a question of connected components 
    //find number of connected components 
    void dfs(vector<vector<int>>&graph,vector<bool>&visited,int src){
        visited[src]=true;
        //now visit its adjacent nodes
        for(int i=0;i<graph[src].size();i++){
            if(!visited[graph[src][i]])
            {
                dfs(graph,visited,graph[src][i]);
            }
        }
        
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int v=isConnected.size();
        vector<vector<int>>graph(v);
        vector<bool>visited(v,false);
        int conn=0;int same=0;
        for(int i=0;i<v;i++){
            for(int j=0;j<v;j++){
                if(isConnected[i][j]==1){
                    if(i==j)
                        same++;
                    graph[i].push_back(j);
                }      
            }
        }
        for(int i=0;i<graph.size();i++){
            if(!visited[i])
            {
                dfs(graph,visited,i);
                conn++;
                }
            }
        return conn;
        
    }
};


TC:O(v*e)
sC:O(v)
