In this problem, a tree is an undirected graph that is connected and has no cycles.

The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u < v, that represents an undirected edge connecting nodes u and v.

Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u < v.

Example 1:

Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \
2 - 3
Example 2:

Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]
Output: [1,4]
Explanation: The given undirected graph will be like this:
5 - 1 - 2
    |   |
    4 - 3
Note:

The size of the input 2D-array will be between 3 and 1000.
Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.


class Solution {
public:
    /*
     * Find the subset a vertex belongs to.
     */
    int find(vector<int> &ss, int x) {
        if (ss[x] == -1) return x;
        return find(ss, ss[x]);
    }
    
    /*
     * Unionize two subsets. 
     */
    void _union(vector<int> &ss, int x, int y) {
        int xp = find(ss, x);
        int yp = find(ss, y);
        if (xp != yp) ss[yp] = xp;
    }
    
    /*
     * We use disjoint set (or Union-Find) to detect a cycle in
     * an undirected graph.
     */
    vector<int> findRedundantConnection(vector<vector<int> >& e/*dges*/) {
        
        /* Create parent subsets and initialize them to -1 - this means
         * the subsets contain only one item - i.e ss[i] only contains
         * vertex i.
         */
        vector<int> ss; ss.push_back(-1);
        for (int i = 0; i < e.size(); i++) ss.push_back(-1);
        
        /*
         * We go through each edge one by one. We find the subset
         * that the vertices of an edge belongs to. If they belong
         * to two different subsets, we merge them into one set 
         * using Union. Now, if both vertices are in the same 
         * subset, we got a cycle - we return it.
         *
         */
        for (int i = 0; i < e.size(); ++i) {
            int x = find(ss, e[i][0]), y = find(ss, e[i][1]);            
            if (x == y) return { e[i][0], e[i][1] };
            _union(ss, x, y);
        }
        
        /* No redundant edge found */
        return vector<int>();
    }
};


time complexity in worst case:O(n*n)

