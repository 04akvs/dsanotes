
Leetcode 947-
https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/



On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.

 

Example 1:

Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].
2. Remove stone [2,1] because it shares the same column as [0,1].
3. Remove stone [1,2] because it shares the same row as [1,0].
4. Remove stone [1,0] because it shares the same column as [0,0].
5. Remove stone [0,1] because it shares the same row as [0,0].
Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.
Example 2:

Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
Output: 3
Explanation: One way to make 3 moves is as follows:
1. Remove stone [2,2] because it shares the same row as [2,0].
2. Remove stone [2,0] because it shares the same column as [0,0].
3. Remove stone [0,2] because it shares the same row as [0,0].
Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.
Example 3:

Input: stones = [[0,0]]
Output: 0
Explanation: [0,0] is the only stone on the plane, so you cannot remove it.
 

Constraints:

1 <= stones.length <= 1000
0 <= xi, yi <= 104
No two stones are at the same coordinate point.




we can find how many stones can be covered from one stone by dfs toh unko we won't visit dobara .
that means they can be removed .




class Solution {
public:
    //dfs based solution 
    void dfs(vector<vector<int>>& stones,vector<bool>&visited,int i){
        visited[i]=true;
        for(int j=0;j<stones.size();j++){//were connected either through row or column 
            if(!visited[j] && (stones[j][0]==stones[i][0] || stones[j][1]==stones[i][1]))
                dfs(stones,visited,j);
        }
    }
    int removeStones(vector<vector<int>>& stones) {
        int n=stones.size();
        int island=0;
        vector<bool>visited(n,false);
        for(int i=0;i<n;i++){
            if(!visited[i]){
                dfs(stones,visited,i);
                island++;
            }
        }
        return n-island;
    }
};

TC:O(n*n) worst case
SC:O(n) for visited array 



////////////////////////////////////////////////////////////////////



union and find based approach :



class Solution {
public:
//   If 2 stones are in the same column/row, we connect them as a component (please go through union find approach)
// At end we calculate number of components by checking the parent array.
// The largest possible number of moves = Total count of stones - number of components.
    int find(vector<int>&parent,int x){
        if(parent[x]==-1)
            return x;
        return parent[x]=find(parent,parent[x]);
    }
    bool unionn(vector<int>&parent,int x,int y){
        int parentx=find(parent,x);
        int parenty=find(parent,y);
        if(parentx==parenty)
            return false;
        parent[parenty]=parentx;
        return true;
    }
    int removeStones(vector<vector<int>>& stones) {
        int n=stones.size();
        int component=0;
        vector<int>parent(n+1,-1);
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(stones[i][0]==stones[j][0] || stones[i][1]==stones[j][1])
                   unionn(parent,i,j);
            }
            }
        for(int i=0;i<n;i++)
            if(parent[i]==-1)
                component++;
        return n-component;
        }
};

TC:O(n*nlogn)

log(n) for path compression 

SC:O(n)

