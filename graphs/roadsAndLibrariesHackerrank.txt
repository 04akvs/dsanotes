

https://www.hackerrank.com/challenges/torque-and-development/problem




#include<bits/stdc++.h>
using namespace std;
void dfs(long src,vector<bool>&vis,vector<long>v[],vector<long>&nodes)
{
    vis[src]=true;nodes.push_back(src);
    for(int i=0;i<v[src].size();i++)
    {
        long  x=v[src][i];
        if(!vis[x])
        {
            dfs(x,vis,v,nodes);
        }
    }
}
int main()
{
    int q;
    cin>>q;
    while(q--)
    {
    long  n,e;
    cin>>n>>e;
    long lc,lr;
    cin>>lc>>lr;
    vector<long >v[n+1];
    for(int i=0;i<e;i++)
    {
    long  x,y;
    cin>>x>>y;
    v[x].push_back(y);
    v[y].push_back(x);
    }
    long  c=0;
    long  cost=0;
    if(lc<=lr)
    {
    cost=n*lc;
    }
    else
    {
    vector<bool>vis(n+1,false);
    for(long i=1;i<=n;i++)
    {
        if(!vis[i])
        {
            vector<long>nodes;//number of nodes in each connected component
            dfs(i,vis,v,nodes);
            cost+=(nodes.size()-1)*lr;//eaxh connected component requires only nodes-1 edges to be connected 
            ++c;
        }
    }
    cost+=c*lc;
    }
    cout<<cost<<endl;
    }
    return 0;
}

TC:O(v*e)  as its simple dfs 

