Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.

 

Example 1:



Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation: 
Islands in gray are closed because they are completely surrounded by water (group of 1s).
Example 2:



Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
Output: 1
Example 3:

Input: grid = [[1,1,1,1,1,1,1],
               [1,0,0,0,0,0,1],
               [1,0,1,1,1,0,1],
               [1,0,1,0,1,0,1],
               [1,0,1,1,1,0,1],
               [1,0,0,0,0,0,1],
               [1,1,1,1,1,1,1]]
Output: 2
 

Constraints:

1 <= grid.length, grid[0].length <= 100
0 <= grid[i][j] <=1



class Solution {
public:
    void dfs(vector<vector<int>>& grid, vector<vector<bool>>& visited, int i, int j, int m, int n) {
 		if (i < 0 || i >= m || j < 0 || j >= n) return;
 		if (grid[i][j] == 1 || visited[i][j]) return;
 		visited[i][j] = true;
 		dfs(grid, visited, i+1, j, m, n);
 		dfs(grid, visited, i, j+1, m, n);
 		dfs(grid, visited, i-1, j, m, n);
 		dfs(grid, visited, i, j-1, m, n);
 	}
    int closedIsland(vector<vector<int>>& grid) {
        if (grid.empty()) return 0;

 		int m = grid.size();
 		int n = grid[0].size();
 		vector<vector<bool>>visited(m, vector<bool>(n, false));

 		int island = 0;
        //mark all the corner land as visited as they can never form closed island 
        //first column 
 		for (int i = 0; i < m; i++) {
 				if (grid[i][0] == 0 && !visited[i][0]) {
 					dfs(grid, visited, i, 0, m, n);
 					
 				}
 			}
        //mark all the corner land as visited as they can never form closed island 
        //first row
    for (int j = 0; j < n; j++) {
 				if (grid[0][j] == 0 && !visited[0][j]) {
 					dfs(grid, visited, 0, j, m, n);
 					
 				}
 			}
        //last column
        for (int i = 0; i < m; i++) {
 				if (grid[i][n-1] == 0 && !visited[i][n-1]) {
 					dfs(grid, visited, i, n-1, m, n);
 					
 				}
 			}
        //last row
    for (int j = 0; j < n; j++) {
 				if (grid[m-1][j] == 0 && !visited[m-1][j]) {
 					dfs(grid, visited, m-1, j, m, n);
 					
 				}
 			}
        //now just check the number of connected components of 0 
        for (int i = 1; i < m-1; i++) {
 			for (int j = 1; j < n-1; j++) {
 				if (grid[i][j]==0 && !visited[i][j]) {
 					dfs(grid, visited, i, j, m, n);
                    island++;
                    
 				}
                
 			}
          
 		}
        return island;
    }
};

TC:O(n*m)
SC:O(n*m)

