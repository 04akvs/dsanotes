Leetcode 200-

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.





class Solution {
public:
    
class Solution {
public:
    //a land is surrounded by water on its sides
    //a single peice of land is also an island also
    //island is a group of single land together
    void dfs(vector<vector<char>>& grid,vector<vector<bool>>&visited,int i,int j,int m,int n){
        if(i>=m || j>=n || i<0 || j<0 || visited[i][j] || grid[i][j]=='0')//can't move furthur
            return ;
         visited[i][j]=true;//we take it into account
        dfs(grid,visited,i+1,j,m,n);
         dfs(grid,visited,i-1,j,m,n);
         dfs(grid,visited,i,j+1,m,n);
         dfs(grid,visited,i,j-1,m,n);
    }
    int numIslands(vector<vector<char>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        int island=0;
       vector<vector<bool>>visited(m,vector<bool>(n,false)); 
       for(int i=0;i<m;i++){
           for(int j=0;j<n;j++){
               if(grid[i][j]=='1' && !visited[i][j])
               {
                   //then we'll visit all its neughbouring land and mark it as single island
                   dfs(grid,visited,i,j,m,n);
                   island++;
               }
           }
       }
        return island;
    }
};




TC:O(n*m)
sc:O(m*n)




to improve the space complexity :

we can avoid taking the visited 2d array & instead mark any land as '0' after it gets visited

class Solution {
public:
    //a land is surrounded by water on its sides
    //a single peice of land is also an island also
    //island is a group of single land together
    void dfs(vector<vector<char>>& grid,int i,int j,int m,int n){
        if(i>=m || j>=n || i<0 || j<0 || grid[i][j]=='0')//can't move furthur
            return ;
         grid[i][j]='0';//we take it into account &make it 0 so that doesn't get furthur visited
        dfs(grid,i+1,j,m,n);
         dfs(grid,i-1,j,m,n);
         dfs(grid,i,j+1,m,n);
         dfs(grid,i,j-1,m,n);
    }
    int numIslands(vector<vector<char>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        int island=0; 
       for(int i=0;i<m;i++){
           for(int j=0;j<n;j++){
               if(grid[i][j]=='1')
               {
                   //then we'll visit all its neughbouring land and mark it as single island
                   dfs(grid,i,j,m,n);
                   island++;
               }
           }
       }
        return island;
    }
};

tc:O(m*n)

sc:O(1)

