Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.


class Solution {
public:
    void backtrack( vector<vector<int>>&ans,vector<int>temp,vector<int>&nums,int start,int n){
       for(int i=start;i<nums.size();i++){ // iterating for every element in nums
            temp.push_back(nums[i]); // adding every element in our subset
            ans.push_back(temp); // adding this subset to our final answer
            backtrack(ans,temp,nums,i+1,n); // going for more elements to get added to our subset
            temp.pop_back(); // popping previously added element to return to the initial state and generate other subsets
        }
    }
    vector<vector<int>> subsets(vector<int>& nums) {
         vector<vector<int>>ans;
         vector<int>temp;
        int n=nums.size();
        ans.push_back(temp);
        backtrack(ans,temp,nums,0,n);
        return ans;
    }
};


