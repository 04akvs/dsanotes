Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30



class Solution {
public:
    void backtrack(vector<int>temp,int i,int n,int target,int sum,vector<int>&nums,vector<vector<int>>&ans,set<vector<int>>&s){
        if(sum>target){
            return ;
        }
        if(sum==target){
            ans.push_back(temp);
            return ;
                
        }
        for(int j=i;j<n;j++)
        {
            if(j>i && nums[j]==nums[j-1])//to avoid duplicates 
                continue;
        temp.push_back(nums[j]);
        backtrack(temp,j+1,n,target,sum+nums[j],nums,ans,s);
        temp.pop_back();  
        }
        
    }
    vector<vector<int>> combinationSum2(vector<int>& nums, int target) {
        vector<vector<int>>ans;
        sort(nums.begin(),nums.end());
        set<vector<int>>s;
        vector<int>temp;int sum=0;int n=nums.size();
        backtrack(temp,0,n,target,sum,nums,ans,s);
        return ans;
    }
};



