Given two arrays A and B of equal size, the advantage of A with respect to B is the number of indices i for which A[i] > B[i].

Return any permutation of A that maximizes its advantage with respect to B.

 

Example 1:

Input: A = [2,7,11,15], B = [1,10,4,11]
Output: [2,11,7,15]
Example 2:

Input: A = [12,24,8,32], B = [13,25,32,11]
Output: [24,32,8,12]
 

Note:

1 <= A.length = B.length <= 10000
0 <= A[i] <= 10^9
0 <= B[i] <= 10^9

basic brute force approach that comes to my mind is -
generate all possible permutations of array A and then for every generated permutation check which one has maximum advantage

class Solution {
public:
    //gives all possible combinations of an array 
     void permute( vector<vector<int>>&combo,vector<int>&nums,int start,int n){
        if(start>=n){
            //tried one set of all possible combo
            combo.push_back(nums);
            return ;
        }
        for(int i=start;i<n;i++)
        {
            swap(nums[start],nums[i]);
            permute(combo,nums,start+1,n);
            swap(nums[start],nums[i]);
        }
        
    }
    vector<int> advantageCount(vector<int>& a, vector<int>& b) {
        vector<vector<int>>combo;
        int n=a.size();
        int start=0;
        vector<int>answer;int maxx=-1;
        permute(combo,a,start,n);
        for(auto c:combo){
            vector<int>temp=c;
            int advantage=0;
            for(int i=0;i<temp.size();i++)
            {
                if(temp[i]>b[i]){
                advantage++;
                }
            }
            if(advantage>maxx){
                maxx=advantage;
                answer=temp;
            }
        }
        return answer;
        
    }
};



TC:O(n!*n )

gives TLE




efficient approach :




class Solution {
public:
    vector<int> advantageCount(vector<int>& A, vector<int>& B) {
       int n = A.size();
        if(n < 2 ) return A;
    
        sort(A.begin(), A.end());
        vector<pair<int,int>> C;
        for(int i=0; i<n; ++i)
            C.push_back( make_pair(B[i], i));    
        sort(C.begin(), C.end());
       
        int l = 0, r = n-1;
        vector<int> D(n); 
        for(int i = n-1; i >=0; i--){
           if(A[r]>C[i].first)
                D[C[i].second] = A[r--];//higher value 
            else
                D[C[i].second] = A[l++];       
        }   
        return D;
        
    }
};



TC:O(nlogn)


