Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []
Example 4:

Input: candidates = [1], target = 1
Output: [[1]]
Example 5:

Input: candidates = [1], target = 2
Output: [[1,1]]


what i can think here is that every element has to be either included or excluded to make upto that target
Since the problem is to get all the possible results, not the best or the number of result,
 thus we don't need to consider DP(dynamic programming), recursion is needed to handle it.



class Solution {
public:
   
   void knapsack(vector<vector<int> >&combo,vector<int>&candi,int target,int i,int n,vector<int>&temp)
   {
       if(i>=n || target<0)
       {
           return ;
       }
       if(target==0)//we were able to reach our target using that combo
       {
            combo.push_back(temp);
             return  ;
       }
           temp.push_back(candi[i]);//include this element 
           knapsack(combo,candi,target-candi[i],i,n,temp);//included thus target decreased by candi[i]
           temp.pop_back();//see whether by removing that we can get to our target 
           knapsack(combo,candi,target,i+1,n,temp); //excluded thus target remains same  
       
   }
    vector<vector<int>> combinationSum(vector<int>& candi, int target) {
        //it seems like a question of unbounded knapsack
        vector<vector<int> >combo;
        int n=candi.size();vector<int>temp;
        knapsack(combo,candi,target,0,n,temp);
        return combo;
        
    }
};

The largest number of elements in a combination sum would be [min, min, min ...], and to get the upper bound, we can say that for each element in the max length combination array, we can pick from any of the elements we are given.

Therefore, the complexity should be: len(candidates)^ (target/min(candidates))


