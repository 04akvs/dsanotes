Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.


class Solution {
public:
   
    bool ispalin(string& s, int start, int end) {
        while(start <= end) {
            if(s[start++] != s[end--])
                return false;
        }
        return true;
    }
    
    void backtrack( vector<vector<string>>&ans,vector<string>&temp,int start,int n,string s,string &str){
        if(start==n)
        {
            // for(int i=0;i<temp.size();i++)
            // cout<<temp[i]<<" ";
            ans.push_back(temp);
            return ;
        }
        //we need to start from every characater
        for(int i=start;i<n;i++)
        {
            if(ispalin(s,start,i)){//if that string is a palindrome 
            temp.push_back(s.substr(start,i-start+1));
            backtrack(ans,temp,i+1,n,s,str);
            temp.pop_back();
            }
            
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        int n=s.size();
        vector<string>temp;
        string str="";
        backtrack(ans,temp,0,n,s,str);
        return ans;
    }
};


