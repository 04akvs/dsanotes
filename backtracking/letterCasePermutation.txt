Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.

Return a list of all possible strings we could create. You can return the output in any order.

 

Example 1:

Input: S = "a1b2"
Output: ["a1b2","a1B2","A1b2","A1B2"]
Example 2:

Input: S = "3z4"
Output: ["3z4","3Z4"]
Example 3:

Input: S = "12345"
Output: ["12345"]
Example 4:

Input: S = "0"
Output: ["0"]
 Constraints:

S will be a string with length between 1 and 12.
S will consist only of letters or digits.



There are two main cases which needs to be solved recursively:

The element at the given index is a digit

Append the digit to the end of curr and go to next index(i+1).

curr.push_back(s[i]);
solve(curr,s,i+1);
The element at the given index is an alphabet, this case has two sub cases:

Append tolower(s[i]) to curr and go to next index (i+1).

//sub case 1, considering lower case
string c1=curr;
c1.push_back(tolower(s[i]));
solve(c1,s,i+1);
Append toupper(s[i]) to curr and go to next index (i+1).

//sub case 2, considering upper case
string c2=curr;
c2.push_back(toupper(s[i]));
solve(c2,s,i+1);
If at any function call, the index = S.length(), then curr string has one of our output, so save it in ans vector,

// if end of the string is reached
if(i==s.length()){
	ans.push_back(curr); // push the current "curr" string to ans
	return;
}
At the end of the recursion return ans.

class Solution {
public:
    //every letter has two options - smaller or capital form
    void recur(string s,int i,int n,string str,vector<string>&ans)
    {
        if(i==n)//we reached the end 
        {
            ans.push_back(str);
            return ;
        }
        if(s[i]>='0' && s[i]<='9')
        {
            recur(s,i+1,n,str+s[i],ans);//no change in case
        }
        else if(s[i]>='a' && s[i]<='z')
        {
           char ch=s[i]-32;//upper case 
            recur(s,i+1,n,str+ch,ans);//change the case
            recur(s,i+1,n,str+s[i],ans);//no change in case
        }
        else{
          char ch=s[i]+32;
            recur(s,i+1,n,str+s[i],ans);//no change in case
            recur(s,i+1,n,str+ch,ans);//change the case
            
        }
    }
    vector<string> letterCasePermutation(string s) {
        vector<string>ans;
        string str="";int n=s.size();
        recur(s,0,n,str,ans);
        return ans;
    }
};


lesser recursive calls



TIME COMPLEXITY
O(2^n) [From recursion tree, at each level nodes are increasing by power of 2]

SPACE COMPLEXITY
O(n) [Maximum depth of recursion tree]

///////////////////////////////////////////////




backtracking approach :



class Solution {
public:
    vector<string> letterCasePermutation(string S) {
        
        vector<string>sol;
        string temp="";
        int i=0;
        bc(S,sol,temp,i);
        return sol;
    }
    
    void bc(string s, vector<string>& sol, string temp, int j)
    {
	   //push the answer to result set when you have completed iterating over the whole string
        if(temp.size()==s.size())
        {
            sol.push_back(temp);
            return;
        }
        else
        {
		      // if the string char is a digit you just need to push it to your temp string and move ahead
                if(s[j]>='0' && s[j]<='9')
                {
                    temp.push_back(s[j]);
                    bc(s,sol,temp,j+1);
                    temp.pop_back();
                }
				//if string char is a letter you need to explore both upper and lower case possibilities.
                else
                
                    temp.push_back(toupper(s[j]));
                    bc(s,sol,temp,j+1);
                    temp.pop_back();
                    temp.push_back(tolower(s[j]));
                    bc(s,sol,temp,j+1);
                    temp.pop_back();   
                }
                return;
        } 
    }
};







//////////////////////////////////////



since we can see a tree like structure another approach that comes to our mind is BFS-



Create a queue and insert an empty string into it along with pos = 0.
Begin the BFS traversal.
Pop a string and position index ( = pos) from the queue.
to this string, append lowercase and uppercase of str[pos] if the str[pos] is a character.
Add both the versions of the string obtained above into the queue.
Else, if str[pos] is numeric, simply append the numeric to the string.
Add the string to the queue.
The traversal should go on till all the characters of the input string have been processed. i.e. pos = str.length()-1 .
After the traversal is over, out all the strings from the queue.



class Solution {
public:
    //every letter has two options - smaller or capital form
    //since we get a tree like structure thus using bfs we can make it into iterative form 
    vector<string> letterCasePermutation(string s) {
        vector<string>ans;
        string str="";
        int n=s.size();
       queue<pair<string,int>>q;
        q.push({s,0});//starting index is 0
        ans.push_back(s);
        while(!q.empty())
        {
           string str=q.front().first;
            int pos=q.front().second;//the position in string we are at currently
            q.pop();
            if(pos==n)//we reached the end of the string i.e traversed all
            {
                break;
            }
            if(str[pos]>='0' && str[pos]<='9')//if its a digit 
            {
                //then simply push it w/o changing any case
                q.push({str,pos+1});
            }
            else if(str[pos]>='a' && str[pos]<='z')
            {
                q.push({str,pos+1});//first insert as it is 
                //we need to change cases
                str[pos]=str[pos]-32;
                q.push({str,pos+1});
            }
            else
            {
                q.push({str,pos+1});//first insert as it is 
                //we need to change cases
                str[pos]=str[pos]+32;
                q.push({str,pos+1}); 
            }
        }
        while(!q.empty())
        {
            ans.push_back(q.front().first);
            q.pop();
        }
        return ans;
    }
};

T(n) = O(2^n), n = length of the input string, we generate 2n combinations in the worst case when all the string characters are alphabets.
A(n) = O(2^n), queue used to store all the string combinations.


