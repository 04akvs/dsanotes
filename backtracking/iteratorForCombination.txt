Design the CombinationIterator class:

CombinationIterator(string characters, int combinationLength) Initializes the object with a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.
next() Returns the next combination of length combinationLength in lexicographical order.
hasNext() Returns true if and only if there exists a next combination.
 

Example 1:

Input
["CombinationIterator", "next", "hasNext", "next", "hasNext", "next", "hasNext"]
[["abc", 2], [], [], [], [], [], []]
Output
[null, "ab", true, "ac", true, "bc", false]

Explanation
CombinationIterator itr = new CombinationIterator("abc", 2);
itr.next();    // return "ab"
itr.hasNext(); // return True
itr.next();    // return "ac"
itr.hasNext(); // return True
itr.next();    // return "bc"
itr.hasNext(); // return False
 

Constraints:

1 <= combinationLength <= characters.length <= 15
All the characters of characters are unique.
At most 104 calls will be made to next and hasNext.
It's guaranteed that all calls of the function next are valid.


class CombinationIterator {
public:
    vector<string>temp;
    int curr=0;
    void backtrack(string characters,int n,string s,int start){
        if(s.size()==n){
            temp.push_back(s);
            return ;
        }
        //we need to start through every character
        for(int i=start;i<characters.size();i++)
        {
            s.push_back(characters[i]);
            backtrack(characters,n,s,i+1);
            s.pop_back();
        }
    }
    CombinationIterator(string characters, int combinationLength) {
         backtrack(characters,combinationLength,"",0);
    }
    string next() {
        return temp[curr++];
    }
    
    bool hasNext() {
        return curr==temp.size()?false:true;
        
    }
};

/**
 * Your CombinationIterator object will be instantiated and called as such:
 * CombinationIterator* obj = new CombinationIterator(characters, combinationLength);
 * string param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */


 
