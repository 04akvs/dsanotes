leetcode 76;


Given two strings s and t of lengths m and n respectively, return the minimum window in s which will contain all the characters in t. If there is no such window in s that covers all characters in t, return the empty string "".

Note that If there is such a window, it is guaranteed that there will always be only one unique minimum window in s.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Example 2:

Input: s = "a", t = "a"
Output: "a"
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of English letters.
 

Follow up: Could you find an algorithm that runs in O(m + n) time?



Brute force:

run two loops and expand inner loop till all characters of t are not found


Optimised approach:
using sliding window 


class Solution {
public:
    string minWindow(string s, string t) {
        unordered_map<char,int>mp;
        for(int i=0;i<t.size();i++)
            mp[t[i]]++;//stores the freq of characters in t
        int counter=t.size(),j=0, minlen=INT_MAX,head=0;
        for(int i=0;i<s.size();i++){
            if(mp[s[i]]>0) counter--; //in t
                mp[s[i]]--;
            while(counter==0){ //valid substring found
                if(i-j+1<minlen)
                {
                    minlen=i-j+1;
                    head=j;
                } 
                mp[s[j]]++;
			  if (mp[s[j]] > 0)//make it invalid 
				counter++;
			j++;
         }
       }
        return minlen==INT_MAX?"":s.substr(head,minlen);
    }
};

TC:O(n+m)