Leetcode 3:
https://leetcode.com/problems/longest-substring-without-repeating-characters/

Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Example 4:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.



Brute force :

for every index i , check jow far the inner loop j can expand such that no character is being repeated 

class Solution {
public:
    int lengthOfLongestSubstring(string str) {
        int maxLen=0;
        for(int i=0;i<str.size();i++){
            unordered_set<char>s;
            for(int j=i;j<str.size();j++){
                if(s.find(str[j])==s.end())
                    s.insert(str[j]);
                else
                {
                    maxLen=max(maxLen,j-i);break;
                }
            }
        }
        return maxLen;
    }
};

TC:O(n*n)



Method 2: optimised approach sliding window 



class Solution {
public:
    int lengthOfLongestSubstring(string str) {
        int maxLen=0;int j=0;
        unordered_map<char,int>mp;//counter to store freq
        for(int i=0;i<str.size();i++){
           mp[str[i]]++;
            while(mp[str[i]]>1){//shrink the window now 
                mp[str[j]]--;
                j++;
            }
            maxLen=max(maxLen,i-j+1);
        }
        return maxLen;
    }
};

TC:O(n)
SC:O(1)
