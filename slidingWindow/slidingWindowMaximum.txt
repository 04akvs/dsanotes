leetcode 239:
https://leetcode.com/problems/sliding-window-maximum/


You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
Example 3:

Input: nums = [1,-1], k = 1
Output: [1,-1]
Example 4:

Input: nums = [9,11], k = 2
Output: [11]
Example 5:

Input: nums = [4,-2], k = 2
Output: [4]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length

Brute force approach:

for every index , run a loop to get window of size k and find maximum in that 


class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        //return the maximum number in evry window of size k
        vector<int>ans;
        int n=nums.size();
        for(int i=0;i<=n-k;i++){
            int maxNum=INT_MIN;
            for(int j=i;j<i+k;j++){
                maxNum=max(maxNum,nums[j]);
            }
            ans.push_back(maxNum);
        }
        return ans;
        
       
    }
};

TC:O(n*n)
TLE for large values of n 


/////////////////////////////////////////////////////////////////////////////


Using multiset :


class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        //return the maximum number in evry window of size k
        vector<int>ans;
        multiset<int>s;
        int n=nums.size();
         for(int i=0;i<k;i++){
            s.insert(nums[i]);  
        }
        int j=0;
        ans.push_back(*(s.rbegin()));
        for(int i=k;i<n;i++){
             s.erase(s.find(nums[j++]));//move our window forward now 
             s.insert(nums[i]);//push in new element in our window of size k
             ans.push_back(*(s.rbegin())); //maximum element 
        }
        return ans;
    }
};

TC:O(nlogn)



///////////////////////////////////////////////////////////////////////////////////////////



using deque


class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        //return the maximum number in evry window of size k
        vector<int>ans;
        int n=nums.size();
        deque<int>dq;
        for(int i=0;i<k; i++)
        {
            while(!dq.empty() && nums[i]>nums[dq.back()])
                dq.pop_back();
            dq.push_back(i);
        } 
        // process remaining elements
        for(int i=k; i<n; i++)
        {
            ans.push_back(nums[dq.front()]);
            // remove elements which are not part of window
            while(!dq.empty() && dq.front() <= i-k)
                dq.pop_front();
            // remove elements which are not useful
            while(!dq.empty() && nums[i]>nums[dq.back()])
                dq.pop_back();
            // add new element
            dq.push_back(i);
        }
        ans.push_back(nums[dq.front()]);
        return ans;
    }
};

TC:O(n*k)


