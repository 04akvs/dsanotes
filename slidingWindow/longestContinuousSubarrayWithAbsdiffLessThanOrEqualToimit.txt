leetcode 1438:


https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/

Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.

 

Example 1:

Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 <= 4.
[8,2] with maximum absolute diff |8-2| = 6 > 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 > 4.
[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.
[2] with maximum absolute diff |2-2| = 0 <= 4.
[2,4] with maximum absolute diff |2-4| = 2 <= 4.
[2,4,7] with maximum absolute diff |2-7| = 5 > 4.
[4] with maximum absolute diff |4-4| = 0 <= 4.
[4,7] with maximum absolute diff |4-7| = 3 <= 4.
[7] with maximum absolute diff |7-7| = 0 <= 4. 
Therefore, the size of the longest subarray is 2.
Example 2:

Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4 
Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.
Example 3:

Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
0 <= limit <= 109




Method 1 : brute force approach:

for every index , check how far it can expand with diff<=limit 
and find the maxlen
int longestSubarray(vector<int>& nums, int limit) {
        int maxlen=0;
        for(int i=0;i<nums.size();i++)
        {
            int maxe=nums[i];
            int mine = nums[i];
            for(int j=i;j<nums.size();j++)
            {
                if(nums[j]>maxe)
                    maxe = nums[j];
                if(nums[j]<mine)
                    mine = nums[j];
                
                if(maxe-mine<=limit)
                    maxlen = max(maxlen,j-i+1);
            }
        }
        return maxlen;
    }



TC:O(n*n)
SC:O(1)




Method 2: using multiset 
so that for every new element being added in the window we can get the maximum and minimum element currently in the window 


class Solution {
public:
    int longestSubarray(vector<int>& nums, int limit) {
        int n=nums.size();
        multiset<int>s;int j=0;
        int ans=0;
        int minn=0;
        int maxx=0;
        for(int i=0;i<n;i++){
            s.insert(nums[i]);
             minn=*(s.begin());//maximum
             maxx=*(s.rbegin());//minimum
            while(maxx-minn>limit){//then time to shrink window
            s.erase(s.find(nums[j++]));
             minn=*(s.begin());
             maxx=*(s.rbegin());
            }
                ans = max(ans, i - j + 1);//finds the maximum window length that can be achieved 
        }
        return ans;
        
    }
};

TC:O(nlogn)


///////////////////////////////////////////////////////////////////////////////////////////////////////

Method 2: using deque-




