Given an array A of 0s and 1s, we may change up to K values from 0 to 1.

Return the length of the longest (contiguous) subarray that contains only 1s. 

Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2
Output: 6
Explanation: 
[1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.

Brute force approach: is to run two loops for subarrays then count the number of zeroes in it . if count<=K then find the maximum size of the subarray
#include <bits/stdc++.h>
using namespace std;
#define imp() ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define pb push_back
#define endl "\n"
#define lli long long int 
#define ll long long 

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);cout.tie(NULL);
  int n,m;cin>>n>>m;
  int arr[n];int maxx=-1;
  for(int i=0;i<n;i++)
  cin>>arr[i];
  for(int i=0;i<n;i++)
  {
      int c=0;int pos=0;int k=0;
      for(int j=i;j<n;j++)
      {
          if(arr[j]==0)
          {c++;
          }k++;
      }
      if(c<=m)
      {
          maxx=max(maxx,abs(k));                               TC:O(n*n)  s:O(1)
      }
      
  }
  cout<<maxx;
  
	return 0;
}
///////----------------///////////////////
OPTIMAL APPROACH is to use SLIDING WINDOW TECHNIQUE
class Solution {
public:
    int longestOnes(vector<int>& A, int K) {
        int maxx=0;int leftIndex=0;int zeroCount=0;
        for(int i=0;i<A.size();i++)
        {
            if(A[i]==0)
                zeroCount++;
            while(zeroCount>K)///as soon as th ecount of zeroes exceeds the count allowed it shrinks the window until it is desired
            by incrementing the left pointer 
            {
                if(A[leftIndex]==0)
                    zeroCount--;
                leftIndex++;
            }
            maxx=max(maxx,i-leftIndex+1); //calculates maximum size of every appropriate window
            }
        return maxx;
    }
};