Leetcode 92:

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
 

Follow up: Could you do it in one pass?





/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(left==right)
            return head;
        int s=left;
        ListNode* temp=head;
        ListNode* start=head;ListNode* last=head;
        int count=right-left+1;
        while(left>1 && temp!=NULL){
            start=temp;
            temp=temp->next;
            left--;
        }
        ListNode* temp1=head;
        while(right>0 && temp1!=NULL){
            last=temp1;
            temp1=temp1->next;
            right--;
        }
        ListNode* prev=last->next;
        while(count>0 && temp!=NULL){
            ListNode* curr=temp->next;
            temp->next=prev;
            prev=temp;
            temp=curr;
            count--;
        }
        if(s==1)
            return prev;
        start->next=prev;
        return head;
        
    }
};

