Given a linked list of N nodes where nodes can contain values 0s, 1s, and 2s only. The task is to segregate 0s, 1s, and 2s linked list such that all zeros segregate to head side, 2s at the end of the linked list, and 1s in the mid of 0s and 2s.

Example 1:

Input:
N = 8
value[] = {1,2,2,1,2,0,2,2}
Output: 0 1 1 2 2 2 2 2
Explanation: All the 0s are segregated
to the left end of the linked list,
2s to the right end of the list, and
1s in between.




Node* segregate(Node *head) {
    
    // Add code here
    int one=0;int zero=0;int two=0;
    Node* curr=head;
    while(curr!=NULL)
    {
        if(curr->data==0)
        {
            zero++;
        }
        else if(curr->data==1)
        {
            one++;
        }
        else if(curr->data==2)
        {
            two++;
        }
        curr=curr->next;
    }
    curr=head;
    while(curr!=NULL)
    {
       while(zero--)
       {
           curr->data=0;
           curr=curr->next;
       }
       while(one--)
       {
           curr->data=1;
           curr=curr->next;
       }
       while(two--)
       {
           curr->data=2;
           curr=curr->next;
       }
    }
    return head;
    
}

TC:O(n)


The above solution does not work when these values have associated data with them.
For example,
 these three represent three colours and different types of objects associated with the colours and sort the objects (connected with a linked list) based on colours.


 
