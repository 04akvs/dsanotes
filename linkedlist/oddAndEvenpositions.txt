/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 ///////////////////////
 THE IDEA IS BASICALLY TO MAINTAIN TWO POINTERS ,ONE FOR ODD AND ONE FOR EVEN HEAD AND TRAVERSE ALL NODES ONE BY ONE
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head==NULL || head->next==NULL || head->next->next==NULL)
            return head;
        ListNode* even=head->next;
        ListNode* odd=head;ListNode* evenfirst=even;
        while(even!=NULL && even->next!=NULL )/////////o(n) approach 
        {
         odd->next=even->next;
            odd=odd->next;
                even->next=odd->next;
                even=even->next;
        }
            odd->next=evenfirst;
        
        return head;
    } 
};