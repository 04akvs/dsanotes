You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7
////////////////////////////////////////--------------////////////////////////////////
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
        ListNode* reverse(ListNode* head)
    {
        ListNode* curr=NULL;
        ListNode* prev=NULL;
        while(head!=NULL)
        {
        curr=head->next;
            head->next=prev;
            prev=head;
            head=curr;
        }
        return prev;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ll1=reverse(l1);ListNode* newlist=new ListNode(0);
        ListNode* temp=newlist;
        ListNode* ll2=reverse(l2);int carry=0;int sum=0;
        while(ll1 || ll2 || carry==1)
        {
            if(ll1)
            {
                sum+=ll1->val;ll1=ll1->next;
            }
            if(ll2)
            {
                sum+=ll2->val;ll2=ll2->next;
            }
             sum=carry+sum;
            ListNode* node=new ListNode(sum%10);
            temp->next=node;
            temp=temp->next;
            carry=sum/10;sum=0;    
        }
        newlist=reverse(newlist->next);
        return newlist;
    }
    
};