The WHERE clause is used to filter records.

It is used to extract only those records that fulfill a specified condition.

1.Select all records where the City column has the value "Berlin".

SELECT * FROM Customers
WHERE City = 'Berlin';



2.Use the NOT keyword to select all records where City is NOT "Berlin".


SELECT * FROM Customers
WHERE NOT City = 'Berlin';


3.Select all records where the CustomerID column has the value 32.


SELECT * FROM Customers
WHERE CustomerID=32;


4.Select all records where the City column has the value 'Berlin' and the PostalCode column has the value 12209.


SELECT* FROM Customers
WHERE City = 'Berlin'AND PostalCode = 12209;


5.Select all records where the City column has the value 'Berlin' or 'London'.


SELECT* FROM Customers
WHERE City = 'Berlin' OR  City= 'London';



Order by clause

6.Select all records from the Customers table, sort the result alphabetically by the column City.


SELECT * FROM Customers
ORDER BY City;


7.Select all records from the Customers table, sort the result reversed alphabetically by the column City.


SELECT * FROM Customers
ORDER BY City DESC ;



8.Select all records from the Customers table, sort the result alphabetically, first by the column Country, then, by the column City.


SELECT * FROM Customers
ORDER BY Country,City;


Null clause
9.Select all records from the Customers where the PostalCode column is empty.


SELECT * FROM Customers
WHERE 
PostalCode IS NULL;


10.Select all records from the Customers where the PostalCode column is NOT empty.


SELECT * FROM Customers
WHERE 
PostalCode IS NOT NULL ;



11.Update the City column of all records in the Customers table.


UPDATE
 Customers
SET
 City = 'Oslo';



 12.Set the value of the City columns to 'Oslo', but only the ones where the Country column has the value "Norway".


UPDATE
 Customers
SET
 City = 'Oslo'
WHERE
 Country = 'Norway';


 13.Update the City value and the Country value.


UPDATE
 Customers
SET
 City = 'Oslo'
,

Country
 = 'Norway'
WHERE CustomerID = 32;



14.Delete all the records from the Customers table where the Country value is 'Norway'.


DELETE FROM
 Customers
WHERE
 Country = 'Norway';


 15.Delete all the records from the Customers table.


DELETE FROM
 Customers;



 16.Use the MIN function to select the record with the smallest value of the Price column.


SELECT 
MIN(Price)

FROM Products;


17.Use an SQL function to select the record with the highest value of the Price column.


SELECT 
MAX(Price)

FROM Products;



18.Use the correct function to return the number of records that have the Price value set to 18.


SELECT 
COUNT
(*)
FROM Products
WHERE
 Price = 18;


 19.Use an SQL function to calculate the average price of all products.


SELECT 
AVG(Price)

FROM Products;


20.Use an SQL function to calculate the sum of all the Price column values in the Products table.


SELECT 
SUM(Price)

FROM Products;


21.Use the IN operator to select all the records where Country is either "Norway" or "France".


SELECT * FROM Customers
WHERE Country IN
 
('Norway',
 'France'
)
;


22.Use the IN operator to select all the records where Country is NOT "Norway" and NOT "France".


SELECT * FROM Customers
WHERE Country NOT IN
 ('Norway', 'France');


 23.Use the BETWEEN operator to select all the records where the value of the Price column is between 10 and 20.


SELECT * FROM Products
WHERE Price 
BETWEEN 10 AND 20
;


24.Use the BETWEEN operator to select all the records where the value of the Price column is NOT between 10 and 20.


SELECT * FROM Products
WHERE Price 
NOT BETWEEN 10 AND 20
;


25.Use the BETWEEN operator to select all the records where the value of the ProductName column is alphabetically between 'Geitost' and 'Pavlova'.


SELECT * FROM Products
WHERE ProductName 
BETWEEN 'Geitost' AND 'Pavlova'
;


26. Insert the missing parts in the JOIN clause to join the two tables Orders and Customers, using the CustomerID field in both tables as the relationship between the two tables.


SELECT *
FROM Orders
LEFT JOIN Customers
ON Orders.CustomerID
=
Customers.CustomerID
;


27.Choose the correct JOIN clause to select all records from the two tables where there is a match in both tables.


SELECT *
FROM Orders
INNER JOIN Customers

ON Orders.CustomerID=Customers.CustomerID;



28.Choose the correct JOIN clause to select all the records from the Customers table plus all the matches in the Orders table.


SELECT *
FROM Orders
RIGHT JOIN Customers

ON Orders.CustomerID=Customers.CustomerID;



29.List the number of customers in each country.


SELECT 
COUNT
(CustomerID),
Country
FROM Customers
GROUP BY Country
;


30.List the number of customers in each country, ordered by the country with the most customers first.


SELECT 
COUNT
(CustomerID),
Country
FROM Customers
GROUP BY Country

ORDER BY 
COUNT(CustomerID) DESC
;


31.Write the correct SQL statement to create a new database called testDB.


CREATE DATABASE testDB
;


32.Write the correct SQL statement to delete a database named testDB.


DROP DATABASE testDB
;



33.Write the correct SQL statement to create a new table called Persons.


CREATE TABLE Persons
 (
  PersonID int,
  LastName varchar(255),
  FirstName varchar(255),
  Address varchar(255),
  City varchar(255) 
);



34.Write the correct SQL statement to delete a table called Persons.


DROP TABLE
 Persons;


 35.Use the TRUNCATE statement to delete all data inside a table.


TRUNCATE TABLE
 Persons;


 36.Add a column of type DATE called Birthday.


ALTER TABLE
 Persons
ADD Birthday DATE
;



37.Delete the column Birthday from the Persons table.


ALTER TABLE
 Persons
DROP COLUMN
 Birthday;



 38.When displaying the Customers table, make an ALIAS of the PostalCode column, the column should be called Pno instead.


SELECT CustomerName,
Address,
PostalCode 
AS Pno

FROM Customers;



39.When displaying the Customers table, refer to the table as Consumers instead of Customers.


SELECT *
FROM Customers 
AS Consumers
;